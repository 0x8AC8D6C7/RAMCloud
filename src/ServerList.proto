/* Copyright (c) 2010,2011 Stanford University
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR(S) DISCLAIM ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL AUTHORS BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

package RAMCloud.ProtoBuf;

/// A list of servers, which describes the services they provide and a
/// means of contacting them using RAMCloud transports.
///
/// This message is used both when pulling complete lists from the
/// coordinator (GetServerListRpc) and when pushing delta updates
/// to other servers by the coordinator (UpdateServerListRpc).
message ServerList {
  message Entry {
    /// Is this server a master?
    required bool is_master = 1;

    /// Is this server a backup?
    required bool is_backup = 2;

    /// A unique id for the service.
    required fixed64 server_id = 3;

    /// A locator for the service.
    required string service_locator = 4;

    /// A field used in mysterious ways during recovery.
    optional fixed64 segment_id = 5;

    /// An opaque field which happens to be large enough for a pointer.
    optional fixed64 user_data = 6;

    /// If true, this server is in the cluster. If false, this server
    /// is no longer in the cluster.
    required bool is_in_cluster = 7;
  }

  /// List of servers.
  repeated Entry server = 1;

  /// Generation number of the Coordinator's list at the time this message
  /// is sent. Used to determine if the current list is out of date. See
  /// CoordinatorServerList::version and ServerList::version for more details.
  optional fixed64 version_number = 2;
}
