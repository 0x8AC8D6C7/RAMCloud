// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SpinLockStatistics.proto

#ifndef PROTOBUF_SpinLockStatistics_2eproto__INCLUDED
#define PROTOBUF_SpinLockStatistics_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace RAMCloud {
namespace ProtoBuf {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_SpinLockStatistics_2eproto();
void protobuf_AssignDesc_SpinLockStatistics_2eproto();
void protobuf_ShutdownFile_SpinLockStatistics_2eproto();

class SpinLockStatistics;
class SpinLockStatistics_Lock;

// ===================================================================

class SpinLockStatistics_Lock : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RAMCloud.ProtoBuf.SpinLockStatistics.Lock) */ {
 public:
  SpinLockStatistics_Lock();
  virtual ~SpinLockStatistics_Lock();

  SpinLockStatistics_Lock(const SpinLockStatistics_Lock& from);

  inline SpinLockStatistics_Lock& operator=(const SpinLockStatistics_Lock& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpinLockStatistics_Lock& default_instance();

  void Swap(SpinLockStatistics_Lock* other);

  // implements Message ----------------------------------------------

  inline SpinLockStatistics_Lock* New() const { return New(NULL); }

  SpinLockStatistics_Lock* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SpinLockStatistics_Lock& from);
  void MergeFrom(const SpinLockStatistics_Lock& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SpinLockStatistics_Lock* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required fixed64 acquisitions = 2;
  bool has_acquisitions() const;
  void clear_acquisitions();
  static const int kAcquisitionsFieldNumber = 2;
  ::google::protobuf::uint64 acquisitions() const;
  void set_acquisitions(::google::protobuf::uint64 value);

  // required fixed64 contended_acquisitions = 3;
  bool has_contended_acquisitions() const;
  void clear_contended_acquisitions();
  static const int kContendedAcquisitionsFieldNumber = 3;
  ::google::protobuf::uint64 contended_acquisitions() const;
  void set_contended_acquisitions(::google::protobuf::uint64 value);

  // required fixed64 contended_nsec = 4;
  bool has_contended_nsec() const;
  void clear_contended_nsec();
  static const int kContendedNsecFieldNumber = 4;
  ::google::protobuf::uint64 contended_nsec() const;
  void set_contended_nsec(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:RAMCloud.ProtoBuf.SpinLockStatistics.Lock)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_acquisitions();
  inline void clear_has_acquisitions();
  inline void set_has_contended_acquisitions();
  inline void clear_has_contended_acquisitions();
  inline void set_has_contended_nsec();
  inline void clear_has_contended_nsec();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint64 acquisitions_;
  ::google::protobuf::uint64 contended_acquisitions_;
  ::google::protobuf::uint64 contended_nsec_;
  friend void  protobuf_AddDesc_SpinLockStatistics_2eproto();
  friend void protobuf_AssignDesc_SpinLockStatistics_2eproto();
  friend void protobuf_ShutdownFile_SpinLockStatistics_2eproto();

  void InitAsDefaultInstance();
  static SpinLockStatistics_Lock* default_instance_;
};
// -------------------------------------------------------------------

class SpinLockStatistics : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RAMCloud.ProtoBuf.SpinLockStatistics) */ {
 public:
  SpinLockStatistics();
  virtual ~SpinLockStatistics();

  SpinLockStatistics(const SpinLockStatistics& from);

  inline SpinLockStatistics& operator=(const SpinLockStatistics& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpinLockStatistics& default_instance();

  void Swap(SpinLockStatistics* other);

  // implements Message ----------------------------------------------

  inline SpinLockStatistics* New() const { return New(NULL); }

  SpinLockStatistics* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SpinLockStatistics& from);
  void MergeFrom(const SpinLockStatistics& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SpinLockStatistics* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SpinLockStatistics_Lock Lock;

  // accessors -------------------------------------------------------

  // repeated .RAMCloud.ProtoBuf.SpinLockStatistics.Lock locks = 1;
  int locks_size() const;
  void clear_locks();
  static const int kLocksFieldNumber = 1;
  const ::RAMCloud::ProtoBuf::SpinLockStatistics_Lock& locks(int index) const;
  ::RAMCloud::ProtoBuf::SpinLockStatistics_Lock* mutable_locks(int index);
  ::RAMCloud::ProtoBuf::SpinLockStatistics_Lock* add_locks();
  ::google::protobuf::RepeatedPtrField< ::RAMCloud::ProtoBuf::SpinLockStatistics_Lock >*
      mutable_locks();
  const ::google::protobuf::RepeatedPtrField< ::RAMCloud::ProtoBuf::SpinLockStatistics_Lock >&
      locks() const;

  // @@protoc_insertion_point(class_scope:RAMCloud.ProtoBuf.SpinLockStatistics)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::RAMCloud::ProtoBuf::SpinLockStatistics_Lock > locks_;
  friend void  protobuf_AddDesc_SpinLockStatistics_2eproto();
  friend void protobuf_AssignDesc_SpinLockStatistics_2eproto();
  friend void protobuf_ShutdownFile_SpinLockStatistics_2eproto();

  void InitAsDefaultInstance();
  static SpinLockStatistics* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SpinLockStatistics_Lock

// required string name = 1;
inline bool SpinLockStatistics_Lock::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpinLockStatistics_Lock::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpinLockStatistics_Lock::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpinLockStatistics_Lock::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& SpinLockStatistics_Lock::name() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.SpinLockStatistics.Lock.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SpinLockStatistics_Lock::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.SpinLockStatistics.Lock.name)
}
inline void SpinLockStatistics_Lock::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RAMCloud.ProtoBuf.SpinLockStatistics.Lock.name)
}
inline void SpinLockStatistics_Lock::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RAMCloud.ProtoBuf.SpinLockStatistics.Lock.name)
}
inline ::std::string* SpinLockStatistics_Lock::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.SpinLockStatistics.Lock.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SpinLockStatistics_Lock::release_name() {
  // @@protoc_insertion_point(field_release:RAMCloud.ProtoBuf.SpinLockStatistics.Lock.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SpinLockStatistics_Lock::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:RAMCloud.ProtoBuf.SpinLockStatistics.Lock.name)
}

// required fixed64 acquisitions = 2;
inline bool SpinLockStatistics_Lock::has_acquisitions() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpinLockStatistics_Lock::set_has_acquisitions() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SpinLockStatistics_Lock::clear_has_acquisitions() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SpinLockStatistics_Lock::clear_acquisitions() {
  acquisitions_ = GOOGLE_ULONGLONG(0);
  clear_has_acquisitions();
}
inline ::google::protobuf::uint64 SpinLockStatistics_Lock::acquisitions() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.SpinLockStatistics.Lock.acquisitions)
  return acquisitions_;
}
inline void SpinLockStatistics_Lock::set_acquisitions(::google::protobuf::uint64 value) {
  set_has_acquisitions();
  acquisitions_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.SpinLockStatistics.Lock.acquisitions)
}

// required fixed64 contended_acquisitions = 3;
inline bool SpinLockStatistics_Lock::has_contended_acquisitions() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SpinLockStatistics_Lock::set_has_contended_acquisitions() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SpinLockStatistics_Lock::clear_has_contended_acquisitions() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SpinLockStatistics_Lock::clear_contended_acquisitions() {
  contended_acquisitions_ = GOOGLE_ULONGLONG(0);
  clear_has_contended_acquisitions();
}
inline ::google::protobuf::uint64 SpinLockStatistics_Lock::contended_acquisitions() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.SpinLockStatistics.Lock.contended_acquisitions)
  return contended_acquisitions_;
}
inline void SpinLockStatistics_Lock::set_contended_acquisitions(::google::protobuf::uint64 value) {
  set_has_contended_acquisitions();
  contended_acquisitions_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.SpinLockStatistics.Lock.contended_acquisitions)
}

// required fixed64 contended_nsec = 4;
inline bool SpinLockStatistics_Lock::has_contended_nsec() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SpinLockStatistics_Lock::set_has_contended_nsec() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SpinLockStatistics_Lock::clear_has_contended_nsec() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SpinLockStatistics_Lock::clear_contended_nsec() {
  contended_nsec_ = GOOGLE_ULONGLONG(0);
  clear_has_contended_nsec();
}
inline ::google::protobuf::uint64 SpinLockStatistics_Lock::contended_nsec() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.SpinLockStatistics.Lock.contended_nsec)
  return contended_nsec_;
}
inline void SpinLockStatistics_Lock::set_contended_nsec(::google::protobuf::uint64 value) {
  set_has_contended_nsec();
  contended_nsec_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.SpinLockStatistics.Lock.contended_nsec)
}

// -------------------------------------------------------------------

// SpinLockStatistics

// repeated .RAMCloud.ProtoBuf.SpinLockStatistics.Lock locks = 1;
inline int SpinLockStatistics::locks_size() const {
  return locks_.size();
}
inline void SpinLockStatistics::clear_locks() {
  locks_.Clear();
}
inline const ::RAMCloud::ProtoBuf::SpinLockStatistics_Lock& SpinLockStatistics::locks(int index) const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.SpinLockStatistics.locks)
  return locks_.Get(index);
}
inline ::RAMCloud::ProtoBuf::SpinLockStatistics_Lock* SpinLockStatistics::mutable_locks(int index) {
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.SpinLockStatistics.locks)
  return locks_.Mutable(index);
}
inline ::RAMCloud::ProtoBuf::SpinLockStatistics_Lock* SpinLockStatistics::add_locks() {
  // @@protoc_insertion_point(field_add:RAMCloud.ProtoBuf.SpinLockStatistics.locks)
  return locks_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::RAMCloud::ProtoBuf::SpinLockStatistics_Lock >*
SpinLockStatistics::mutable_locks() {
  // @@protoc_insertion_point(field_mutable_list:RAMCloud.ProtoBuf.SpinLockStatistics.locks)
  return &locks_;
}
inline const ::google::protobuf::RepeatedPtrField< ::RAMCloud::ProtoBuf::SpinLockStatistics_Lock >&
SpinLockStatistics::locks() const {
  // @@protoc_insertion_point(field_list:RAMCloud.ProtoBuf.SpinLockStatistics.locks)
  return locks_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoBuf
}  // namespace RAMCloud

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SpinLockStatistics_2eproto__INCLUDED
// RAMCloud pragma [GCCWARN=0]
