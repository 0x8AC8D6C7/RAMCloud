// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ServerConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace RAMCloud {
namespace ProtoBuf {

namespace {

const ::google::protobuf::Descriptor* ServerConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerConfig_Master_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerConfig_Master_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerConfig_Backup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerConfig_Backup_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ServerConfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_ServerConfig_2eproto() {
  protobuf_AddDesc_ServerConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ServerConfig.proto");
  GOOGLE_CHECK(file != NULL);
  ServerConfig_descriptor_ = file->message_type(0);
  static const int ServerConfig_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, coordinator_locator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, local_locator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, cluster_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, services_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, detect_failures_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, pin_memory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, segment_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, seglet_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, max_object_data_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, max_object_key_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, max_cores_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, master_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, backup_),
  };
  ServerConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ServerConfig_descriptor_,
      ServerConfig::default_instance_,
      ServerConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(ServerConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, _internal_metadata_),
      -1);
  ServerConfig_Master_descriptor_ = ServerConfig_descriptor_->nested_type(0);
  static const int ServerConfig_Master_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig_Master, log_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig_Master, hash_table_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig_Master, disable_log_cleaner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig_Master, disable_in_memory_cleaning_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig_Master, backup_disk_expansion_factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig_Master, cleaner_write_cost_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig_Master, cleaner_balancer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig_Master, cleaner_thread_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig_Master, num_replicas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig_Master, use_hugepages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig_Master, use_mincopysets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig_Master, use_local_backup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig_Master, use_plusonebackup_),
  };
  ServerConfig_Master_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ServerConfig_Master_descriptor_,
      ServerConfig_Master::default_instance_,
      ServerConfig_Master_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig_Master, _has_bits_[0]),
      -1,
      -1,
      sizeof(ServerConfig_Master),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig_Master, _internal_metadata_),
      -1);
  ServerConfig_Backup_descriptor_ = ServerConfig_descriptor_->nested_type(1);
  static const int ServerConfig_Backup_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig_Backup, gc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig_Backup, in_memory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig_Backup, num_segment_frames_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig_Backup, max_non_volatile_buffers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig_Backup, max_recovery_replicas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig_Backup, file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig_Backup, strategy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig_Backup, mock_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig_Backup, write_rate_limit_),
  };
  ServerConfig_Backup_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ServerConfig_Backup_descriptor_,
      ServerConfig_Backup::default_instance_,
      ServerConfig_Backup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig_Backup, _has_bits_[0]),
      -1,
      -1,
      sizeof(ServerConfig_Backup),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig_Backup, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ServerConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ServerConfig_descriptor_, &ServerConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ServerConfig_Master_descriptor_, &ServerConfig_Master::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ServerConfig_Backup_descriptor_, &ServerConfig_Backup::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ServerConfig_2eproto() {
  delete ServerConfig::default_instance_;
  delete ServerConfig_reflection_;
  delete ServerConfig_Master::default_instance_;
  delete ServerConfig_Master_reflection_;
  delete ServerConfig_Backup::default_instance_;
  delete ServerConfig_Backup_reflection_;
}

void protobuf_AddDesc_ServerConfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_ServerConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022ServerConfig.proto\022\021RAMCloud.ProtoBuf\""
    "\315\007\n\014ServerConfig\022\033\n\023coordinator_locator\030"
    "\001 \002(\t\022\025\n\rlocal_locator\030\002 \002(\t\022\024\n\014cluster_"
    "name\030\003 \002(\t\022\020\n\010services\030\004 \002(\t\022\027\n\017detect_f"
    "ailures\030\005 \002(\010\022\022\n\npin_memory\030\006 \002(\010\022\024\n\014seg"
    "ment_size\030\007 \002(\007\022\023\n\013seglet_size\030\010 \002(\007\022\034\n\024"
    "max_object_data_size\030\t \002(\007\022\033\n\023max_object"
    "_key_size\030\n \002(\007\022\021\n\tmax_cores\030\013 \002(\007\0226\n\006ma"
    "ster\030\014 \001(\0132&.RAMCloud.ProtoBuf.ServerCon"
    "fig.Master\0226\n\006backup\030\r \001(\0132&.RAMCloud.Pr"
    "otoBuf.ServerConfig.Backup\032\365\002\n\006Master\022\021\n"
    "\tlog_bytes\030\001 \002(\006\022\030\n\020hash_table_bytes\030\002 \002"
    "(\006\022\033\n\023disable_log_cleaner\030\003 \002(\010\022\"\n\032disab"
    "le_in_memory_cleaning\030\004 \002(\010\022$\n\034backup_di"
    "sk_expansion_factor\030\005 \002(\001\022$\n\034cleaner_wri"
    "te_cost_threshold\030\006 \002(\007\022\030\n\020cleaner_balan"
    "cer\030\007 \002(\t\022\034\n\024cleaner_thread_count\030\010 \002(\007\022"
    "\024\n\014num_replicas\030\t \002(\007\022\025\n\ruse_hugepages\030\n"
    " \002(\010\022\027\n\017use_mincopysets\030\013 \002(\010\022\030\n\020use_loc"
    "al_backup\030\014 \002(\010\022\031\n\021use_plusonebackup\030\r \002"
    "(\010\032\322\001\n\006Backup\022\n\n\002gc\030\001 \002(\010\022\021\n\tin_memory\030\002"
    " \002(\010\022\032\n\022num_segment_frames\030\003 \002(\007\022 \n\030max_"
    "non_volatile_buffers\030\004 \002(\007\022\035\n\025max_recove"
    "ry_replicas\030\024 \002(\007\022\014\n\004file\030\005 \001(\t\022\020\n\010strat"
    "egy\030\006 \002(\005\022\022\n\nmock_speed\030\007 \002(\007\022\030\n\020write_r"
    "ate_limit\030\010 \002(\006", 1015);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ServerConfig.proto", &protobuf_RegisterTypes);
  ServerConfig::default_instance_ = new ServerConfig();
  ServerConfig_Master::default_instance_ = new ServerConfig_Master();
  ServerConfig_Backup::default_instance_ = new ServerConfig_Backup();
  ServerConfig::default_instance_->InitAsDefaultInstance();
  ServerConfig_Master::default_instance_->InitAsDefaultInstance();
  ServerConfig_Backup::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ServerConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ServerConfig_2eproto {
  StaticDescriptorInitializer_ServerConfig_2eproto() {
    protobuf_AddDesc_ServerConfig_2eproto();
  }
} static_descriptor_initializer_ServerConfig_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerConfig_Master::kLogBytesFieldNumber;
const int ServerConfig_Master::kHashTableBytesFieldNumber;
const int ServerConfig_Master::kDisableLogCleanerFieldNumber;
const int ServerConfig_Master::kDisableInMemoryCleaningFieldNumber;
const int ServerConfig_Master::kBackupDiskExpansionFactorFieldNumber;
const int ServerConfig_Master::kCleanerWriteCostThresholdFieldNumber;
const int ServerConfig_Master::kCleanerBalancerFieldNumber;
const int ServerConfig_Master::kCleanerThreadCountFieldNumber;
const int ServerConfig_Master::kNumReplicasFieldNumber;
const int ServerConfig_Master::kUseHugepagesFieldNumber;
const int ServerConfig_Master::kUseMincopysetsFieldNumber;
const int ServerConfig_Master::kUseLocalBackupFieldNumber;
const int ServerConfig_Master::kUsePlusonebackupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerConfig_Master::ServerConfig_Master()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RAMCloud.ProtoBuf.ServerConfig.Master)
}

void ServerConfig_Master::InitAsDefaultInstance() {
}

ServerConfig_Master::ServerConfig_Master(const ServerConfig_Master& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RAMCloud.ProtoBuf.ServerConfig.Master)
}

void ServerConfig_Master::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  log_bytes_ = GOOGLE_ULONGLONG(0);
  hash_table_bytes_ = GOOGLE_ULONGLONG(0);
  disable_log_cleaner_ = false;
  disable_in_memory_cleaning_ = false;
  backup_disk_expansion_factor_ = 0;
  cleaner_write_cost_threshold_ = 0u;
  cleaner_balancer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cleaner_thread_count_ = 0u;
  num_replicas_ = 0u;
  use_hugepages_ = false;
  use_mincopysets_ = false;
  use_local_backup_ = false;
  use_plusonebackup_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerConfig_Master::~ServerConfig_Master() {
  // @@protoc_insertion_point(destructor:RAMCloud.ProtoBuf.ServerConfig.Master)
  SharedDtor();
}

void ServerConfig_Master::SharedDtor() {
  cleaner_balancer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ServerConfig_Master::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerConfig_Master::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerConfig_Master_descriptor_;
}

const ServerConfig_Master& ServerConfig_Master::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerConfig_2eproto();
  return *default_instance_;
}

ServerConfig_Master* ServerConfig_Master::default_instance_ = NULL;

ServerConfig_Master* ServerConfig_Master::New(::google::protobuf::Arena* arena) const {
  ServerConfig_Master* n = new ServerConfig_Master;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerConfig_Master::Clear() {
// @@protoc_insertion_point(message_clear_start:RAMCloud.ProtoBuf.ServerConfig.Master)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ServerConfig_Master, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ServerConfig_Master*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(log_bytes_, disable_in_memory_cleaning_);
    if (has_cleaner_balancer()) {
      cleaner_balancer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    cleaner_thread_count_ = 0u;
  }
  if (_has_bits_[8 / 32] & 7936u) {
    ZR_(use_hugepages_, use_mincopysets_);
    ZR_(num_replicas_, use_plusonebackup_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ServerConfig_Master::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RAMCloud.ProtoBuf.ServerConfig.Master)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 log_bytes = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &log_bytes_)));
          set_has_log_bytes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_hash_table_bytes;
        break;
      }

      // required fixed64 hash_table_bytes = 2;
      case 2: {
        if (tag == 17) {
         parse_hash_table_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &hash_table_bytes_)));
          set_has_hash_table_bytes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_disable_log_cleaner;
        break;
      }

      // required bool disable_log_cleaner = 3;
      case 3: {
        if (tag == 24) {
         parse_disable_log_cleaner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_log_cleaner_)));
          set_has_disable_log_cleaner();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_disable_in_memory_cleaning;
        break;
      }

      // required bool disable_in_memory_cleaning = 4;
      case 4: {
        if (tag == 32) {
         parse_disable_in_memory_cleaning:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_in_memory_cleaning_)));
          set_has_disable_in_memory_cleaning();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_backup_disk_expansion_factor;
        break;
      }

      // required double backup_disk_expansion_factor = 5;
      case 5: {
        if (tag == 41) {
         parse_backup_disk_expansion_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &backup_disk_expansion_factor_)));
          set_has_backup_disk_expansion_factor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_cleaner_write_cost_threshold;
        break;
      }

      // required fixed32 cleaner_write_cost_threshold = 6;
      case 6: {
        if (tag == 53) {
         parse_cleaner_write_cost_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &cleaner_write_cost_threshold_)));
          set_has_cleaner_write_cost_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_cleaner_balancer;
        break;
      }

      // required string cleaner_balancer = 7;
      case 7: {
        if (tag == 58) {
         parse_cleaner_balancer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cleaner_balancer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cleaner_balancer().data(), this->cleaner_balancer().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RAMCloud.ProtoBuf.ServerConfig.Master.cleaner_balancer");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_cleaner_thread_count;
        break;
      }

      // required fixed32 cleaner_thread_count = 8;
      case 8: {
        if (tag == 69) {
         parse_cleaner_thread_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &cleaner_thread_count_)));
          set_has_cleaner_thread_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_num_replicas;
        break;
      }

      // required fixed32 num_replicas = 9;
      case 9: {
        if (tag == 77) {
         parse_num_replicas:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &num_replicas_)));
          set_has_num_replicas();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_use_hugepages;
        break;
      }

      // required bool use_hugepages = 10;
      case 10: {
        if (tag == 80) {
         parse_use_hugepages:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_hugepages_)));
          set_has_use_hugepages();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_use_mincopysets;
        break;
      }

      // required bool use_mincopysets = 11;
      case 11: {
        if (tag == 88) {
         parse_use_mincopysets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_mincopysets_)));
          set_has_use_mincopysets();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_use_local_backup;
        break;
      }

      // required bool use_local_backup = 12;
      case 12: {
        if (tag == 96) {
         parse_use_local_backup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_local_backup_)));
          set_has_use_local_backup();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_use_plusonebackup;
        break;
      }

      // required bool use_plusonebackup = 13;
      case 13: {
        if (tag == 104) {
         parse_use_plusonebackup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_plusonebackup_)));
          set_has_use_plusonebackup();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RAMCloud.ProtoBuf.ServerConfig.Master)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RAMCloud.ProtoBuf.ServerConfig.Master)
  return false;
#undef DO_
}

void ServerConfig_Master::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RAMCloud.ProtoBuf.ServerConfig.Master)
  // required fixed64 log_bytes = 1;
  if (has_log_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->log_bytes(), output);
  }

  // required fixed64 hash_table_bytes = 2;
  if (has_hash_table_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->hash_table_bytes(), output);
  }

  // required bool disable_log_cleaner = 3;
  if (has_disable_log_cleaner()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->disable_log_cleaner(), output);
  }

  // required bool disable_in_memory_cleaning = 4;
  if (has_disable_in_memory_cleaning()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->disable_in_memory_cleaning(), output);
  }

  // required double backup_disk_expansion_factor = 5;
  if (has_backup_disk_expansion_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->backup_disk_expansion_factor(), output);
  }

  // required fixed32 cleaner_write_cost_threshold = 6;
  if (has_cleaner_write_cost_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(6, this->cleaner_write_cost_threshold(), output);
  }

  // required string cleaner_balancer = 7;
  if (has_cleaner_balancer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cleaner_balancer().data(), this->cleaner_balancer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RAMCloud.ProtoBuf.ServerConfig.Master.cleaner_balancer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->cleaner_balancer(), output);
  }

  // required fixed32 cleaner_thread_count = 8;
  if (has_cleaner_thread_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(8, this->cleaner_thread_count(), output);
  }

  // required fixed32 num_replicas = 9;
  if (has_num_replicas()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(9, this->num_replicas(), output);
  }

  // required bool use_hugepages = 10;
  if (has_use_hugepages()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->use_hugepages(), output);
  }

  // required bool use_mincopysets = 11;
  if (has_use_mincopysets()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->use_mincopysets(), output);
  }

  // required bool use_local_backup = 12;
  if (has_use_local_backup()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->use_local_backup(), output);
  }

  // required bool use_plusonebackup = 13;
  if (has_use_plusonebackup()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->use_plusonebackup(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RAMCloud.ProtoBuf.ServerConfig.Master)
}

::google::protobuf::uint8* ServerConfig_Master::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RAMCloud.ProtoBuf.ServerConfig.Master)
  // required fixed64 log_bytes = 1;
  if (has_log_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->log_bytes(), target);
  }

  // required fixed64 hash_table_bytes = 2;
  if (has_hash_table_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->hash_table_bytes(), target);
  }

  // required bool disable_log_cleaner = 3;
  if (has_disable_log_cleaner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->disable_log_cleaner(), target);
  }

  // required bool disable_in_memory_cleaning = 4;
  if (has_disable_in_memory_cleaning()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->disable_in_memory_cleaning(), target);
  }

  // required double backup_disk_expansion_factor = 5;
  if (has_backup_disk_expansion_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->backup_disk_expansion_factor(), target);
  }

  // required fixed32 cleaner_write_cost_threshold = 6;
  if (has_cleaner_write_cost_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(6, this->cleaner_write_cost_threshold(), target);
  }

  // required string cleaner_balancer = 7;
  if (has_cleaner_balancer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cleaner_balancer().data(), this->cleaner_balancer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RAMCloud.ProtoBuf.ServerConfig.Master.cleaner_balancer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->cleaner_balancer(), target);
  }

  // required fixed32 cleaner_thread_count = 8;
  if (has_cleaner_thread_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(8, this->cleaner_thread_count(), target);
  }

  // required fixed32 num_replicas = 9;
  if (has_num_replicas()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(9, this->num_replicas(), target);
  }

  // required bool use_hugepages = 10;
  if (has_use_hugepages()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->use_hugepages(), target);
  }

  // required bool use_mincopysets = 11;
  if (has_use_mincopysets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->use_mincopysets(), target);
  }

  // required bool use_local_backup = 12;
  if (has_use_local_backup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->use_local_backup(), target);
  }

  // required bool use_plusonebackup = 13;
  if (has_use_plusonebackup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->use_plusonebackup(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RAMCloud.ProtoBuf.ServerConfig.Master)
  return target;
}

int ServerConfig_Master::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RAMCloud.ProtoBuf.ServerConfig.Master)
  int total_size = 0;

  if (has_log_bytes()) {
    // required fixed64 log_bytes = 1;
    total_size += 1 + 8;
  }

  if (has_hash_table_bytes()) {
    // required fixed64 hash_table_bytes = 2;
    total_size += 1 + 8;
  }

  if (has_disable_log_cleaner()) {
    // required bool disable_log_cleaner = 3;
    total_size += 1 + 1;
  }

  if (has_disable_in_memory_cleaning()) {
    // required bool disable_in_memory_cleaning = 4;
    total_size += 1 + 1;
  }

  if (has_backup_disk_expansion_factor()) {
    // required double backup_disk_expansion_factor = 5;
    total_size += 1 + 8;
  }

  if (has_cleaner_write_cost_threshold()) {
    // required fixed32 cleaner_write_cost_threshold = 6;
    total_size += 1 + 4;
  }

  if (has_cleaner_balancer()) {
    // required string cleaner_balancer = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cleaner_balancer());
  }

  if (has_cleaner_thread_count()) {
    // required fixed32 cleaner_thread_count = 8;
    total_size += 1 + 4;
  }

  if (has_num_replicas()) {
    // required fixed32 num_replicas = 9;
    total_size += 1 + 4;
  }

  if (has_use_hugepages()) {
    // required bool use_hugepages = 10;
    total_size += 1 + 1;
  }

  if (has_use_mincopysets()) {
    // required bool use_mincopysets = 11;
    total_size += 1 + 1;
  }

  if (has_use_local_backup()) {
    // required bool use_local_backup = 12;
    total_size += 1 + 1;
  }

  if (has_use_plusonebackup()) {
    // required bool use_plusonebackup = 13;
    total_size += 1 + 1;
  }

  return total_size;
}
int ServerConfig_Master::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:RAMCloud.ProtoBuf.ServerConfig.Master)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00001fff) ^ 0x00001fff) == 0) {  // All required fields are present.
    // required fixed64 log_bytes = 1;
    total_size += 1 + 8;

    // required fixed64 hash_table_bytes = 2;
    total_size += 1 + 8;

    // required bool disable_log_cleaner = 3;
    total_size += 1 + 1;

    // required bool disable_in_memory_cleaning = 4;
    total_size += 1 + 1;

    // required double backup_disk_expansion_factor = 5;
    total_size += 1 + 8;

    // required fixed32 cleaner_write_cost_threshold = 6;
    total_size += 1 + 4;

    // required string cleaner_balancer = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cleaner_balancer());

    // required fixed32 cleaner_thread_count = 8;
    total_size += 1 + 4;

    // required fixed32 num_replicas = 9;
    total_size += 1 + 4;

    // required bool use_hugepages = 10;
    total_size += 1 + 1;

    // required bool use_mincopysets = 11;
    total_size += 1 + 1;

    // required bool use_local_backup = 12;
    total_size += 1 + 1;

    // required bool use_plusonebackup = 13;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerConfig_Master::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RAMCloud.ProtoBuf.ServerConfig.Master)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ServerConfig_Master* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerConfig_Master>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RAMCloud.ProtoBuf.ServerConfig.Master)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RAMCloud.ProtoBuf.ServerConfig.Master)
    MergeFrom(*source);
  }
}

void ServerConfig_Master::MergeFrom(const ServerConfig_Master& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RAMCloud.ProtoBuf.ServerConfig.Master)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_log_bytes()) {
      set_log_bytes(from.log_bytes());
    }
    if (from.has_hash_table_bytes()) {
      set_hash_table_bytes(from.hash_table_bytes());
    }
    if (from.has_disable_log_cleaner()) {
      set_disable_log_cleaner(from.disable_log_cleaner());
    }
    if (from.has_disable_in_memory_cleaning()) {
      set_disable_in_memory_cleaning(from.disable_in_memory_cleaning());
    }
    if (from.has_backup_disk_expansion_factor()) {
      set_backup_disk_expansion_factor(from.backup_disk_expansion_factor());
    }
    if (from.has_cleaner_write_cost_threshold()) {
      set_cleaner_write_cost_threshold(from.cleaner_write_cost_threshold());
    }
    if (from.has_cleaner_balancer()) {
      set_has_cleaner_balancer();
      cleaner_balancer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cleaner_balancer_);
    }
    if (from.has_cleaner_thread_count()) {
      set_cleaner_thread_count(from.cleaner_thread_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_num_replicas()) {
      set_num_replicas(from.num_replicas());
    }
    if (from.has_use_hugepages()) {
      set_use_hugepages(from.use_hugepages());
    }
    if (from.has_use_mincopysets()) {
      set_use_mincopysets(from.use_mincopysets());
    }
    if (from.has_use_local_backup()) {
      set_use_local_backup(from.use_local_backup());
    }
    if (from.has_use_plusonebackup()) {
      set_use_plusonebackup(from.use_plusonebackup());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ServerConfig_Master::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RAMCloud.ProtoBuf.ServerConfig.Master)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerConfig_Master::CopyFrom(const ServerConfig_Master& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RAMCloud.ProtoBuf.ServerConfig.Master)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerConfig_Master::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;

  return true;
}

void ServerConfig_Master::Swap(ServerConfig_Master* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerConfig_Master::InternalSwap(ServerConfig_Master* other) {
  std::swap(log_bytes_, other->log_bytes_);
  std::swap(hash_table_bytes_, other->hash_table_bytes_);
  std::swap(disable_log_cleaner_, other->disable_log_cleaner_);
  std::swap(disable_in_memory_cleaning_, other->disable_in_memory_cleaning_);
  std::swap(backup_disk_expansion_factor_, other->backup_disk_expansion_factor_);
  std::swap(cleaner_write_cost_threshold_, other->cleaner_write_cost_threshold_);
  cleaner_balancer_.Swap(&other->cleaner_balancer_);
  std::swap(cleaner_thread_count_, other->cleaner_thread_count_);
  std::swap(num_replicas_, other->num_replicas_);
  std::swap(use_hugepages_, other->use_hugepages_);
  std::swap(use_mincopysets_, other->use_mincopysets_);
  std::swap(use_local_backup_, other->use_local_backup_);
  std::swap(use_plusonebackup_, other->use_plusonebackup_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerConfig_Master::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerConfig_Master_descriptor_;
  metadata.reflection = ServerConfig_Master_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerConfig_Backup::kGcFieldNumber;
const int ServerConfig_Backup::kInMemoryFieldNumber;
const int ServerConfig_Backup::kNumSegmentFramesFieldNumber;
const int ServerConfig_Backup::kMaxNonVolatileBuffersFieldNumber;
const int ServerConfig_Backup::kMaxRecoveryReplicasFieldNumber;
const int ServerConfig_Backup::kFileFieldNumber;
const int ServerConfig_Backup::kStrategyFieldNumber;
const int ServerConfig_Backup::kMockSpeedFieldNumber;
const int ServerConfig_Backup::kWriteRateLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerConfig_Backup::ServerConfig_Backup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RAMCloud.ProtoBuf.ServerConfig.Backup)
}

void ServerConfig_Backup::InitAsDefaultInstance() {
}

ServerConfig_Backup::ServerConfig_Backup(const ServerConfig_Backup& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RAMCloud.ProtoBuf.ServerConfig.Backup)
}

void ServerConfig_Backup::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gc_ = false;
  in_memory_ = false;
  num_segment_frames_ = 0u;
  max_non_volatile_buffers_ = 0u;
  max_recovery_replicas_ = 0u;
  file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strategy_ = 0;
  mock_speed_ = 0u;
  write_rate_limit_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerConfig_Backup::~ServerConfig_Backup() {
  // @@protoc_insertion_point(destructor:RAMCloud.ProtoBuf.ServerConfig.Backup)
  SharedDtor();
}

void ServerConfig_Backup::SharedDtor() {
  file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ServerConfig_Backup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerConfig_Backup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerConfig_Backup_descriptor_;
}

const ServerConfig_Backup& ServerConfig_Backup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerConfig_2eproto();
  return *default_instance_;
}

ServerConfig_Backup* ServerConfig_Backup::default_instance_ = NULL;

ServerConfig_Backup* ServerConfig_Backup::New(::google::protobuf::Arena* arena) const {
  ServerConfig_Backup* n = new ServerConfig_Backup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerConfig_Backup::Clear() {
// @@protoc_insertion_point(message_clear_start:RAMCloud.ProtoBuf.ServerConfig.Backup)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ServerConfig_Backup, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ServerConfig_Backup*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(gc_, max_recovery_replicas_);
    ZR_(strategy_, mock_speed_);
    if (has_file()) {
      file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  write_rate_limit_ = GOOGLE_ULONGLONG(0);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ServerConfig_Backup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RAMCloud.ProtoBuf.ServerConfig.Backup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool gc = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gc_)));
          set_has_gc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_in_memory;
        break;
      }

      // required bool in_memory = 2;
      case 2: {
        if (tag == 16) {
         parse_in_memory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_memory_)));
          set_has_in_memory();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_num_segment_frames;
        break;
      }

      // required fixed32 num_segment_frames = 3;
      case 3: {
        if (tag == 29) {
         parse_num_segment_frames:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &num_segment_frames_)));
          set_has_num_segment_frames();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_max_non_volatile_buffers;
        break;
      }

      // required fixed32 max_non_volatile_buffers = 4;
      case 4: {
        if (tag == 37) {
         parse_max_non_volatile_buffers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &max_non_volatile_buffers_)));
          set_has_max_non_volatile_buffers();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_file;
        break;
      }

      // optional string file = 5;
      case 5: {
        if (tag == 42) {
         parse_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file().data(), this->file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RAMCloud.ProtoBuf.ServerConfig.Backup.file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_strategy;
        break;
      }

      // required int32 strategy = 6;
      case 6: {
        if (tag == 48) {
         parse_strategy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strategy_)));
          set_has_strategy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_mock_speed;
        break;
      }

      // required fixed32 mock_speed = 7;
      case 7: {
        if (tag == 61) {
         parse_mock_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &mock_speed_)));
          set_has_mock_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_write_rate_limit;
        break;
      }

      // required fixed64 write_rate_limit = 8;
      case 8: {
        if (tag == 65) {
         parse_write_rate_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &write_rate_limit_)));
          set_has_write_rate_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(165)) goto parse_max_recovery_replicas;
        break;
      }

      // required fixed32 max_recovery_replicas = 20;
      case 20: {
        if (tag == 165) {
         parse_max_recovery_replicas:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &max_recovery_replicas_)));
          set_has_max_recovery_replicas();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RAMCloud.ProtoBuf.ServerConfig.Backup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RAMCloud.ProtoBuf.ServerConfig.Backup)
  return false;
#undef DO_
}

void ServerConfig_Backup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RAMCloud.ProtoBuf.ServerConfig.Backup)
  // required bool gc = 1;
  if (has_gc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->gc(), output);
  }

  // required bool in_memory = 2;
  if (has_in_memory()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->in_memory(), output);
  }

  // required fixed32 num_segment_frames = 3;
  if (has_num_segment_frames()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->num_segment_frames(), output);
  }

  // required fixed32 max_non_volatile_buffers = 4;
  if (has_max_non_volatile_buffers()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->max_non_volatile_buffers(), output);
  }

  // optional string file = 5;
  if (has_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RAMCloud.ProtoBuf.ServerConfig.Backup.file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->file(), output);
  }

  // required int32 strategy = 6;
  if (has_strategy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->strategy(), output);
  }

  // required fixed32 mock_speed = 7;
  if (has_mock_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(7, this->mock_speed(), output);
  }

  // required fixed64 write_rate_limit = 8;
  if (has_write_rate_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(8, this->write_rate_limit(), output);
  }

  // required fixed32 max_recovery_replicas = 20;
  if (has_max_recovery_replicas()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(20, this->max_recovery_replicas(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RAMCloud.ProtoBuf.ServerConfig.Backup)
}

::google::protobuf::uint8* ServerConfig_Backup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RAMCloud.ProtoBuf.ServerConfig.Backup)
  // required bool gc = 1;
  if (has_gc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->gc(), target);
  }

  // required bool in_memory = 2;
  if (has_in_memory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->in_memory(), target);
  }

  // required fixed32 num_segment_frames = 3;
  if (has_num_segment_frames()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->num_segment_frames(), target);
  }

  // required fixed32 max_non_volatile_buffers = 4;
  if (has_max_non_volatile_buffers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->max_non_volatile_buffers(), target);
  }

  // optional string file = 5;
  if (has_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RAMCloud.ProtoBuf.ServerConfig.Backup.file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->file(), target);
  }

  // required int32 strategy = 6;
  if (has_strategy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->strategy(), target);
  }

  // required fixed32 mock_speed = 7;
  if (has_mock_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(7, this->mock_speed(), target);
  }

  // required fixed64 write_rate_limit = 8;
  if (has_write_rate_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(8, this->write_rate_limit(), target);
  }

  // required fixed32 max_recovery_replicas = 20;
  if (has_max_recovery_replicas()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(20, this->max_recovery_replicas(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RAMCloud.ProtoBuf.ServerConfig.Backup)
  return target;
}

int ServerConfig_Backup::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RAMCloud.ProtoBuf.ServerConfig.Backup)
  int total_size = 0;

  if (has_gc()) {
    // required bool gc = 1;
    total_size += 1 + 1;
  }

  if (has_in_memory()) {
    // required bool in_memory = 2;
    total_size += 1 + 1;
  }

  if (has_num_segment_frames()) {
    // required fixed32 num_segment_frames = 3;
    total_size += 1 + 4;
  }

  if (has_max_non_volatile_buffers()) {
    // required fixed32 max_non_volatile_buffers = 4;
    total_size += 1 + 4;
  }

  if (has_max_recovery_replicas()) {
    // required fixed32 max_recovery_replicas = 20;
    total_size += 2 + 4;
  }

  if (has_strategy()) {
    // required int32 strategy = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->strategy());
  }

  if (has_mock_speed()) {
    // required fixed32 mock_speed = 7;
    total_size += 1 + 4;
  }

  if (has_write_rate_limit()) {
    // required fixed64 write_rate_limit = 8;
    total_size += 1 + 8;
  }

  return total_size;
}
int ServerConfig_Backup::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:RAMCloud.ProtoBuf.ServerConfig.Backup)
  int total_size = 0;

  if (((_has_bits_[0] & 0x000001df) ^ 0x000001df) == 0) {  // All required fields are present.
    // required bool gc = 1;
    total_size += 1 + 1;

    // required bool in_memory = 2;
    total_size += 1 + 1;

    // required fixed32 num_segment_frames = 3;
    total_size += 1 + 4;

    // required fixed32 max_non_volatile_buffers = 4;
    total_size += 1 + 4;

    // required fixed32 max_recovery_replicas = 20;
    total_size += 2 + 4;

    // required int32 strategy = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->strategy());

    // required fixed32 mock_speed = 7;
    total_size += 1 + 4;

    // required fixed64 write_rate_limit = 8;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string file = 5;
  if (has_file()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerConfig_Backup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RAMCloud.ProtoBuf.ServerConfig.Backup)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ServerConfig_Backup* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerConfig_Backup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RAMCloud.ProtoBuf.ServerConfig.Backup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RAMCloud.ProtoBuf.ServerConfig.Backup)
    MergeFrom(*source);
  }
}

void ServerConfig_Backup::MergeFrom(const ServerConfig_Backup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RAMCloud.ProtoBuf.ServerConfig.Backup)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gc()) {
      set_gc(from.gc());
    }
    if (from.has_in_memory()) {
      set_in_memory(from.in_memory());
    }
    if (from.has_num_segment_frames()) {
      set_num_segment_frames(from.num_segment_frames());
    }
    if (from.has_max_non_volatile_buffers()) {
      set_max_non_volatile_buffers(from.max_non_volatile_buffers());
    }
    if (from.has_max_recovery_replicas()) {
      set_max_recovery_replicas(from.max_recovery_replicas());
    }
    if (from.has_file()) {
      set_has_file();
      file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_);
    }
    if (from.has_strategy()) {
      set_strategy(from.strategy());
    }
    if (from.has_mock_speed()) {
      set_mock_speed(from.mock_speed());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_write_rate_limit()) {
      set_write_rate_limit(from.write_rate_limit());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ServerConfig_Backup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RAMCloud.ProtoBuf.ServerConfig.Backup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerConfig_Backup::CopyFrom(const ServerConfig_Backup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RAMCloud.ProtoBuf.ServerConfig.Backup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerConfig_Backup::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001df) != 0x000001df) return false;

  return true;
}

void ServerConfig_Backup::Swap(ServerConfig_Backup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerConfig_Backup::InternalSwap(ServerConfig_Backup* other) {
  std::swap(gc_, other->gc_);
  std::swap(in_memory_, other->in_memory_);
  std::swap(num_segment_frames_, other->num_segment_frames_);
  std::swap(max_non_volatile_buffers_, other->max_non_volatile_buffers_);
  std::swap(max_recovery_replicas_, other->max_recovery_replicas_);
  file_.Swap(&other->file_);
  std::swap(strategy_, other->strategy_);
  std::swap(mock_speed_, other->mock_speed_);
  std::swap(write_rate_limit_, other->write_rate_limit_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerConfig_Backup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerConfig_Backup_descriptor_;
  metadata.reflection = ServerConfig_Backup_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerConfig::kCoordinatorLocatorFieldNumber;
const int ServerConfig::kLocalLocatorFieldNumber;
const int ServerConfig::kClusterNameFieldNumber;
const int ServerConfig::kServicesFieldNumber;
const int ServerConfig::kDetectFailuresFieldNumber;
const int ServerConfig::kPinMemoryFieldNumber;
const int ServerConfig::kSegmentSizeFieldNumber;
const int ServerConfig::kSegletSizeFieldNumber;
const int ServerConfig::kMaxObjectDataSizeFieldNumber;
const int ServerConfig::kMaxObjectKeySizeFieldNumber;
const int ServerConfig::kMaxCoresFieldNumber;
const int ServerConfig::kMasterFieldNumber;
const int ServerConfig::kBackupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerConfig::ServerConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RAMCloud.ProtoBuf.ServerConfig)
}

void ServerConfig::InitAsDefaultInstance() {
  master_ = const_cast< ::RAMCloud::ProtoBuf::ServerConfig_Master*>(&::RAMCloud::ProtoBuf::ServerConfig_Master::default_instance());
  backup_ = const_cast< ::RAMCloud::ProtoBuf::ServerConfig_Backup*>(&::RAMCloud::ProtoBuf::ServerConfig_Backup::default_instance());
}

ServerConfig::ServerConfig(const ServerConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RAMCloud.ProtoBuf.ServerConfig)
}

void ServerConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  coordinator_locator_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_locator_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  services_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  detect_failures_ = false;
  pin_memory_ = false;
  segment_size_ = 0u;
  seglet_size_ = 0u;
  max_object_data_size_ = 0u;
  max_object_key_size_ = 0u;
  max_cores_ = 0u;
  master_ = NULL;
  backup_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerConfig::~ServerConfig() {
  // @@protoc_insertion_point(destructor:RAMCloud.ProtoBuf.ServerConfig)
  SharedDtor();
}

void ServerConfig::SharedDtor() {
  coordinator_locator_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_locator_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  services_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete master_;
    delete backup_;
  }
}

void ServerConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerConfig_descriptor_;
}

const ServerConfig& ServerConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerConfig_2eproto();
  return *default_instance_;
}

ServerConfig* ServerConfig::default_instance_ = NULL;

ServerConfig* ServerConfig::New(::google::protobuf::Arena* arena) const {
  ServerConfig* n = new ServerConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:RAMCloud.ProtoBuf.ServerConfig)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ServerConfig, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ServerConfig*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(detect_failures_, seglet_size_);
    if (has_coordinator_locator()) {
      coordinator_locator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_local_locator()) {
      local_locator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_cluster_name()) {
      cluster_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_services()) {
      services_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 7936u) {
    ZR_(max_object_data_size_, max_cores_);
    if (has_master()) {
      if (master_ != NULL) master_->::RAMCloud::ProtoBuf::ServerConfig_Master::Clear();
    }
    if (has_backup()) {
      if (backup_ != NULL) backup_->::RAMCloud::ProtoBuf::ServerConfig_Backup::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ServerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RAMCloud.ProtoBuf.ServerConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string coordinator_locator = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_coordinator_locator()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->coordinator_locator().data(), this->coordinator_locator().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RAMCloud.ProtoBuf.ServerConfig.coordinator_locator");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_local_locator;
        break;
      }

      // required string local_locator = 2;
      case 2: {
        if (tag == 18) {
         parse_local_locator:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_local_locator()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->local_locator().data(), this->local_locator().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RAMCloud.ProtoBuf.ServerConfig.local_locator");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cluster_name;
        break;
      }

      // required string cluster_name = 3;
      case 3: {
        if (tag == 26) {
         parse_cluster_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cluster_name().data(), this->cluster_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RAMCloud.ProtoBuf.ServerConfig.cluster_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_services;
        break;
      }

      // required string services = 4;
      case 4: {
        if (tag == 34) {
         parse_services:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_services()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->services().data(), this->services().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RAMCloud.ProtoBuf.ServerConfig.services");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_detect_failures;
        break;
      }

      // required bool detect_failures = 5;
      case 5: {
        if (tag == 40) {
         parse_detect_failures:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &detect_failures_)));
          set_has_detect_failures();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_pin_memory;
        break;
      }

      // required bool pin_memory = 6;
      case 6: {
        if (tag == 48) {
         parse_pin_memory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pin_memory_)));
          set_has_pin_memory();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_segment_size;
        break;
      }

      // required fixed32 segment_size = 7;
      case 7: {
        if (tag == 61) {
         parse_segment_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &segment_size_)));
          set_has_segment_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_seglet_size;
        break;
      }

      // required fixed32 seglet_size = 8;
      case 8: {
        if (tag == 69) {
         parse_seglet_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &seglet_size_)));
          set_has_seglet_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_max_object_data_size;
        break;
      }

      // required fixed32 max_object_data_size = 9;
      case 9: {
        if (tag == 77) {
         parse_max_object_data_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &max_object_data_size_)));
          set_has_max_object_data_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_max_object_key_size;
        break;
      }

      // required fixed32 max_object_key_size = 10;
      case 10: {
        if (tag == 85) {
         parse_max_object_key_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &max_object_key_size_)));
          set_has_max_object_key_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_max_cores;
        break;
      }

      // required fixed32 max_cores = 11;
      case 11: {
        if (tag == 93) {
         parse_max_cores:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &max_cores_)));
          set_has_max_cores();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_master;
        break;
      }

      // optional .RAMCloud.ProtoBuf.ServerConfig.Master master = 12;
      case 12: {
        if (tag == 98) {
         parse_master:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_master()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_backup;
        break;
      }

      // optional .RAMCloud.ProtoBuf.ServerConfig.Backup backup = 13;
      case 13: {
        if (tag == 106) {
         parse_backup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_backup()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RAMCloud.ProtoBuf.ServerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RAMCloud.ProtoBuf.ServerConfig)
  return false;
#undef DO_
}

void ServerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RAMCloud.ProtoBuf.ServerConfig)
  // required string coordinator_locator = 1;
  if (has_coordinator_locator()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->coordinator_locator().data(), this->coordinator_locator().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RAMCloud.ProtoBuf.ServerConfig.coordinator_locator");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->coordinator_locator(), output);
  }

  // required string local_locator = 2;
  if (has_local_locator()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->local_locator().data(), this->local_locator().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RAMCloud.ProtoBuf.ServerConfig.local_locator");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->local_locator(), output);
  }

  // required string cluster_name = 3;
  if (has_cluster_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cluster_name().data(), this->cluster_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RAMCloud.ProtoBuf.ServerConfig.cluster_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cluster_name(), output);
  }

  // required string services = 4;
  if (has_services()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->services().data(), this->services().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RAMCloud.ProtoBuf.ServerConfig.services");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->services(), output);
  }

  // required bool detect_failures = 5;
  if (has_detect_failures()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->detect_failures(), output);
  }

  // required bool pin_memory = 6;
  if (has_pin_memory()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->pin_memory(), output);
  }

  // required fixed32 segment_size = 7;
  if (has_segment_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(7, this->segment_size(), output);
  }

  // required fixed32 seglet_size = 8;
  if (has_seglet_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(8, this->seglet_size(), output);
  }

  // required fixed32 max_object_data_size = 9;
  if (has_max_object_data_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(9, this->max_object_data_size(), output);
  }

  // required fixed32 max_object_key_size = 10;
  if (has_max_object_key_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(10, this->max_object_key_size(), output);
  }

  // required fixed32 max_cores = 11;
  if (has_max_cores()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(11, this->max_cores(), output);
  }

  // optional .RAMCloud.ProtoBuf.ServerConfig.Master master = 12;
  if (has_master()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->master_, output);
  }

  // optional .RAMCloud.ProtoBuf.ServerConfig.Backup backup = 13;
  if (has_backup()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->backup_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RAMCloud.ProtoBuf.ServerConfig)
}

::google::protobuf::uint8* ServerConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RAMCloud.ProtoBuf.ServerConfig)
  // required string coordinator_locator = 1;
  if (has_coordinator_locator()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->coordinator_locator().data(), this->coordinator_locator().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RAMCloud.ProtoBuf.ServerConfig.coordinator_locator");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->coordinator_locator(), target);
  }

  // required string local_locator = 2;
  if (has_local_locator()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->local_locator().data(), this->local_locator().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RAMCloud.ProtoBuf.ServerConfig.local_locator");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->local_locator(), target);
  }

  // required string cluster_name = 3;
  if (has_cluster_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cluster_name().data(), this->cluster_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RAMCloud.ProtoBuf.ServerConfig.cluster_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cluster_name(), target);
  }

  // required string services = 4;
  if (has_services()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->services().data(), this->services().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RAMCloud.ProtoBuf.ServerConfig.services");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->services(), target);
  }

  // required bool detect_failures = 5;
  if (has_detect_failures()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->detect_failures(), target);
  }

  // required bool pin_memory = 6;
  if (has_pin_memory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->pin_memory(), target);
  }

  // required fixed32 segment_size = 7;
  if (has_segment_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(7, this->segment_size(), target);
  }

  // required fixed32 seglet_size = 8;
  if (has_seglet_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(8, this->seglet_size(), target);
  }

  // required fixed32 max_object_data_size = 9;
  if (has_max_object_data_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(9, this->max_object_data_size(), target);
  }

  // required fixed32 max_object_key_size = 10;
  if (has_max_object_key_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(10, this->max_object_key_size(), target);
  }

  // required fixed32 max_cores = 11;
  if (has_max_cores()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(11, this->max_cores(), target);
  }

  // optional .RAMCloud.ProtoBuf.ServerConfig.Master master = 12;
  if (has_master()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->master_, false, target);
  }

  // optional .RAMCloud.ProtoBuf.ServerConfig.Backup backup = 13;
  if (has_backup()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->backup_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RAMCloud.ProtoBuf.ServerConfig)
  return target;
}

int ServerConfig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RAMCloud.ProtoBuf.ServerConfig)
  int total_size = 0;

  if (has_coordinator_locator()) {
    // required string coordinator_locator = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->coordinator_locator());
  }

  if (has_local_locator()) {
    // required string local_locator = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->local_locator());
  }

  if (has_cluster_name()) {
    // required string cluster_name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_name());
  }

  if (has_services()) {
    // required string services = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->services());
  }

  if (has_detect_failures()) {
    // required bool detect_failures = 5;
    total_size += 1 + 1;
  }

  if (has_pin_memory()) {
    // required bool pin_memory = 6;
    total_size += 1 + 1;
  }

  if (has_segment_size()) {
    // required fixed32 segment_size = 7;
    total_size += 1 + 4;
  }

  if (has_seglet_size()) {
    // required fixed32 seglet_size = 8;
    total_size += 1 + 4;
  }

  if (has_max_object_data_size()) {
    // required fixed32 max_object_data_size = 9;
    total_size += 1 + 4;
  }

  if (has_max_object_key_size()) {
    // required fixed32 max_object_key_size = 10;
    total_size += 1 + 4;
  }

  if (has_max_cores()) {
    // required fixed32 max_cores = 11;
    total_size += 1 + 4;
  }

  return total_size;
}
int ServerConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:RAMCloud.ProtoBuf.ServerConfig)
  int total_size = 0;

  if (((_has_bits_[0] & 0x000007ff) ^ 0x000007ff) == 0) {  // All required fields are present.
    // required string coordinator_locator = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->coordinator_locator());

    // required string local_locator = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->local_locator());

    // required string cluster_name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_name());

    // required string services = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->services());

    // required bool detect_failures = 5;
    total_size += 1 + 1;

    // required bool pin_memory = 6;
    total_size += 1 + 1;

    // required fixed32 segment_size = 7;
    total_size += 1 + 4;

    // required fixed32 seglet_size = 8;
    total_size += 1 + 4;

    // required fixed32 max_object_data_size = 9;
    total_size += 1 + 4;

    // required fixed32 max_object_key_size = 10;
    total_size += 1 + 4;

    // required fixed32 max_cores = 11;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[11 / 32] & 6144u) {
    // optional .RAMCloud.ProtoBuf.ServerConfig.Master master = 12;
    if (has_master()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->master_);
    }

    // optional .RAMCloud.ProtoBuf.ServerConfig.Backup backup = 13;
    if (has_backup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->backup_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RAMCloud.ProtoBuf.ServerConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ServerConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RAMCloud.ProtoBuf.ServerConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RAMCloud.ProtoBuf.ServerConfig)
    MergeFrom(*source);
  }
}

void ServerConfig::MergeFrom(const ServerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RAMCloud.ProtoBuf.ServerConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_coordinator_locator()) {
      set_has_coordinator_locator();
      coordinator_locator_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.coordinator_locator_);
    }
    if (from.has_local_locator()) {
      set_has_local_locator();
      local_locator_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.local_locator_);
    }
    if (from.has_cluster_name()) {
      set_has_cluster_name();
      cluster_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_name_);
    }
    if (from.has_services()) {
      set_has_services();
      services_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.services_);
    }
    if (from.has_detect_failures()) {
      set_detect_failures(from.detect_failures());
    }
    if (from.has_pin_memory()) {
      set_pin_memory(from.pin_memory());
    }
    if (from.has_segment_size()) {
      set_segment_size(from.segment_size());
    }
    if (from.has_seglet_size()) {
      set_seglet_size(from.seglet_size());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_max_object_data_size()) {
      set_max_object_data_size(from.max_object_data_size());
    }
    if (from.has_max_object_key_size()) {
      set_max_object_key_size(from.max_object_key_size());
    }
    if (from.has_max_cores()) {
      set_max_cores(from.max_cores());
    }
    if (from.has_master()) {
      mutable_master()->::RAMCloud::ProtoBuf::ServerConfig_Master::MergeFrom(from.master());
    }
    if (from.has_backup()) {
      mutable_backup()->::RAMCloud::ProtoBuf::ServerConfig_Backup::MergeFrom(from.backup());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ServerConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RAMCloud.ProtoBuf.ServerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerConfig::CopyFrom(const ServerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RAMCloud.ProtoBuf.ServerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;

  if (has_master()) {
    if (!this->master_->IsInitialized()) return false;
  }
  if (has_backup()) {
    if (!this->backup_->IsInitialized()) return false;
  }
  return true;
}

void ServerConfig::Swap(ServerConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerConfig::InternalSwap(ServerConfig* other) {
  coordinator_locator_.Swap(&other->coordinator_locator_);
  local_locator_.Swap(&other->local_locator_);
  cluster_name_.Swap(&other->cluster_name_);
  services_.Swap(&other->services_);
  std::swap(detect_failures_, other->detect_failures_);
  std::swap(pin_memory_, other->pin_memory_);
  std::swap(segment_size_, other->segment_size_);
  std::swap(seglet_size_, other->seglet_size_);
  std::swap(max_object_data_size_, other->max_object_data_size_);
  std::swap(max_object_key_size_, other->max_object_key_size_);
  std::swap(max_cores_, other->max_cores_);
  std::swap(master_, other->master_);
  std::swap(backup_, other->backup_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerConfig_descriptor_;
  metadata.reflection = ServerConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerConfig_Master

// required fixed64 log_bytes = 1;
bool ServerConfig_Master::has_log_bytes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ServerConfig_Master::set_has_log_bytes() {
  _has_bits_[0] |= 0x00000001u;
}
void ServerConfig_Master::clear_has_log_bytes() {
  _has_bits_[0] &= ~0x00000001u;
}
void ServerConfig_Master::clear_log_bytes() {
  log_bytes_ = GOOGLE_ULONGLONG(0);
  clear_has_log_bytes();
}
 ::google::protobuf::uint64 ServerConfig_Master::log_bytes() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.Master.log_bytes)
  return log_bytes_;
}
 void ServerConfig_Master::set_log_bytes(::google::protobuf::uint64 value) {
  set_has_log_bytes();
  log_bytes_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.Master.log_bytes)
}

// required fixed64 hash_table_bytes = 2;
bool ServerConfig_Master::has_hash_table_bytes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ServerConfig_Master::set_has_hash_table_bytes() {
  _has_bits_[0] |= 0x00000002u;
}
void ServerConfig_Master::clear_has_hash_table_bytes() {
  _has_bits_[0] &= ~0x00000002u;
}
void ServerConfig_Master::clear_hash_table_bytes() {
  hash_table_bytes_ = GOOGLE_ULONGLONG(0);
  clear_has_hash_table_bytes();
}
 ::google::protobuf::uint64 ServerConfig_Master::hash_table_bytes() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.Master.hash_table_bytes)
  return hash_table_bytes_;
}
 void ServerConfig_Master::set_hash_table_bytes(::google::protobuf::uint64 value) {
  set_has_hash_table_bytes();
  hash_table_bytes_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.Master.hash_table_bytes)
}

// required bool disable_log_cleaner = 3;
bool ServerConfig_Master::has_disable_log_cleaner() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ServerConfig_Master::set_has_disable_log_cleaner() {
  _has_bits_[0] |= 0x00000004u;
}
void ServerConfig_Master::clear_has_disable_log_cleaner() {
  _has_bits_[0] &= ~0x00000004u;
}
void ServerConfig_Master::clear_disable_log_cleaner() {
  disable_log_cleaner_ = false;
  clear_has_disable_log_cleaner();
}
 bool ServerConfig_Master::disable_log_cleaner() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.Master.disable_log_cleaner)
  return disable_log_cleaner_;
}
 void ServerConfig_Master::set_disable_log_cleaner(bool value) {
  set_has_disable_log_cleaner();
  disable_log_cleaner_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.Master.disable_log_cleaner)
}

// required bool disable_in_memory_cleaning = 4;
bool ServerConfig_Master::has_disable_in_memory_cleaning() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ServerConfig_Master::set_has_disable_in_memory_cleaning() {
  _has_bits_[0] |= 0x00000008u;
}
void ServerConfig_Master::clear_has_disable_in_memory_cleaning() {
  _has_bits_[0] &= ~0x00000008u;
}
void ServerConfig_Master::clear_disable_in_memory_cleaning() {
  disable_in_memory_cleaning_ = false;
  clear_has_disable_in_memory_cleaning();
}
 bool ServerConfig_Master::disable_in_memory_cleaning() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.Master.disable_in_memory_cleaning)
  return disable_in_memory_cleaning_;
}
 void ServerConfig_Master::set_disable_in_memory_cleaning(bool value) {
  set_has_disable_in_memory_cleaning();
  disable_in_memory_cleaning_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.Master.disable_in_memory_cleaning)
}

// required double backup_disk_expansion_factor = 5;
bool ServerConfig_Master::has_backup_disk_expansion_factor() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ServerConfig_Master::set_has_backup_disk_expansion_factor() {
  _has_bits_[0] |= 0x00000010u;
}
void ServerConfig_Master::clear_has_backup_disk_expansion_factor() {
  _has_bits_[0] &= ~0x00000010u;
}
void ServerConfig_Master::clear_backup_disk_expansion_factor() {
  backup_disk_expansion_factor_ = 0;
  clear_has_backup_disk_expansion_factor();
}
 double ServerConfig_Master::backup_disk_expansion_factor() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.Master.backup_disk_expansion_factor)
  return backup_disk_expansion_factor_;
}
 void ServerConfig_Master::set_backup_disk_expansion_factor(double value) {
  set_has_backup_disk_expansion_factor();
  backup_disk_expansion_factor_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.Master.backup_disk_expansion_factor)
}

// required fixed32 cleaner_write_cost_threshold = 6;
bool ServerConfig_Master::has_cleaner_write_cost_threshold() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ServerConfig_Master::set_has_cleaner_write_cost_threshold() {
  _has_bits_[0] |= 0x00000020u;
}
void ServerConfig_Master::clear_has_cleaner_write_cost_threshold() {
  _has_bits_[0] &= ~0x00000020u;
}
void ServerConfig_Master::clear_cleaner_write_cost_threshold() {
  cleaner_write_cost_threshold_ = 0u;
  clear_has_cleaner_write_cost_threshold();
}
 ::google::protobuf::uint32 ServerConfig_Master::cleaner_write_cost_threshold() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.Master.cleaner_write_cost_threshold)
  return cleaner_write_cost_threshold_;
}
 void ServerConfig_Master::set_cleaner_write_cost_threshold(::google::protobuf::uint32 value) {
  set_has_cleaner_write_cost_threshold();
  cleaner_write_cost_threshold_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.Master.cleaner_write_cost_threshold)
}

// required string cleaner_balancer = 7;
bool ServerConfig_Master::has_cleaner_balancer() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ServerConfig_Master::set_has_cleaner_balancer() {
  _has_bits_[0] |= 0x00000040u;
}
void ServerConfig_Master::clear_has_cleaner_balancer() {
  _has_bits_[0] &= ~0x00000040u;
}
void ServerConfig_Master::clear_cleaner_balancer() {
  cleaner_balancer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cleaner_balancer();
}
 const ::std::string& ServerConfig_Master::cleaner_balancer() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.Master.cleaner_balancer)
  return cleaner_balancer_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServerConfig_Master::set_cleaner_balancer(const ::std::string& value) {
  set_has_cleaner_balancer();
  cleaner_balancer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.Master.cleaner_balancer)
}
 void ServerConfig_Master::set_cleaner_balancer(const char* value) {
  set_has_cleaner_balancer();
  cleaner_balancer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RAMCloud.ProtoBuf.ServerConfig.Master.cleaner_balancer)
}
 void ServerConfig_Master::set_cleaner_balancer(const char* value, size_t size) {
  set_has_cleaner_balancer();
  cleaner_balancer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RAMCloud.ProtoBuf.ServerConfig.Master.cleaner_balancer)
}
 ::std::string* ServerConfig_Master::mutable_cleaner_balancer() {
  set_has_cleaner_balancer();
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.ServerConfig.Master.cleaner_balancer)
  return cleaner_balancer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ServerConfig_Master::release_cleaner_balancer() {
  // @@protoc_insertion_point(field_release:RAMCloud.ProtoBuf.ServerConfig.Master.cleaner_balancer)
  clear_has_cleaner_balancer();
  return cleaner_balancer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServerConfig_Master::set_allocated_cleaner_balancer(::std::string* cleaner_balancer) {
  if (cleaner_balancer != NULL) {
    set_has_cleaner_balancer();
  } else {
    clear_has_cleaner_balancer();
  }
  cleaner_balancer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cleaner_balancer);
  // @@protoc_insertion_point(field_set_allocated:RAMCloud.ProtoBuf.ServerConfig.Master.cleaner_balancer)
}

// required fixed32 cleaner_thread_count = 8;
bool ServerConfig_Master::has_cleaner_thread_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ServerConfig_Master::set_has_cleaner_thread_count() {
  _has_bits_[0] |= 0x00000080u;
}
void ServerConfig_Master::clear_has_cleaner_thread_count() {
  _has_bits_[0] &= ~0x00000080u;
}
void ServerConfig_Master::clear_cleaner_thread_count() {
  cleaner_thread_count_ = 0u;
  clear_has_cleaner_thread_count();
}
 ::google::protobuf::uint32 ServerConfig_Master::cleaner_thread_count() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.Master.cleaner_thread_count)
  return cleaner_thread_count_;
}
 void ServerConfig_Master::set_cleaner_thread_count(::google::protobuf::uint32 value) {
  set_has_cleaner_thread_count();
  cleaner_thread_count_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.Master.cleaner_thread_count)
}

// required fixed32 num_replicas = 9;
bool ServerConfig_Master::has_num_replicas() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ServerConfig_Master::set_has_num_replicas() {
  _has_bits_[0] |= 0x00000100u;
}
void ServerConfig_Master::clear_has_num_replicas() {
  _has_bits_[0] &= ~0x00000100u;
}
void ServerConfig_Master::clear_num_replicas() {
  num_replicas_ = 0u;
  clear_has_num_replicas();
}
 ::google::protobuf::uint32 ServerConfig_Master::num_replicas() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.Master.num_replicas)
  return num_replicas_;
}
 void ServerConfig_Master::set_num_replicas(::google::protobuf::uint32 value) {
  set_has_num_replicas();
  num_replicas_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.Master.num_replicas)
}

// required bool use_hugepages = 10;
bool ServerConfig_Master::has_use_hugepages() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ServerConfig_Master::set_has_use_hugepages() {
  _has_bits_[0] |= 0x00000200u;
}
void ServerConfig_Master::clear_has_use_hugepages() {
  _has_bits_[0] &= ~0x00000200u;
}
void ServerConfig_Master::clear_use_hugepages() {
  use_hugepages_ = false;
  clear_has_use_hugepages();
}
 bool ServerConfig_Master::use_hugepages() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.Master.use_hugepages)
  return use_hugepages_;
}
 void ServerConfig_Master::set_use_hugepages(bool value) {
  set_has_use_hugepages();
  use_hugepages_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.Master.use_hugepages)
}

// required bool use_mincopysets = 11;
bool ServerConfig_Master::has_use_mincopysets() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ServerConfig_Master::set_has_use_mincopysets() {
  _has_bits_[0] |= 0x00000400u;
}
void ServerConfig_Master::clear_has_use_mincopysets() {
  _has_bits_[0] &= ~0x00000400u;
}
void ServerConfig_Master::clear_use_mincopysets() {
  use_mincopysets_ = false;
  clear_has_use_mincopysets();
}
 bool ServerConfig_Master::use_mincopysets() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.Master.use_mincopysets)
  return use_mincopysets_;
}
 void ServerConfig_Master::set_use_mincopysets(bool value) {
  set_has_use_mincopysets();
  use_mincopysets_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.Master.use_mincopysets)
}

// required bool use_local_backup = 12;
bool ServerConfig_Master::has_use_local_backup() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ServerConfig_Master::set_has_use_local_backup() {
  _has_bits_[0] |= 0x00000800u;
}
void ServerConfig_Master::clear_has_use_local_backup() {
  _has_bits_[0] &= ~0x00000800u;
}
void ServerConfig_Master::clear_use_local_backup() {
  use_local_backup_ = false;
  clear_has_use_local_backup();
}
 bool ServerConfig_Master::use_local_backup() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.Master.use_local_backup)
  return use_local_backup_;
}
 void ServerConfig_Master::set_use_local_backup(bool value) {
  set_has_use_local_backup();
  use_local_backup_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.Master.use_local_backup)
}

// required bool use_plusonebackup = 13;
bool ServerConfig_Master::has_use_plusonebackup() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ServerConfig_Master::set_has_use_plusonebackup() {
  _has_bits_[0] |= 0x00001000u;
}
void ServerConfig_Master::clear_has_use_plusonebackup() {
  _has_bits_[0] &= ~0x00001000u;
}
void ServerConfig_Master::clear_use_plusonebackup() {
  use_plusonebackup_ = false;
  clear_has_use_plusonebackup();
}
 bool ServerConfig_Master::use_plusonebackup() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.Master.use_plusonebackup)
  return use_plusonebackup_;
}
 void ServerConfig_Master::set_use_plusonebackup(bool value) {
  set_has_use_plusonebackup();
  use_plusonebackup_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.Master.use_plusonebackup)
}

// -------------------------------------------------------------------

// ServerConfig_Backup

// required bool gc = 1;
bool ServerConfig_Backup::has_gc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ServerConfig_Backup::set_has_gc() {
  _has_bits_[0] |= 0x00000001u;
}
void ServerConfig_Backup::clear_has_gc() {
  _has_bits_[0] &= ~0x00000001u;
}
void ServerConfig_Backup::clear_gc() {
  gc_ = false;
  clear_has_gc();
}
 bool ServerConfig_Backup::gc() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.Backup.gc)
  return gc_;
}
 void ServerConfig_Backup::set_gc(bool value) {
  set_has_gc();
  gc_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.Backup.gc)
}

// required bool in_memory = 2;
bool ServerConfig_Backup::has_in_memory() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ServerConfig_Backup::set_has_in_memory() {
  _has_bits_[0] |= 0x00000002u;
}
void ServerConfig_Backup::clear_has_in_memory() {
  _has_bits_[0] &= ~0x00000002u;
}
void ServerConfig_Backup::clear_in_memory() {
  in_memory_ = false;
  clear_has_in_memory();
}
 bool ServerConfig_Backup::in_memory() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.Backup.in_memory)
  return in_memory_;
}
 void ServerConfig_Backup::set_in_memory(bool value) {
  set_has_in_memory();
  in_memory_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.Backup.in_memory)
}

// required fixed32 num_segment_frames = 3;
bool ServerConfig_Backup::has_num_segment_frames() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ServerConfig_Backup::set_has_num_segment_frames() {
  _has_bits_[0] |= 0x00000004u;
}
void ServerConfig_Backup::clear_has_num_segment_frames() {
  _has_bits_[0] &= ~0x00000004u;
}
void ServerConfig_Backup::clear_num_segment_frames() {
  num_segment_frames_ = 0u;
  clear_has_num_segment_frames();
}
 ::google::protobuf::uint32 ServerConfig_Backup::num_segment_frames() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.Backup.num_segment_frames)
  return num_segment_frames_;
}
 void ServerConfig_Backup::set_num_segment_frames(::google::protobuf::uint32 value) {
  set_has_num_segment_frames();
  num_segment_frames_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.Backup.num_segment_frames)
}

// required fixed32 max_non_volatile_buffers = 4;
bool ServerConfig_Backup::has_max_non_volatile_buffers() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ServerConfig_Backup::set_has_max_non_volatile_buffers() {
  _has_bits_[0] |= 0x00000008u;
}
void ServerConfig_Backup::clear_has_max_non_volatile_buffers() {
  _has_bits_[0] &= ~0x00000008u;
}
void ServerConfig_Backup::clear_max_non_volatile_buffers() {
  max_non_volatile_buffers_ = 0u;
  clear_has_max_non_volatile_buffers();
}
 ::google::protobuf::uint32 ServerConfig_Backup::max_non_volatile_buffers() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.Backup.max_non_volatile_buffers)
  return max_non_volatile_buffers_;
}
 void ServerConfig_Backup::set_max_non_volatile_buffers(::google::protobuf::uint32 value) {
  set_has_max_non_volatile_buffers();
  max_non_volatile_buffers_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.Backup.max_non_volatile_buffers)
}

// required fixed32 max_recovery_replicas = 20;
bool ServerConfig_Backup::has_max_recovery_replicas() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ServerConfig_Backup::set_has_max_recovery_replicas() {
  _has_bits_[0] |= 0x00000010u;
}
void ServerConfig_Backup::clear_has_max_recovery_replicas() {
  _has_bits_[0] &= ~0x00000010u;
}
void ServerConfig_Backup::clear_max_recovery_replicas() {
  max_recovery_replicas_ = 0u;
  clear_has_max_recovery_replicas();
}
 ::google::protobuf::uint32 ServerConfig_Backup::max_recovery_replicas() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.Backup.max_recovery_replicas)
  return max_recovery_replicas_;
}
 void ServerConfig_Backup::set_max_recovery_replicas(::google::protobuf::uint32 value) {
  set_has_max_recovery_replicas();
  max_recovery_replicas_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.Backup.max_recovery_replicas)
}

// optional string file = 5;
bool ServerConfig_Backup::has_file() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ServerConfig_Backup::set_has_file() {
  _has_bits_[0] |= 0x00000020u;
}
void ServerConfig_Backup::clear_has_file() {
  _has_bits_[0] &= ~0x00000020u;
}
void ServerConfig_Backup::clear_file() {
  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file();
}
 const ::std::string& ServerConfig_Backup::file() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.Backup.file)
  return file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServerConfig_Backup::set_file(const ::std::string& value) {
  set_has_file();
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.Backup.file)
}
 void ServerConfig_Backup::set_file(const char* value) {
  set_has_file();
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RAMCloud.ProtoBuf.ServerConfig.Backup.file)
}
 void ServerConfig_Backup::set_file(const char* value, size_t size) {
  set_has_file();
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RAMCloud.ProtoBuf.ServerConfig.Backup.file)
}
 ::std::string* ServerConfig_Backup::mutable_file() {
  set_has_file();
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.ServerConfig.Backup.file)
  return file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ServerConfig_Backup::release_file() {
  // @@protoc_insertion_point(field_release:RAMCloud.ProtoBuf.ServerConfig.Backup.file)
  clear_has_file();
  return file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServerConfig_Backup::set_allocated_file(::std::string* file) {
  if (file != NULL) {
    set_has_file();
  } else {
    clear_has_file();
  }
  file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file);
  // @@protoc_insertion_point(field_set_allocated:RAMCloud.ProtoBuf.ServerConfig.Backup.file)
}

// required int32 strategy = 6;
bool ServerConfig_Backup::has_strategy() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ServerConfig_Backup::set_has_strategy() {
  _has_bits_[0] |= 0x00000040u;
}
void ServerConfig_Backup::clear_has_strategy() {
  _has_bits_[0] &= ~0x00000040u;
}
void ServerConfig_Backup::clear_strategy() {
  strategy_ = 0;
  clear_has_strategy();
}
 ::google::protobuf::int32 ServerConfig_Backup::strategy() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.Backup.strategy)
  return strategy_;
}
 void ServerConfig_Backup::set_strategy(::google::protobuf::int32 value) {
  set_has_strategy();
  strategy_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.Backup.strategy)
}

// required fixed32 mock_speed = 7;
bool ServerConfig_Backup::has_mock_speed() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ServerConfig_Backup::set_has_mock_speed() {
  _has_bits_[0] |= 0x00000080u;
}
void ServerConfig_Backup::clear_has_mock_speed() {
  _has_bits_[0] &= ~0x00000080u;
}
void ServerConfig_Backup::clear_mock_speed() {
  mock_speed_ = 0u;
  clear_has_mock_speed();
}
 ::google::protobuf::uint32 ServerConfig_Backup::mock_speed() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.Backup.mock_speed)
  return mock_speed_;
}
 void ServerConfig_Backup::set_mock_speed(::google::protobuf::uint32 value) {
  set_has_mock_speed();
  mock_speed_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.Backup.mock_speed)
}

// required fixed64 write_rate_limit = 8;
bool ServerConfig_Backup::has_write_rate_limit() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ServerConfig_Backup::set_has_write_rate_limit() {
  _has_bits_[0] |= 0x00000100u;
}
void ServerConfig_Backup::clear_has_write_rate_limit() {
  _has_bits_[0] &= ~0x00000100u;
}
void ServerConfig_Backup::clear_write_rate_limit() {
  write_rate_limit_ = GOOGLE_ULONGLONG(0);
  clear_has_write_rate_limit();
}
 ::google::protobuf::uint64 ServerConfig_Backup::write_rate_limit() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.Backup.write_rate_limit)
  return write_rate_limit_;
}
 void ServerConfig_Backup::set_write_rate_limit(::google::protobuf::uint64 value) {
  set_has_write_rate_limit();
  write_rate_limit_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.Backup.write_rate_limit)
}

// -------------------------------------------------------------------

// ServerConfig

// required string coordinator_locator = 1;
bool ServerConfig::has_coordinator_locator() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ServerConfig::set_has_coordinator_locator() {
  _has_bits_[0] |= 0x00000001u;
}
void ServerConfig::clear_has_coordinator_locator() {
  _has_bits_[0] &= ~0x00000001u;
}
void ServerConfig::clear_coordinator_locator() {
  coordinator_locator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_coordinator_locator();
}
 const ::std::string& ServerConfig::coordinator_locator() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.coordinator_locator)
  return coordinator_locator_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServerConfig::set_coordinator_locator(const ::std::string& value) {
  set_has_coordinator_locator();
  coordinator_locator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.coordinator_locator)
}
 void ServerConfig::set_coordinator_locator(const char* value) {
  set_has_coordinator_locator();
  coordinator_locator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RAMCloud.ProtoBuf.ServerConfig.coordinator_locator)
}
 void ServerConfig::set_coordinator_locator(const char* value, size_t size) {
  set_has_coordinator_locator();
  coordinator_locator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RAMCloud.ProtoBuf.ServerConfig.coordinator_locator)
}
 ::std::string* ServerConfig::mutable_coordinator_locator() {
  set_has_coordinator_locator();
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.ServerConfig.coordinator_locator)
  return coordinator_locator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ServerConfig::release_coordinator_locator() {
  // @@protoc_insertion_point(field_release:RAMCloud.ProtoBuf.ServerConfig.coordinator_locator)
  clear_has_coordinator_locator();
  return coordinator_locator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServerConfig::set_allocated_coordinator_locator(::std::string* coordinator_locator) {
  if (coordinator_locator != NULL) {
    set_has_coordinator_locator();
  } else {
    clear_has_coordinator_locator();
  }
  coordinator_locator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), coordinator_locator);
  // @@protoc_insertion_point(field_set_allocated:RAMCloud.ProtoBuf.ServerConfig.coordinator_locator)
}

// required string local_locator = 2;
bool ServerConfig::has_local_locator() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ServerConfig::set_has_local_locator() {
  _has_bits_[0] |= 0x00000002u;
}
void ServerConfig::clear_has_local_locator() {
  _has_bits_[0] &= ~0x00000002u;
}
void ServerConfig::clear_local_locator() {
  local_locator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_local_locator();
}
 const ::std::string& ServerConfig::local_locator() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.local_locator)
  return local_locator_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServerConfig::set_local_locator(const ::std::string& value) {
  set_has_local_locator();
  local_locator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.local_locator)
}
 void ServerConfig::set_local_locator(const char* value) {
  set_has_local_locator();
  local_locator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RAMCloud.ProtoBuf.ServerConfig.local_locator)
}
 void ServerConfig::set_local_locator(const char* value, size_t size) {
  set_has_local_locator();
  local_locator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RAMCloud.ProtoBuf.ServerConfig.local_locator)
}
 ::std::string* ServerConfig::mutable_local_locator() {
  set_has_local_locator();
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.ServerConfig.local_locator)
  return local_locator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ServerConfig::release_local_locator() {
  // @@protoc_insertion_point(field_release:RAMCloud.ProtoBuf.ServerConfig.local_locator)
  clear_has_local_locator();
  return local_locator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServerConfig::set_allocated_local_locator(::std::string* local_locator) {
  if (local_locator != NULL) {
    set_has_local_locator();
  } else {
    clear_has_local_locator();
  }
  local_locator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), local_locator);
  // @@protoc_insertion_point(field_set_allocated:RAMCloud.ProtoBuf.ServerConfig.local_locator)
}

// required string cluster_name = 3;
bool ServerConfig::has_cluster_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ServerConfig::set_has_cluster_name() {
  _has_bits_[0] |= 0x00000004u;
}
void ServerConfig::clear_has_cluster_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void ServerConfig::clear_cluster_name() {
  cluster_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cluster_name();
}
 const ::std::string& ServerConfig::cluster_name() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.cluster_name)
  return cluster_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServerConfig::set_cluster_name(const ::std::string& value) {
  set_has_cluster_name();
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.cluster_name)
}
 void ServerConfig::set_cluster_name(const char* value) {
  set_has_cluster_name();
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RAMCloud.ProtoBuf.ServerConfig.cluster_name)
}
 void ServerConfig::set_cluster_name(const char* value, size_t size) {
  set_has_cluster_name();
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RAMCloud.ProtoBuf.ServerConfig.cluster_name)
}
 ::std::string* ServerConfig::mutable_cluster_name() {
  set_has_cluster_name();
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.ServerConfig.cluster_name)
  return cluster_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ServerConfig::release_cluster_name() {
  // @@protoc_insertion_point(field_release:RAMCloud.ProtoBuf.ServerConfig.cluster_name)
  clear_has_cluster_name();
  return cluster_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServerConfig::set_allocated_cluster_name(::std::string* cluster_name) {
  if (cluster_name != NULL) {
    set_has_cluster_name();
  } else {
    clear_has_cluster_name();
  }
  cluster_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_name);
  // @@protoc_insertion_point(field_set_allocated:RAMCloud.ProtoBuf.ServerConfig.cluster_name)
}

// required string services = 4;
bool ServerConfig::has_services() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ServerConfig::set_has_services() {
  _has_bits_[0] |= 0x00000008u;
}
void ServerConfig::clear_has_services() {
  _has_bits_[0] &= ~0x00000008u;
}
void ServerConfig::clear_services() {
  services_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_services();
}
 const ::std::string& ServerConfig::services() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.services)
  return services_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServerConfig::set_services(const ::std::string& value) {
  set_has_services();
  services_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.services)
}
 void ServerConfig::set_services(const char* value) {
  set_has_services();
  services_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RAMCloud.ProtoBuf.ServerConfig.services)
}
 void ServerConfig::set_services(const char* value, size_t size) {
  set_has_services();
  services_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RAMCloud.ProtoBuf.ServerConfig.services)
}
 ::std::string* ServerConfig::mutable_services() {
  set_has_services();
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.ServerConfig.services)
  return services_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ServerConfig::release_services() {
  // @@protoc_insertion_point(field_release:RAMCloud.ProtoBuf.ServerConfig.services)
  clear_has_services();
  return services_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServerConfig::set_allocated_services(::std::string* services) {
  if (services != NULL) {
    set_has_services();
  } else {
    clear_has_services();
  }
  services_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), services);
  // @@protoc_insertion_point(field_set_allocated:RAMCloud.ProtoBuf.ServerConfig.services)
}

// required bool detect_failures = 5;
bool ServerConfig::has_detect_failures() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ServerConfig::set_has_detect_failures() {
  _has_bits_[0] |= 0x00000010u;
}
void ServerConfig::clear_has_detect_failures() {
  _has_bits_[0] &= ~0x00000010u;
}
void ServerConfig::clear_detect_failures() {
  detect_failures_ = false;
  clear_has_detect_failures();
}
 bool ServerConfig::detect_failures() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.detect_failures)
  return detect_failures_;
}
 void ServerConfig::set_detect_failures(bool value) {
  set_has_detect_failures();
  detect_failures_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.detect_failures)
}

// required bool pin_memory = 6;
bool ServerConfig::has_pin_memory() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ServerConfig::set_has_pin_memory() {
  _has_bits_[0] |= 0x00000020u;
}
void ServerConfig::clear_has_pin_memory() {
  _has_bits_[0] &= ~0x00000020u;
}
void ServerConfig::clear_pin_memory() {
  pin_memory_ = false;
  clear_has_pin_memory();
}
 bool ServerConfig::pin_memory() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.pin_memory)
  return pin_memory_;
}
 void ServerConfig::set_pin_memory(bool value) {
  set_has_pin_memory();
  pin_memory_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.pin_memory)
}

// required fixed32 segment_size = 7;
bool ServerConfig::has_segment_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ServerConfig::set_has_segment_size() {
  _has_bits_[0] |= 0x00000040u;
}
void ServerConfig::clear_has_segment_size() {
  _has_bits_[0] &= ~0x00000040u;
}
void ServerConfig::clear_segment_size() {
  segment_size_ = 0u;
  clear_has_segment_size();
}
 ::google::protobuf::uint32 ServerConfig::segment_size() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.segment_size)
  return segment_size_;
}
 void ServerConfig::set_segment_size(::google::protobuf::uint32 value) {
  set_has_segment_size();
  segment_size_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.segment_size)
}

// required fixed32 seglet_size = 8;
bool ServerConfig::has_seglet_size() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ServerConfig::set_has_seglet_size() {
  _has_bits_[0] |= 0x00000080u;
}
void ServerConfig::clear_has_seglet_size() {
  _has_bits_[0] &= ~0x00000080u;
}
void ServerConfig::clear_seglet_size() {
  seglet_size_ = 0u;
  clear_has_seglet_size();
}
 ::google::protobuf::uint32 ServerConfig::seglet_size() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.seglet_size)
  return seglet_size_;
}
 void ServerConfig::set_seglet_size(::google::protobuf::uint32 value) {
  set_has_seglet_size();
  seglet_size_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.seglet_size)
}

// required fixed32 max_object_data_size = 9;
bool ServerConfig::has_max_object_data_size() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ServerConfig::set_has_max_object_data_size() {
  _has_bits_[0] |= 0x00000100u;
}
void ServerConfig::clear_has_max_object_data_size() {
  _has_bits_[0] &= ~0x00000100u;
}
void ServerConfig::clear_max_object_data_size() {
  max_object_data_size_ = 0u;
  clear_has_max_object_data_size();
}
 ::google::protobuf::uint32 ServerConfig::max_object_data_size() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.max_object_data_size)
  return max_object_data_size_;
}
 void ServerConfig::set_max_object_data_size(::google::protobuf::uint32 value) {
  set_has_max_object_data_size();
  max_object_data_size_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.max_object_data_size)
}

// required fixed32 max_object_key_size = 10;
bool ServerConfig::has_max_object_key_size() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ServerConfig::set_has_max_object_key_size() {
  _has_bits_[0] |= 0x00000200u;
}
void ServerConfig::clear_has_max_object_key_size() {
  _has_bits_[0] &= ~0x00000200u;
}
void ServerConfig::clear_max_object_key_size() {
  max_object_key_size_ = 0u;
  clear_has_max_object_key_size();
}
 ::google::protobuf::uint32 ServerConfig::max_object_key_size() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.max_object_key_size)
  return max_object_key_size_;
}
 void ServerConfig::set_max_object_key_size(::google::protobuf::uint32 value) {
  set_has_max_object_key_size();
  max_object_key_size_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.max_object_key_size)
}

// required fixed32 max_cores = 11;
bool ServerConfig::has_max_cores() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ServerConfig::set_has_max_cores() {
  _has_bits_[0] |= 0x00000400u;
}
void ServerConfig::clear_has_max_cores() {
  _has_bits_[0] &= ~0x00000400u;
}
void ServerConfig::clear_max_cores() {
  max_cores_ = 0u;
  clear_has_max_cores();
}
 ::google::protobuf::uint32 ServerConfig::max_cores() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.max_cores)
  return max_cores_;
}
 void ServerConfig::set_max_cores(::google::protobuf::uint32 value) {
  set_has_max_cores();
  max_cores_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.max_cores)
}

// optional .RAMCloud.ProtoBuf.ServerConfig.Master master = 12;
bool ServerConfig::has_master() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ServerConfig::set_has_master() {
  _has_bits_[0] |= 0x00000800u;
}
void ServerConfig::clear_has_master() {
  _has_bits_[0] &= ~0x00000800u;
}
void ServerConfig::clear_master() {
  if (master_ != NULL) master_->::RAMCloud::ProtoBuf::ServerConfig_Master::Clear();
  clear_has_master();
}
const ::RAMCloud::ProtoBuf::ServerConfig_Master& ServerConfig::master() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.master)
  return master_ != NULL ? *master_ : *default_instance_->master_;
}
::RAMCloud::ProtoBuf::ServerConfig_Master* ServerConfig::mutable_master() {
  set_has_master();
  if (master_ == NULL) {
    master_ = new ::RAMCloud::ProtoBuf::ServerConfig_Master;
  }
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.ServerConfig.master)
  return master_;
}
::RAMCloud::ProtoBuf::ServerConfig_Master* ServerConfig::release_master() {
  // @@protoc_insertion_point(field_release:RAMCloud.ProtoBuf.ServerConfig.master)
  clear_has_master();
  ::RAMCloud::ProtoBuf::ServerConfig_Master* temp = master_;
  master_ = NULL;
  return temp;
}
void ServerConfig::set_allocated_master(::RAMCloud::ProtoBuf::ServerConfig_Master* master) {
  delete master_;
  master_ = master;
  if (master) {
    set_has_master();
  } else {
    clear_has_master();
  }
  // @@protoc_insertion_point(field_set_allocated:RAMCloud.ProtoBuf.ServerConfig.master)
}

// optional .RAMCloud.ProtoBuf.ServerConfig.Backup backup = 13;
bool ServerConfig::has_backup() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ServerConfig::set_has_backup() {
  _has_bits_[0] |= 0x00001000u;
}
void ServerConfig::clear_has_backup() {
  _has_bits_[0] &= ~0x00001000u;
}
void ServerConfig::clear_backup() {
  if (backup_ != NULL) backup_->::RAMCloud::ProtoBuf::ServerConfig_Backup::Clear();
  clear_has_backup();
}
const ::RAMCloud::ProtoBuf::ServerConfig_Backup& ServerConfig::backup() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.backup)
  return backup_ != NULL ? *backup_ : *default_instance_->backup_;
}
::RAMCloud::ProtoBuf::ServerConfig_Backup* ServerConfig::mutable_backup() {
  set_has_backup();
  if (backup_ == NULL) {
    backup_ = new ::RAMCloud::ProtoBuf::ServerConfig_Backup;
  }
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.ServerConfig.backup)
  return backup_;
}
::RAMCloud::ProtoBuf::ServerConfig_Backup* ServerConfig::release_backup() {
  // @@protoc_insertion_point(field_release:RAMCloud.ProtoBuf.ServerConfig.backup)
  clear_has_backup();
  ::RAMCloud::ProtoBuf::ServerConfig_Backup* temp = backup_;
  backup_ = NULL;
  return temp;
}
void ServerConfig::set_allocated_backup(::RAMCloud::ProtoBuf::ServerConfig_Backup* backup) {
  delete backup_;
  backup_ = backup;
  if (backup) {
    set_has_backup();
  } else {
    clear_has_backup();
  }
  // @@protoc_insertion_point(field_set_allocated:RAMCloud.ProtoBuf.ServerConfig.backup)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoBuf
}  // namespace RAMCloud

// @@protoc_insertion_point(global_scope)
// RAMCloud pragma [GCCWARN=0]
