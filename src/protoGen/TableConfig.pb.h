// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TableConfig.proto

#ifndef PROTOBUF_TableConfig_2eproto__INCLUDED
#define PROTOBUF_TableConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace RAMCloud {
namespace ProtoBuf {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_TableConfig_2eproto();
void protobuf_AssignDesc_TableConfig_2eproto();
void protobuf_ShutdownFile_TableConfig_2eproto();

class TableConfig;
class TableConfig_Index;
class TableConfig_Index_Indexlet;
class TableConfig_Tablet;

enum TableConfig_Tablet_State {
  TableConfig_Tablet_State_NORMAL = 0,
  TableConfig_Tablet_State_RECOVERING = 1
};
bool TableConfig_Tablet_State_IsValid(int value);
const TableConfig_Tablet_State TableConfig_Tablet_State_State_MIN = TableConfig_Tablet_State_NORMAL;
const TableConfig_Tablet_State TableConfig_Tablet_State_State_MAX = TableConfig_Tablet_State_RECOVERING;
const int TableConfig_Tablet_State_State_ARRAYSIZE = TableConfig_Tablet_State_State_MAX + 1;

const ::google::protobuf::EnumDescriptor* TableConfig_Tablet_State_descriptor();
inline const ::std::string& TableConfig_Tablet_State_Name(TableConfig_Tablet_State value) {
  return ::google::protobuf::internal::NameOfEnum(
    TableConfig_Tablet_State_descriptor(), value);
}
inline bool TableConfig_Tablet_State_Parse(
    const ::std::string& name, TableConfig_Tablet_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TableConfig_Tablet_State>(
    TableConfig_Tablet_State_descriptor(), name, value);
}
// ===================================================================

class TableConfig_Tablet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RAMCloud.ProtoBuf.TableConfig.Tablet) */ {
 public:
  TableConfig_Tablet();
  virtual ~TableConfig_Tablet();

  TableConfig_Tablet(const TableConfig_Tablet& from);

  inline TableConfig_Tablet& operator=(const TableConfig_Tablet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TableConfig_Tablet& default_instance();

  void Swap(TableConfig_Tablet* other);

  // implements Message ----------------------------------------------

  inline TableConfig_Tablet* New() const { return New(NULL); }

  TableConfig_Tablet* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TableConfig_Tablet& from);
  void MergeFrom(const TableConfig_Tablet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TableConfig_Tablet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TableConfig_Tablet_State State;
  static const State NORMAL =
    TableConfig_Tablet_State_NORMAL;
  static const State RECOVERING =
    TableConfig_Tablet_State_RECOVERING;
  static inline bool State_IsValid(int value) {
    return TableConfig_Tablet_State_IsValid(value);
  }
  static const State State_MIN =
    TableConfig_Tablet_State_State_MIN;
  static const State State_MAX =
    TableConfig_Tablet_State_State_MAX;
  static const int State_ARRAYSIZE =
    TableConfig_Tablet_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  State_descriptor() {
    return TableConfig_Tablet_State_descriptor();
  }
  static inline const ::std::string& State_Name(State value) {
    return TableConfig_Tablet_State_Name(value);
  }
  static inline bool State_Parse(const ::std::string& name,
      State* value) {
    return TableConfig_Tablet_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint64 table_id = 1;
  bool has_table_id() const;
  void clear_table_id();
  static const int kTableIdFieldNumber = 1;
  ::google::protobuf::uint64 table_id() const;
  void set_table_id(::google::protobuf::uint64 value);

  // required uint64 start_key_hash = 2;
  bool has_start_key_hash() const;
  void clear_start_key_hash();
  static const int kStartKeyHashFieldNumber = 2;
  ::google::protobuf::uint64 start_key_hash() const;
  void set_start_key_hash(::google::protobuf::uint64 value);

  // required uint64 end_key_hash = 3;
  bool has_end_key_hash() const;
  void clear_end_key_hash();
  static const int kEndKeyHashFieldNumber = 3;
  ::google::protobuf::uint64 end_key_hash() const;
  void set_end_key_hash(::google::protobuf::uint64 value);

  // required .RAMCloud.ProtoBuf.TableConfig.Tablet.State state = 4;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 4;
  ::RAMCloud::ProtoBuf::TableConfig_Tablet_State state() const;
  void set_state(::RAMCloud::ProtoBuf::TableConfig_Tablet_State value);

  // optional fixed64 server_id = 5;
  bool has_server_id() const;
  void clear_server_id();
  static const int kServerIdFieldNumber = 5;
  ::google::protobuf::uint64 server_id() const;
  void set_server_id(::google::protobuf::uint64 value);

  // optional string service_locator = 6;
  bool has_service_locator() const;
  void clear_service_locator();
  static const int kServiceLocatorFieldNumber = 6;
  const ::std::string& service_locator() const;
  void set_service_locator(const ::std::string& value);
  void set_service_locator(const char* value);
  void set_service_locator(const char* value, size_t size);
  ::std::string* mutable_service_locator();
  ::std::string* release_service_locator();
  void set_allocated_service_locator(::std::string* service_locator);

  // optional fixed64 user_data = 7;
  bool has_user_data() const;
  void clear_user_data();
  static const int kUserDataFieldNumber = 7;
  ::google::protobuf::uint64 user_data() const;
  void set_user_data(::google::protobuf::uint64 value);

  // required uint64 ctime_log_head_id = 8;
  bool has_ctime_log_head_id() const;
  void clear_ctime_log_head_id();
  static const int kCtimeLogHeadIdFieldNumber = 8;
  ::google::protobuf::uint64 ctime_log_head_id() const;
  void set_ctime_log_head_id(::google::protobuf::uint64 value);

  // required uint32 ctime_log_head_offset = 9;
  bool has_ctime_log_head_offset() const;
  void clear_ctime_log_head_offset();
  static const int kCtimeLogHeadOffsetFieldNumber = 9;
  ::google::protobuf::uint32 ctime_log_head_offset() const;
  void set_ctime_log_head_offset(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:RAMCloud.ProtoBuf.TableConfig.Tablet)
 private:
  inline void set_has_table_id();
  inline void clear_has_table_id();
  inline void set_has_start_key_hash();
  inline void clear_has_start_key_hash();
  inline void set_has_end_key_hash();
  inline void clear_has_end_key_hash();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_service_locator();
  inline void clear_has_service_locator();
  inline void set_has_user_data();
  inline void clear_has_user_data();
  inline void set_has_ctime_log_head_id();
  inline void clear_has_ctime_log_head_id();
  inline void set_has_ctime_log_head_offset();
  inline void clear_has_ctime_log_head_offset();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 table_id_;
  ::google::protobuf::uint64 start_key_hash_;
  ::google::protobuf::uint64 end_key_hash_;
  ::google::protobuf::uint64 server_id_;
  ::google::protobuf::internal::ArenaStringPtr service_locator_;
  int state_;
  ::google::protobuf::uint32 ctime_log_head_offset_;
  ::google::protobuf::uint64 user_data_;
  ::google::protobuf::uint64 ctime_log_head_id_;
  friend void  protobuf_AddDesc_TableConfig_2eproto();
  friend void protobuf_AssignDesc_TableConfig_2eproto();
  friend void protobuf_ShutdownFile_TableConfig_2eproto();

  void InitAsDefaultInstance();
  static TableConfig_Tablet* default_instance_;
};
// -------------------------------------------------------------------

class TableConfig_Index_Indexlet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet) */ {
 public:
  TableConfig_Index_Indexlet();
  virtual ~TableConfig_Index_Indexlet();

  TableConfig_Index_Indexlet(const TableConfig_Index_Indexlet& from);

  inline TableConfig_Index_Indexlet& operator=(const TableConfig_Index_Indexlet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TableConfig_Index_Indexlet& default_instance();

  void Swap(TableConfig_Index_Indexlet* other);

  // implements Message ----------------------------------------------

  inline TableConfig_Index_Indexlet* New() const { return New(NULL); }

  TableConfig_Index_Indexlet* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TableConfig_Index_Indexlet& from);
  void MergeFrom(const TableConfig_Index_Indexlet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TableConfig_Index_Indexlet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes start_key = 1;
  bool has_start_key() const;
  void clear_start_key();
  static const int kStartKeyFieldNumber = 1;
  const ::std::string& start_key() const;
  void set_start_key(const ::std::string& value);
  void set_start_key(const char* value);
  void set_start_key(const void* value, size_t size);
  ::std::string* mutable_start_key();
  ::std::string* release_start_key();
  void set_allocated_start_key(::std::string* start_key);

  // required bytes end_key = 2;
  bool has_end_key() const;
  void clear_end_key();
  static const int kEndKeyFieldNumber = 2;
  const ::std::string& end_key() const;
  void set_end_key(const ::std::string& value);
  void set_end_key(const char* value);
  void set_end_key(const void* value, size_t size);
  ::std::string* mutable_end_key();
  ::std::string* release_end_key();
  void set_allocated_end_key(::std::string* end_key);

  // required fixed64 server_id = 3;
  bool has_server_id() const;
  void clear_server_id();
  static const int kServerIdFieldNumber = 3;
  ::google::protobuf::uint64 server_id() const;
  void set_server_id(::google::protobuf::uint64 value);

  // required string service_locator = 4;
  bool has_service_locator() const;
  void clear_service_locator();
  static const int kServiceLocatorFieldNumber = 4;
  const ::std::string& service_locator() const;
  void set_service_locator(const ::std::string& value);
  void set_service_locator(const char* value);
  void set_service_locator(const char* value, size_t size);
  ::std::string* mutable_service_locator();
  ::std::string* release_service_locator();
  void set_allocated_service_locator(::std::string* service_locator);

  // @@protoc_insertion_point(class_scope:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet)
 private:
  inline void set_has_start_key();
  inline void clear_has_start_key();
  inline void set_has_end_key();
  inline void clear_has_end_key();
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_service_locator();
  inline void clear_has_service_locator();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr start_key_;
  ::google::protobuf::internal::ArenaStringPtr end_key_;
  ::google::protobuf::uint64 server_id_;
  ::google::protobuf::internal::ArenaStringPtr service_locator_;
  friend void  protobuf_AddDesc_TableConfig_2eproto();
  friend void protobuf_AssignDesc_TableConfig_2eproto();
  friend void protobuf_ShutdownFile_TableConfig_2eproto();

  void InitAsDefaultInstance();
  static TableConfig_Index_Indexlet* default_instance_;
};
// -------------------------------------------------------------------

class TableConfig_Index : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RAMCloud.ProtoBuf.TableConfig.Index) */ {
 public:
  TableConfig_Index();
  virtual ~TableConfig_Index();

  TableConfig_Index(const TableConfig_Index& from);

  inline TableConfig_Index& operator=(const TableConfig_Index& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TableConfig_Index& default_instance();

  void Swap(TableConfig_Index* other);

  // implements Message ----------------------------------------------

  inline TableConfig_Index* New() const { return New(NULL); }

  TableConfig_Index* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TableConfig_Index& from);
  void MergeFrom(const TableConfig_Index& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TableConfig_Index* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TableConfig_Index_Indexlet Indexlet;

  // accessors -------------------------------------------------------

  // required uint32 index_id = 1;
  bool has_index_id() const;
  void clear_index_id();
  static const int kIndexIdFieldNumber = 1;
  ::google::protobuf::uint32 index_id() const;
  void set_index_id(::google::protobuf::uint32 value);

  // required uint32 index_type = 2;
  bool has_index_type() const;
  void clear_index_type();
  static const int kIndexTypeFieldNumber = 2;
  ::google::protobuf::uint32 index_type() const;
  void set_index_type(::google::protobuf::uint32 value);

  // repeated .RAMCloud.ProtoBuf.TableConfig.Index.Indexlet indexlet = 3;
  int indexlet_size() const;
  void clear_indexlet();
  static const int kIndexletFieldNumber = 3;
  const ::RAMCloud::ProtoBuf::TableConfig_Index_Indexlet& indexlet(int index) const;
  ::RAMCloud::ProtoBuf::TableConfig_Index_Indexlet* mutable_indexlet(int index);
  ::RAMCloud::ProtoBuf::TableConfig_Index_Indexlet* add_indexlet();
  ::google::protobuf::RepeatedPtrField< ::RAMCloud::ProtoBuf::TableConfig_Index_Indexlet >*
      mutable_indexlet();
  const ::google::protobuf::RepeatedPtrField< ::RAMCloud::ProtoBuf::TableConfig_Index_Indexlet >&
      indexlet() const;

  // @@protoc_insertion_point(class_scope:RAMCloud.ProtoBuf.TableConfig.Index)
 private:
  inline void set_has_index_id();
  inline void clear_has_index_id();
  inline void set_has_index_type();
  inline void clear_has_index_type();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 index_id_;
  ::google::protobuf::uint32 index_type_;
  ::google::protobuf::RepeatedPtrField< ::RAMCloud::ProtoBuf::TableConfig_Index_Indexlet > indexlet_;
  friend void  protobuf_AddDesc_TableConfig_2eproto();
  friend void protobuf_AssignDesc_TableConfig_2eproto();
  friend void protobuf_ShutdownFile_TableConfig_2eproto();

  void InitAsDefaultInstance();
  static TableConfig_Index* default_instance_;
};
// -------------------------------------------------------------------

class TableConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RAMCloud.ProtoBuf.TableConfig) */ {
 public:
  TableConfig();
  virtual ~TableConfig();

  TableConfig(const TableConfig& from);

  inline TableConfig& operator=(const TableConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TableConfig& default_instance();

  void Swap(TableConfig* other);

  // implements Message ----------------------------------------------

  inline TableConfig* New() const { return New(NULL); }

  TableConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TableConfig& from);
  void MergeFrom(const TableConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TableConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TableConfig_Tablet Tablet;
  typedef TableConfig_Index Index;

  // accessors -------------------------------------------------------

  // repeated .RAMCloud.ProtoBuf.TableConfig.Tablet tablet = 1;
  int tablet_size() const;
  void clear_tablet();
  static const int kTabletFieldNumber = 1;
  const ::RAMCloud::ProtoBuf::TableConfig_Tablet& tablet(int index) const;
  ::RAMCloud::ProtoBuf::TableConfig_Tablet* mutable_tablet(int index);
  ::RAMCloud::ProtoBuf::TableConfig_Tablet* add_tablet();
  ::google::protobuf::RepeatedPtrField< ::RAMCloud::ProtoBuf::TableConfig_Tablet >*
      mutable_tablet();
  const ::google::protobuf::RepeatedPtrField< ::RAMCloud::ProtoBuf::TableConfig_Tablet >&
      tablet() const;

  // repeated .RAMCloud.ProtoBuf.TableConfig.Index index = 2;
  int index_size() const;
  void clear_index();
  static const int kIndexFieldNumber = 2;
  const ::RAMCloud::ProtoBuf::TableConfig_Index& index(int index) const;
  ::RAMCloud::ProtoBuf::TableConfig_Index* mutable_index(int index);
  ::RAMCloud::ProtoBuf::TableConfig_Index* add_index();
  ::google::protobuf::RepeatedPtrField< ::RAMCloud::ProtoBuf::TableConfig_Index >*
      mutable_index();
  const ::google::protobuf::RepeatedPtrField< ::RAMCloud::ProtoBuf::TableConfig_Index >&
      index() const;

  // @@protoc_insertion_point(class_scope:RAMCloud.ProtoBuf.TableConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::RAMCloud::ProtoBuf::TableConfig_Tablet > tablet_;
  ::google::protobuf::RepeatedPtrField< ::RAMCloud::ProtoBuf::TableConfig_Index > index_;
  friend void  protobuf_AddDesc_TableConfig_2eproto();
  friend void protobuf_AssignDesc_TableConfig_2eproto();
  friend void protobuf_ShutdownFile_TableConfig_2eproto();

  void InitAsDefaultInstance();
  static TableConfig* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// TableConfig_Tablet

// required uint64 table_id = 1;
inline bool TableConfig_Tablet::has_table_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TableConfig_Tablet::set_has_table_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TableConfig_Tablet::clear_has_table_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TableConfig_Tablet::clear_table_id() {
  table_id_ = GOOGLE_ULONGLONG(0);
  clear_has_table_id();
}
inline ::google::protobuf::uint64 TableConfig_Tablet::table_id() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.TableConfig.Tablet.table_id)
  return table_id_;
}
inline void TableConfig_Tablet::set_table_id(::google::protobuf::uint64 value) {
  set_has_table_id();
  table_id_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.TableConfig.Tablet.table_id)
}

// required uint64 start_key_hash = 2;
inline bool TableConfig_Tablet::has_start_key_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TableConfig_Tablet::set_has_start_key_hash() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TableConfig_Tablet::clear_has_start_key_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TableConfig_Tablet::clear_start_key_hash() {
  start_key_hash_ = GOOGLE_ULONGLONG(0);
  clear_has_start_key_hash();
}
inline ::google::protobuf::uint64 TableConfig_Tablet::start_key_hash() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.TableConfig.Tablet.start_key_hash)
  return start_key_hash_;
}
inline void TableConfig_Tablet::set_start_key_hash(::google::protobuf::uint64 value) {
  set_has_start_key_hash();
  start_key_hash_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.TableConfig.Tablet.start_key_hash)
}

// required uint64 end_key_hash = 3;
inline bool TableConfig_Tablet::has_end_key_hash() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TableConfig_Tablet::set_has_end_key_hash() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TableConfig_Tablet::clear_has_end_key_hash() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TableConfig_Tablet::clear_end_key_hash() {
  end_key_hash_ = GOOGLE_ULONGLONG(0);
  clear_has_end_key_hash();
}
inline ::google::protobuf::uint64 TableConfig_Tablet::end_key_hash() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.TableConfig.Tablet.end_key_hash)
  return end_key_hash_;
}
inline void TableConfig_Tablet::set_end_key_hash(::google::protobuf::uint64 value) {
  set_has_end_key_hash();
  end_key_hash_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.TableConfig.Tablet.end_key_hash)
}

// required .RAMCloud.ProtoBuf.TableConfig.Tablet.State state = 4;
inline bool TableConfig_Tablet::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TableConfig_Tablet::set_has_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TableConfig_Tablet::clear_has_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TableConfig_Tablet::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::RAMCloud::ProtoBuf::TableConfig_Tablet_State TableConfig_Tablet::state() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.TableConfig.Tablet.state)
  return static_cast< ::RAMCloud::ProtoBuf::TableConfig_Tablet_State >(state_);
}
inline void TableConfig_Tablet::set_state(::RAMCloud::ProtoBuf::TableConfig_Tablet_State value) {
  assert(::RAMCloud::ProtoBuf::TableConfig_Tablet_State_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.TableConfig.Tablet.state)
}

// optional fixed64 server_id = 5;
inline bool TableConfig_Tablet::has_server_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TableConfig_Tablet::set_has_server_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TableConfig_Tablet::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TableConfig_Tablet::clear_server_id() {
  server_id_ = GOOGLE_ULONGLONG(0);
  clear_has_server_id();
}
inline ::google::protobuf::uint64 TableConfig_Tablet::server_id() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.TableConfig.Tablet.server_id)
  return server_id_;
}
inline void TableConfig_Tablet::set_server_id(::google::protobuf::uint64 value) {
  set_has_server_id();
  server_id_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.TableConfig.Tablet.server_id)
}

// optional string service_locator = 6;
inline bool TableConfig_Tablet::has_service_locator() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TableConfig_Tablet::set_has_service_locator() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TableConfig_Tablet::clear_has_service_locator() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TableConfig_Tablet::clear_service_locator() {
  service_locator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_service_locator();
}
inline const ::std::string& TableConfig_Tablet::service_locator() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.TableConfig.Tablet.service_locator)
  return service_locator_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TableConfig_Tablet::set_service_locator(const ::std::string& value) {
  set_has_service_locator();
  service_locator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.TableConfig.Tablet.service_locator)
}
inline void TableConfig_Tablet::set_service_locator(const char* value) {
  set_has_service_locator();
  service_locator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RAMCloud.ProtoBuf.TableConfig.Tablet.service_locator)
}
inline void TableConfig_Tablet::set_service_locator(const char* value, size_t size) {
  set_has_service_locator();
  service_locator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RAMCloud.ProtoBuf.TableConfig.Tablet.service_locator)
}
inline ::std::string* TableConfig_Tablet::mutable_service_locator() {
  set_has_service_locator();
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.TableConfig.Tablet.service_locator)
  return service_locator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TableConfig_Tablet::release_service_locator() {
  // @@protoc_insertion_point(field_release:RAMCloud.ProtoBuf.TableConfig.Tablet.service_locator)
  clear_has_service_locator();
  return service_locator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TableConfig_Tablet::set_allocated_service_locator(::std::string* service_locator) {
  if (service_locator != NULL) {
    set_has_service_locator();
  } else {
    clear_has_service_locator();
  }
  service_locator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_locator);
  // @@protoc_insertion_point(field_set_allocated:RAMCloud.ProtoBuf.TableConfig.Tablet.service_locator)
}

// optional fixed64 user_data = 7;
inline bool TableConfig_Tablet::has_user_data() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TableConfig_Tablet::set_has_user_data() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TableConfig_Tablet::clear_has_user_data() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TableConfig_Tablet::clear_user_data() {
  user_data_ = GOOGLE_ULONGLONG(0);
  clear_has_user_data();
}
inline ::google::protobuf::uint64 TableConfig_Tablet::user_data() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.TableConfig.Tablet.user_data)
  return user_data_;
}
inline void TableConfig_Tablet::set_user_data(::google::protobuf::uint64 value) {
  set_has_user_data();
  user_data_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.TableConfig.Tablet.user_data)
}

// required uint64 ctime_log_head_id = 8;
inline bool TableConfig_Tablet::has_ctime_log_head_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TableConfig_Tablet::set_has_ctime_log_head_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TableConfig_Tablet::clear_has_ctime_log_head_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TableConfig_Tablet::clear_ctime_log_head_id() {
  ctime_log_head_id_ = GOOGLE_ULONGLONG(0);
  clear_has_ctime_log_head_id();
}
inline ::google::protobuf::uint64 TableConfig_Tablet::ctime_log_head_id() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.TableConfig.Tablet.ctime_log_head_id)
  return ctime_log_head_id_;
}
inline void TableConfig_Tablet::set_ctime_log_head_id(::google::protobuf::uint64 value) {
  set_has_ctime_log_head_id();
  ctime_log_head_id_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.TableConfig.Tablet.ctime_log_head_id)
}

// required uint32 ctime_log_head_offset = 9;
inline bool TableConfig_Tablet::has_ctime_log_head_offset() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TableConfig_Tablet::set_has_ctime_log_head_offset() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TableConfig_Tablet::clear_has_ctime_log_head_offset() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TableConfig_Tablet::clear_ctime_log_head_offset() {
  ctime_log_head_offset_ = 0u;
  clear_has_ctime_log_head_offset();
}
inline ::google::protobuf::uint32 TableConfig_Tablet::ctime_log_head_offset() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.TableConfig.Tablet.ctime_log_head_offset)
  return ctime_log_head_offset_;
}
inline void TableConfig_Tablet::set_ctime_log_head_offset(::google::protobuf::uint32 value) {
  set_has_ctime_log_head_offset();
  ctime_log_head_offset_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.TableConfig.Tablet.ctime_log_head_offset)
}

// -------------------------------------------------------------------

// TableConfig_Index_Indexlet

// required bytes start_key = 1;
inline bool TableConfig_Index_Indexlet::has_start_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TableConfig_Index_Indexlet::set_has_start_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TableConfig_Index_Indexlet::clear_has_start_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TableConfig_Index_Indexlet::clear_start_key() {
  start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_start_key();
}
inline const ::std::string& TableConfig_Index_Indexlet::start_key() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet.start_key)
  return start_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TableConfig_Index_Indexlet::set_start_key(const ::std::string& value) {
  set_has_start_key();
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet.start_key)
}
inline void TableConfig_Index_Indexlet::set_start_key(const char* value) {
  set_has_start_key();
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet.start_key)
}
inline void TableConfig_Index_Indexlet::set_start_key(const void* value, size_t size) {
  set_has_start_key();
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet.start_key)
}
inline ::std::string* TableConfig_Index_Indexlet::mutable_start_key() {
  set_has_start_key();
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet.start_key)
  return start_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TableConfig_Index_Indexlet::release_start_key() {
  // @@protoc_insertion_point(field_release:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet.start_key)
  clear_has_start_key();
  return start_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TableConfig_Index_Indexlet::set_allocated_start_key(::std::string* start_key) {
  if (start_key != NULL) {
    set_has_start_key();
  } else {
    clear_has_start_key();
  }
  start_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_key);
  // @@protoc_insertion_point(field_set_allocated:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet.start_key)
}

// required bytes end_key = 2;
inline bool TableConfig_Index_Indexlet::has_end_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TableConfig_Index_Indexlet::set_has_end_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TableConfig_Index_Indexlet::clear_has_end_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TableConfig_Index_Indexlet::clear_end_key() {
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_end_key();
}
inline const ::std::string& TableConfig_Index_Indexlet::end_key() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet.end_key)
  return end_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TableConfig_Index_Indexlet::set_end_key(const ::std::string& value) {
  set_has_end_key();
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet.end_key)
}
inline void TableConfig_Index_Indexlet::set_end_key(const char* value) {
  set_has_end_key();
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet.end_key)
}
inline void TableConfig_Index_Indexlet::set_end_key(const void* value, size_t size) {
  set_has_end_key();
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet.end_key)
}
inline ::std::string* TableConfig_Index_Indexlet::mutable_end_key() {
  set_has_end_key();
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet.end_key)
  return end_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TableConfig_Index_Indexlet::release_end_key() {
  // @@protoc_insertion_point(field_release:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet.end_key)
  clear_has_end_key();
  return end_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TableConfig_Index_Indexlet::set_allocated_end_key(::std::string* end_key) {
  if (end_key != NULL) {
    set_has_end_key();
  } else {
    clear_has_end_key();
  }
  end_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_key);
  // @@protoc_insertion_point(field_set_allocated:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet.end_key)
}

// required fixed64 server_id = 3;
inline bool TableConfig_Index_Indexlet::has_server_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TableConfig_Index_Indexlet::set_has_server_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TableConfig_Index_Indexlet::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TableConfig_Index_Indexlet::clear_server_id() {
  server_id_ = GOOGLE_ULONGLONG(0);
  clear_has_server_id();
}
inline ::google::protobuf::uint64 TableConfig_Index_Indexlet::server_id() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet.server_id)
  return server_id_;
}
inline void TableConfig_Index_Indexlet::set_server_id(::google::protobuf::uint64 value) {
  set_has_server_id();
  server_id_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet.server_id)
}

// required string service_locator = 4;
inline bool TableConfig_Index_Indexlet::has_service_locator() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TableConfig_Index_Indexlet::set_has_service_locator() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TableConfig_Index_Indexlet::clear_has_service_locator() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TableConfig_Index_Indexlet::clear_service_locator() {
  service_locator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_service_locator();
}
inline const ::std::string& TableConfig_Index_Indexlet::service_locator() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet.service_locator)
  return service_locator_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TableConfig_Index_Indexlet::set_service_locator(const ::std::string& value) {
  set_has_service_locator();
  service_locator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet.service_locator)
}
inline void TableConfig_Index_Indexlet::set_service_locator(const char* value) {
  set_has_service_locator();
  service_locator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet.service_locator)
}
inline void TableConfig_Index_Indexlet::set_service_locator(const char* value, size_t size) {
  set_has_service_locator();
  service_locator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet.service_locator)
}
inline ::std::string* TableConfig_Index_Indexlet::mutable_service_locator() {
  set_has_service_locator();
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet.service_locator)
  return service_locator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TableConfig_Index_Indexlet::release_service_locator() {
  // @@protoc_insertion_point(field_release:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet.service_locator)
  clear_has_service_locator();
  return service_locator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TableConfig_Index_Indexlet::set_allocated_service_locator(::std::string* service_locator) {
  if (service_locator != NULL) {
    set_has_service_locator();
  } else {
    clear_has_service_locator();
  }
  service_locator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_locator);
  // @@protoc_insertion_point(field_set_allocated:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet.service_locator)
}

// -------------------------------------------------------------------

// TableConfig_Index

// required uint32 index_id = 1;
inline bool TableConfig_Index::has_index_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TableConfig_Index::set_has_index_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TableConfig_Index::clear_has_index_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TableConfig_Index::clear_index_id() {
  index_id_ = 0u;
  clear_has_index_id();
}
inline ::google::protobuf::uint32 TableConfig_Index::index_id() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.TableConfig.Index.index_id)
  return index_id_;
}
inline void TableConfig_Index::set_index_id(::google::protobuf::uint32 value) {
  set_has_index_id();
  index_id_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.TableConfig.Index.index_id)
}

// required uint32 index_type = 2;
inline bool TableConfig_Index::has_index_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TableConfig_Index::set_has_index_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TableConfig_Index::clear_has_index_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TableConfig_Index::clear_index_type() {
  index_type_ = 0u;
  clear_has_index_type();
}
inline ::google::protobuf::uint32 TableConfig_Index::index_type() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.TableConfig.Index.index_type)
  return index_type_;
}
inline void TableConfig_Index::set_index_type(::google::protobuf::uint32 value) {
  set_has_index_type();
  index_type_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.TableConfig.Index.index_type)
}

// repeated .RAMCloud.ProtoBuf.TableConfig.Index.Indexlet indexlet = 3;
inline int TableConfig_Index::indexlet_size() const {
  return indexlet_.size();
}
inline void TableConfig_Index::clear_indexlet() {
  indexlet_.Clear();
}
inline const ::RAMCloud::ProtoBuf::TableConfig_Index_Indexlet& TableConfig_Index::indexlet(int index) const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.TableConfig.Index.indexlet)
  return indexlet_.Get(index);
}
inline ::RAMCloud::ProtoBuf::TableConfig_Index_Indexlet* TableConfig_Index::mutable_indexlet(int index) {
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.TableConfig.Index.indexlet)
  return indexlet_.Mutable(index);
}
inline ::RAMCloud::ProtoBuf::TableConfig_Index_Indexlet* TableConfig_Index::add_indexlet() {
  // @@protoc_insertion_point(field_add:RAMCloud.ProtoBuf.TableConfig.Index.indexlet)
  return indexlet_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::RAMCloud::ProtoBuf::TableConfig_Index_Indexlet >*
TableConfig_Index::mutable_indexlet() {
  // @@protoc_insertion_point(field_mutable_list:RAMCloud.ProtoBuf.TableConfig.Index.indexlet)
  return &indexlet_;
}
inline const ::google::protobuf::RepeatedPtrField< ::RAMCloud::ProtoBuf::TableConfig_Index_Indexlet >&
TableConfig_Index::indexlet() const {
  // @@protoc_insertion_point(field_list:RAMCloud.ProtoBuf.TableConfig.Index.indexlet)
  return indexlet_;
}

// -------------------------------------------------------------------

// TableConfig

// repeated .RAMCloud.ProtoBuf.TableConfig.Tablet tablet = 1;
inline int TableConfig::tablet_size() const {
  return tablet_.size();
}
inline void TableConfig::clear_tablet() {
  tablet_.Clear();
}
inline const ::RAMCloud::ProtoBuf::TableConfig_Tablet& TableConfig::tablet(int index) const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.TableConfig.tablet)
  return tablet_.Get(index);
}
inline ::RAMCloud::ProtoBuf::TableConfig_Tablet* TableConfig::mutable_tablet(int index) {
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.TableConfig.tablet)
  return tablet_.Mutable(index);
}
inline ::RAMCloud::ProtoBuf::TableConfig_Tablet* TableConfig::add_tablet() {
  // @@protoc_insertion_point(field_add:RAMCloud.ProtoBuf.TableConfig.tablet)
  return tablet_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::RAMCloud::ProtoBuf::TableConfig_Tablet >*
TableConfig::mutable_tablet() {
  // @@protoc_insertion_point(field_mutable_list:RAMCloud.ProtoBuf.TableConfig.tablet)
  return &tablet_;
}
inline const ::google::protobuf::RepeatedPtrField< ::RAMCloud::ProtoBuf::TableConfig_Tablet >&
TableConfig::tablet() const {
  // @@protoc_insertion_point(field_list:RAMCloud.ProtoBuf.TableConfig.tablet)
  return tablet_;
}

// repeated .RAMCloud.ProtoBuf.TableConfig.Index index = 2;
inline int TableConfig::index_size() const {
  return index_.size();
}
inline void TableConfig::clear_index() {
  index_.Clear();
}
inline const ::RAMCloud::ProtoBuf::TableConfig_Index& TableConfig::index(int index) const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.TableConfig.index)
  return index_.Get(index);
}
inline ::RAMCloud::ProtoBuf::TableConfig_Index* TableConfig::mutable_index(int index) {
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.TableConfig.index)
  return index_.Mutable(index);
}
inline ::RAMCloud::ProtoBuf::TableConfig_Index* TableConfig::add_index() {
  // @@protoc_insertion_point(field_add:RAMCloud.ProtoBuf.TableConfig.index)
  return index_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::RAMCloud::ProtoBuf::TableConfig_Index >*
TableConfig::mutable_index() {
  // @@protoc_insertion_point(field_mutable_list:RAMCloud.ProtoBuf.TableConfig.index)
  return &index_;
}
inline const ::google::protobuf::RepeatedPtrField< ::RAMCloud::ProtoBuf::TableConfig_Index >&
TableConfig::index() const {
  // @@protoc_insertion_point(field_list:RAMCloud.ProtoBuf.TableConfig.index)
  return index_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoBuf
}  // namespace RAMCloud

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::RAMCloud::ProtoBuf::TableConfig_Tablet_State> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RAMCloud::ProtoBuf::TableConfig_Tablet_State>() {
  return ::RAMCloud::ProtoBuf::TableConfig_Tablet_State_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TableConfig_2eproto__INCLUDED
// RAMCloud pragma [GCCWARN=0]
