// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerConfig.proto

#ifndef PROTOBUF_ServerConfig_2eproto__INCLUDED
#define PROTOBUF_ServerConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace RAMCloud {
namespace ProtoBuf {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_ServerConfig_2eproto();
void protobuf_AssignDesc_ServerConfig_2eproto();
void protobuf_ShutdownFile_ServerConfig_2eproto();

class ServerConfig;
class ServerConfig_Backup;
class ServerConfig_Master;

// ===================================================================

class ServerConfig_Master : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RAMCloud.ProtoBuf.ServerConfig.Master) */ {
 public:
  ServerConfig_Master();
  virtual ~ServerConfig_Master();

  ServerConfig_Master(const ServerConfig_Master& from);

  inline ServerConfig_Master& operator=(const ServerConfig_Master& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerConfig_Master& default_instance();

  void Swap(ServerConfig_Master* other);

  // implements Message ----------------------------------------------

  inline ServerConfig_Master* New() const { return New(NULL); }

  ServerConfig_Master* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerConfig_Master& from);
  void MergeFrom(const ServerConfig_Master& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServerConfig_Master* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 log_bytes = 1;
  bool has_log_bytes() const;
  void clear_log_bytes();
  static const int kLogBytesFieldNumber = 1;
  ::google::protobuf::uint64 log_bytes() const;
  void set_log_bytes(::google::protobuf::uint64 value);

  // required fixed64 hash_table_bytes = 2;
  bool has_hash_table_bytes() const;
  void clear_hash_table_bytes();
  static const int kHashTableBytesFieldNumber = 2;
  ::google::protobuf::uint64 hash_table_bytes() const;
  void set_hash_table_bytes(::google::protobuf::uint64 value);

  // required bool disable_log_cleaner = 3;
  bool has_disable_log_cleaner() const;
  void clear_disable_log_cleaner();
  static const int kDisableLogCleanerFieldNumber = 3;
  bool disable_log_cleaner() const;
  void set_disable_log_cleaner(bool value);

  // required bool disable_in_memory_cleaning = 4;
  bool has_disable_in_memory_cleaning() const;
  void clear_disable_in_memory_cleaning();
  static const int kDisableInMemoryCleaningFieldNumber = 4;
  bool disable_in_memory_cleaning() const;
  void set_disable_in_memory_cleaning(bool value);

  // required double backup_disk_expansion_factor = 5;
  bool has_backup_disk_expansion_factor() const;
  void clear_backup_disk_expansion_factor();
  static const int kBackupDiskExpansionFactorFieldNumber = 5;
  double backup_disk_expansion_factor() const;
  void set_backup_disk_expansion_factor(double value);

  // required fixed32 cleaner_write_cost_threshold = 6;
  bool has_cleaner_write_cost_threshold() const;
  void clear_cleaner_write_cost_threshold();
  static const int kCleanerWriteCostThresholdFieldNumber = 6;
  ::google::protobuf::uint32 cleaner_write_cost_threshold() const;
  void set_cleaner_write_cost_threshold(::google::protobuf::uint32 value);

  // required string cleaner_balancer = 7;
  bool has_cleaner_balancer() const;
  void clear_cleaner_balancer();
  static const int kCleanerBalancerFieldNumber = 7;
  const ::std::string& cleaner_balancer() const;
  void set_cleaner_balancer(const ::std::string& value);
  void set_cleaner_balancer(const char* value);
  void set_cleaner_balancer(const char* value, size_t size);
  ::std::string* mutable_cleaner_balancer();
  ::std::string* release_cleaner_balancer();
  void set_allocated_cleaner_balancer(::std::string* cleaner_balancer);

  // required fixed32 cleaner_thread_count = 8;
  bool has_cleaner_thread_count() const;
  void clear_cleaner_thread_count();
  static const int kCleanerThreadCountFieldNumber = 8;
  ::google::protobuf::uint32 cleaner_thread_count() const;
  void set_cleaner_thread_count(::google::protobuf::uint32 value);

  // required fixed32 num_replicas = 9;
  bool has_num_replicas() const;
  void clear_num_replicas();
  static const int kNumReplicasFieldNumber = 9;
  ::google::protobuf::uint32 num_replicas() const;
  void set_num_replicas(::google::protobuf::uint32 value);

  // required bool use_hugepages = 10;
  bool has_use_hugepages() const;
  void clear_use_hugepages();
  static const int kUseHugepagesFieldNumber = 10;
  bool use_hugepages() const;
  void set_use_hugepages(bool value);

  // required bool use_mincopysets = 11;
  bool has_use_mincopysets() const;
  void clear_use_mincopysets();
  static const int kUseMincopysetsFieldNumber = 11;
  bool use_mincopysets() const;
  void set_use_mincopysets(bool value);

  // required bool use_local_backup = 12;
  bool has_use_local_backup() const;
  void clear_use_local_backup();
  static const int kUseLocalBackupFieldNumber = 12;
  bool use_local_backup() const;
  void set_use_local_backup(bool value);

  // required bool use_plusonebackup = 13;
  bool has_use_plusonebackup() const;
  void clear_use_plusonebackup();
  static const int kUsePlusonebackupFieldNumber = 13;
  bool use_plusonebackup() const;
  void set_use_plusonebackup(bool value);

  // @@protoc_insertion_point(class_scope:RAMCloud.ProtoBuf.ServerConfig.Master)
 private:
  inline void set_has_log_bytes();
  inline void clear_has_log_bytes();
  inline void set_has_hash_table_bytes();
  inline void clear_has_hash_table_bytes();
  inline void set_has_disable_log_cleaner();
  inline void clear_has_disable_log_cleaner();
  inline void set_has_disable_in_memory_cleaning();
  inline void clear_has_disable_in_memory_cleaning();
  inline void set_has_backup_disk_expansion_factor();
  inline void clear_has_backup_disk_expansion_factor();
  inline void set_has_cleaner_write_cost_threshold();
  inline void clear_has_cleaner_write_cost_threshold();
  inline void set_has_cleaner_balancer();
  inline void clear_has_cleaner_balancer();
  inline void set_has_cleaner_thread_count();
  inline void clear_has_cleaner_thread_count();
  inline void set_has_num_replicas();
  inline void clear_has_num_replicas();
  inline void set_has_use_hugepages();
  inline void clear_has_use_hugepages();
  inline void set_has_use_mincopysets();
  inline void clear_has_use_mincopysets();
  inline void set_has_use_local_backup();
  inline void clear_has_use_local_backup();
  inline void set_has_use_plusonebackup();
  inline void clear_has_use_plusonebackup();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 log_bytes_;
  ::google::protobuf::uint64 hash_table_bytes_;
  double backup_disk_expansion_factor_;
  ::google::protobuf::uint32 cleaner_write_cost_threshold_;
  bool disable_log_cleaner_;
  bool disable_in_memory_cleaning_;
  bool use_hugepages_;
  bool use_mincopysets_;
  ::google::protobuf::internal::ArenaStringPtr cleaner_balancer_;
  ::google::protobuf::uint32 cleaner_thread_count_;
  ::google::protobuf::uint32 num_replicas_;
  bool use_local_backup_;
  bool use_plusonebackup_;
  friend void  protobuf_AddDesc_ServerConfig_2eproto();
  friend void protobuf_AssignDesc_ServerConfig_2eproto();
  friend void protobuf_ShutdownFile_ServerConfig_2eproto();

  void InitAsDefaultInstance();
  static ServerConfig_Master* default_instance_;
};
// -------------------------------------------------------------------

class ServerConfig_Backup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RAMCloud.ProtoBuf.ServerConfig.Backup) */ {
 public:
  ServerConfig_Backup();
  virtual ~ServerConfig_Backup();

  ServerConfig_Backup(const ServerConfig_Backup& from);

  inline ServerConfig_Backup& operator=(const ServerConfig_Backup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerConfig_Backup& default_instance();

  void Swap(ServerConfig_Backup* other);

  // implements Message ----------------------------------------------

  inline ServerConfig_Backup* New() const { return New(NULL); }

  ServerConfig_Backup* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerConfig_Backup& from);
  void MergeFrom(const ServerConfig_Backup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServerConfig_Backup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool gc = 1;
  bool has_gc() const;
  void clear_gc();
  static const int kGcFieldNumber = 1;
  bool gc() const;
  void set_gc(bool value);

  // required bool in_memory = 2;
  bool has_in_memory() const;
  void clear_in_memory();
  static const int kInMemoryFieldNumber = 2;
  bool in_memory() const;
  void set_in_memory(bool value);

  // required fixed32 num_segment_frames = 3;
  bool has_num_segment_frames() const;
  void clear_num_segment_frames();
  static const int kNumSegmentFramesFieldNumber = 3;
  ::google::protobuf::uint32 num_segment_frames() const;
  void set_num_segment_frames(::google::protobuf::uint32 value);

  // required fixed32 max_non_volatile_buffers = 4;
  bool has_max_non_volatile_buffers() const;
  void clear_max_non_volatile_buffers();
  static const int kMaxNonVolatileBuffersFieldNumber = 4;
  ::google::protobuf::uint32 max_non_volatile_buffers() const;
  void set_max_non_volatile_buffers(::google::protobuf::uint32 value);

  // required fixed32 max_recovery_replicas = 20;
  bool has_max_recovery_replicas() const;
  void clear_max_recovery_replicas();
  static const int kMaxRecoveryReplicasFieldNumber = 20;
  ::google::protobuf::uint32 max_recovery_replicas() const;
  void set_max_recovery_replicas(::google::protobuf::uint32 value);

  // optional string file = 5;
  bool has_file() const;
  void clear_file();
  static const int kFileFieldNumber = 5;
  const ::std::string& file() const;
  void set_file(const ::std::string& value);
  void set_file(const char* value);
  void set_file(const char* value, size_t size);
  ::std::string* mutable_file();
  ::std::string* release_file();
  void set_allocated_file(::std::string* file);

  // required int32 strategy = 6;
  bool has_strategy() const;
  void clear_strategy();
  static const int kStrategyFieldNumber = 6;
  ::google::protobuf::int32 strategy() const;
  void set_strategy(::google::protobuf::int32 value);

  // required fixed32 mock_speed = 7;
  bool has_mock_speed() const;
  void clear_mock_speed();
  static const int kMockSpeedFieldNumber = 7;
  ::google::protobuf::uint32 mock_speed() const;
  void set_mock_speed(::google::protobuf::uint32 value);

  // required fixed64 write_rate_limit = 8;
  bool has_write_rate_limit() const;
  void clear_write_rate_limit();
  static const int kWriteRateLimitFieldNumber = 8;
  ::google::protobuf::uint64 write_rate_limit() const;
  void set_write_rate_limit(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:RAMCloud.ProtoBuf.ServerConfig.Backup)
 private:
  inline void set_has_gc();
  inline void clear_has_gc();
  inline void set_has_in_memory();
  inline void clear_has_in_memory();
  inline void set_has_num_segment_frames();
  inline void clear_has_num_segment_frames();
  inline void set_has_max_non_volatile_buffers();
  inline void clear_has_max_non_volatile_buffers();
  inline void set_has_max_recovery_replicas();
  inline void clear_has_max_recovery_replicas();
  inline void set_has_file();
  inline void clear_has_file();
  inline void set_has_strategy();
  inline void clear_has_strategy();
  inline void set_has_mock_speed();
  inline void clear_has_mock_speed();
  inline void set_has_write_rate_limit();
  inline void clear_has_write_rate_limit();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool gc_;
  bool in_memory_;
  ::google::protobuf::uint32 num_segment_frames_;
  ::google::protobuf::uint32 max_non_volatile_buffers_;
  ::google::protobuf::uint32 max_recovery_replicas_;
  ::google::protobuf::internal::ArenaStringPtr file_;
  ::google::protobuf::int32 strategy_;
  ::google::protobuf::uint32 mock_speed_;
  ::google::protobuf::uint64 write_rate_limit_;
  friend void  protobuf_AddDesc_ServerConfig_2eproto();
  friend void protobuf_AssignDesc_ServerConfig_2eproto();
  friend void protobuf_ShutdownFile_ServerConfig_2eproto();

  void InitAsDefaultInstance();
  static ServerConfig_Backup* default_instance_;
};
// -------------------------------------------------------------------

class ServerConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RAMCloud.ProtoBuf.ServerConfig) */ {
 public:
  ServerConfig();
  virtual ~ServerConfig();

  ServerConfig(const ServerConfig& from);

  inline ServerConfig& operator=(const ServerConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerConfig& default_instance();

  void Swap(ServerConfig* other);

  // implements Message ----------------------------------------------

  inline ServerConfig* New() const { return New(NULL); }

  ServerConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerConfig& from);
  void MergeFrom(const ServerConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServerConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ServerConfig_Master Master;
  typedef ServerConfig_Backup Backup;

  // accessors -------------------------------------------------------

  // required string coordinator_locator = 1;
  bool has_coordinator_locator() const;
  void clear_coordinator_locator();
  static const int kCoordinatorLocatorFieldNumber = 1;
  const ::std::string& coordinator_locator() const;
  void set_coordinator_locator(const ::std::string& value);
  void set_coordinator_locator(const char* value);
  void set_coordinator_locator(const char* value, size_t size);
  ::std::string* mutable_coordinator_locator();
  ::std::string* release_coordinator_locator();
  void set_allocated_coordinator_locator(::std::string* coordinator_locator);

  // required string local_locator = 2;
  bool has_local_locator() const;
  void clear_local_locator();
  static const int kLocalLocatorFieldNumber = 2;
  const ::std::string& local_locator() const;
  void set_local_locator(const ::std::string& value);
  void set_local_locator(const char* value);
  void set_local_locator(const char* value, size_t size);
  ::std::string* mutable_local_locator();
  ::std::string* release_local_locator();
  void set_allocated_local_locator(::std::string* local_locator);

  // required string cluster_name = 3;
  bool has_cluster_name() const;
  void clear_cluster_name();
  static const int kClusterNameFieldNumber = 3;
  const ::std::string& cluster_name() const;
  void set_cluster_name(const ::std::string& value);
  void set_cluster_name(const char* value);
  void set_cluster_name(const char* value, size_t size);
  ::std::string* mutable_cluster_name();
  ::std::string* release_cluster_name();
  void set_allocated_cluster_name(::std::string* cluster_name);

  // required string services = 4;
  bool has_services() const;
  void clear_services();
  static const int kServicesFieldNumber = 4;
  const ::std::string& services() const;
  void set_services(const ::std::string& value);
  void set_services(const char* value);
  void set_services(const char* value, size_t size);
  ::std::string* mutable_services();
  ::std::string* release_services();
  void set_allocated_services(::std::string* services);

  // required bool detect_failures = 5;
  bool has_detect_failures() const;
  void clear_detect_failures();
  static const int kDetectFailuresFieldNumber = 5;
  bool detect_failures() const;
  void set_detect_failures(bool value);

  // required bool pin_memory = 6;
  bool has_pin_memory() const;
  void clear_pin_memory();
  static const int kPinMemoryFieldNumber = 6;
  bool pin_memory() const;
  void set_pin_memory(bool value);

  // required fixed32 segment_size = 7;
  bool has_segment_size() const;
  void clear_segment_size();
  static const int kSegmentSizeFieldNumber = 7;
  ::google::protobuf::uint32 segment_size() const;
  void set_segment_size(::google::protobuf::uint32 value);

  // required fixed32 seglet_size = 8;
  bool has_seglet_size() const;
  void clear_seglet_size();
  static const int kSegletSizeFieldNumber = 8;
  ::google::protobuf::uint32 seglet_size() const;
  void set_seglet_size(::google::protobuf::uint32 value);

  // required fixed32 max_object_data_size = 9;
  bool has_max_object_data_size() const;
  void clear_max_object_data_size();
  static const int kMaxObjectDataSizeFieldNumber = 9;
  ::google::protobuf::uint32 max_object_data_size() const;
  void set_max_object_data_size(::google::protobuf::uint32 value);

  // required fixed32 max_object_key_size = 10;
  bool has_max_object_key_size() const;
  void clear_max_object_key_size();
  static const int kMaxObjectKeySizeFieldNumber = 10;
  ::google::protobuf::uint32 max_object_key_size() const;
  void set_max_object_key_size(::google::protobuf::uint32 value);

  // required fixed32 max_cores = 11;
  bool has_max_cores() const;
  void clear_max_cores();
  static const int kMaxCoresFieldNumber = 11;
  ::google::protobuf::uint32 max_cores() const;
  void set_max_cores(::google::protobuf::uint32 value);

  // optional .RAMCloud.ProtoBuf.ServerConfig.Master master = 12;
  bool has_master() const;
  void clear_master();
  static const int kMasterFieldNumber = 12;
  const ::RAMCloud::ProtoBuf::ServerConfig_Master& master() const;
  ::RAMCloud::ProtoBuf::ServerConfig_Master* mutable_master();
  ::RAMCloud::ProtoBuf::ServerConfig_Master* release_master();
  void set_allocated_master(::RAMCloud::ProtoBuf::ServerConfig_Master* master);

  // optional .RAMCloud.ProtoBuf.ServerConfig.Backup backup = 13;
  bool has_backup() const;
  void clear_backup();
  static const int kBackupFieldNumber = 13;
  const ::RAMCloud::ProtoBuf::ServerConfig_Backup& backup() const;
  ::RAMCloud::ProtoBuf::ServerConfig_Backup* mutable_backup();
  ::RAMCloud::ProtoBuf::ServerConfig_Backup* release_backup();
  void set_allocated_backup(::RAMCloud::ProtoBuf::ServerConfig_Backup* backup);

  // @@protoc_insertion_point(class_scope:RAMCloud.ProtoBuf.ServerConfig)
 private:
  inline void set_has_coordinator_locator();
  inline void clear_has_coordinator_locator();
  inline void set_has_local_locator();
  inline void clear_has_local_locator();
  inline void set_has_cluster_name();
  inline void clear_has_cluster_name();
  inline void set_has_services();
  inline void clear_has_services();
  inline void set_has_detect_failures();
  inline void clear_has_detect_failures();
  inline void set_has_pin_memory();
  inline void clear_has_pin_memory();
  inline void set_has_segment_size();
  inline void clear_has_segment_size();
  inline void set_has_seglet_size();
  inline void clear_has_seglet_size();
  inline void set_has_max_object_data_size();
  inline void clear_has_max_object_data_size();
  inline void set_has_max_object_key_size();
  inline void clear_has_max_object_key_size();
  inline void set_has_max_cores();
  inline void clear_has_max_cores();
  inline void set_has_master();
  inline void clear_has_master();
  inline void set_has_backup();
  inline void clear_has_backup();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr coordinator_locator_;
  ::google::protobuf::internal::ArenaStringPtr local_locator_;
  ::google::protobuf::internal::ArenaStringPtr cluster_name_;
  ::google::protobuf::internal::ArenaStringPtr services_;
  bool detect_failures_;
  bool pin_memory_;
  ::google::protobuf::uint32 segment_size_;
  ::google::protobuf::uint32 seglet_size_;
  ::google::protobuf::uint32 max_object_data_size_;
  ::google::protobuf::uint32 max_object_key_size_;
  ::google::protobuf::uint32 max_cores_;
  ::RAMCloud::ProtoBuf::ServerConfig_Master* master_;
  ::RAMCloud::ProtoBuf::ServerConfig_Backup* backup_;
  friend void  protobuf_AddDesc_ServerConfig_2eproto();
  friend void protobuf_AssignDesc_ServerConfig_2eproto();
  friend void protobuf_ShutdownFile_ServerConfig_2eproto();

  void InitAsDefaultInstance();
  static ServerConfig* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerConfig_Master

// required fixed64 log_bytes = 1;
inline bool ServerConfig_Master::has_log_bytes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerConfig_Master::set_has_log_bytes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerConfig_Master::clear_has_log_bytes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerConfig_Master::clear_log_bytes() {
  log_bytes_ = GOOGLE_ULONGLONG(0);
  clear_has_log_bytes();
}
inline ::google::protobuf::uint64 ServerConfig_Master::log_bytes() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.Master.log_bytes)
  return log_bytes_;
}
inline void ServerConfig_Master::set_log_bytes(::google::protobuf::uint64 value) {
  set_has_log_bytes();
  log_bytes_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.Master.log_bytes)
}

// required fixed64 hash_table_bytes = 2;
inline bool ServerConfig_Master::has_hash_table_bytes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerConfig_Master::set_has_hash_table_bytes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerConfig_Master::clear_has_hash_table_bytes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerConfig_Master::clear_hash_table_bytes() {
  hash_table_bytes_ = GOOGLE_ULONGLONG(0);
  clear_has_hash_table_bytes();
}
inline ::google::protobuf::uint64 ServerConfig_Master::hash_table_bytes() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.Master.hash_table_bytes)
  return hash_table_bytes_;
}
inline void ServerConfig_Master::set_hash_table_bytes(::google::protobuf::uint64 value) {
  set_has_hash_table_bytes();
  hash_table_bytes_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.Master.hash_table_bytes)
}

// required bool disable_log_cleaner = 3;
inline bool ServerConfig_Master::has_disable_log_cleaner() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerConfig_Master::set_has_disable_log_cleaner() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerConfig_Master::clear_has_disable_log_cleaner() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerConfig_Master::clear_disable_log_cleaner() {
  disable_log_cleaner_ = false;
  clear_has_disable_log_cleaner();
}
inline bool ServerConfig_Master::disable_log_cleaner() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.Master.disable_log_cleaner)
  return disable_log_cleaner_;
}
inline void ServerConfig_Master::set_disable_log_cleaner(bool value) {
  set_has_disable_log_cleaner();
  disable_log_cleaner_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.Master.disable_log_cleaner)
}

// required bool disable_in_memory_cleaning = 4;
inline bool ServerConfig_Master::has_disable_in_memory_cleaning() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServerConfig_Master::set_has_disable_in_memory_cleaning() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServerConfig_Master::clear_has_disable_in_memory_cleaning() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServerConfig_Master::clear_disable_in_memory_cleaning() {
  disable_in_memory_cleaning_ = false;
  clear_has_disable_in_memory_cleaning();
}
inline bool ServerConfig_Master::disable_in_memory_cleaning() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.Master.disable_in_memory_cleaning)
  return disable_in_memory_cleaning_;
}
inline void ServerConfig_Master::set_disable_in_memory_cleaning(bool value) {
  set_has_disable_in_memory_cleaning();
  disable_in_memory_cleaning_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.Master.disable_in_memory_cleaning)
}

// required double backup_disk_expansion_factor = 5;
inline bool ServerConfig_Master::has_backup_disk_expansion_factor() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ServerConfig_Master::set_has_backup_disk_expansion_factor() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ServerConfig_Master::clear_has_backup_disk_expansion_factor() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ServerConfig_Master::clear_backup_disk_expansion_factor() {
  backup_disk_expansion_factor_ = 0;
  clear_has_backup_disk_expansion_factor();
}
inline double ServerConfig_Master::backup_disk_expansion_factor() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.Master.backup_disk_expansion_factor)
  return backup_disk_expansion_factor_;
}
inline void ServerConfig_Master::set_backup_disk_expansion_factor(double value) {
  set_has_backup_disk_expansion_factor();
  backup_disk_expansion_factor_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.Master.backup_disk_expansion_factor)
}

// required fixed32 cleaner_write_cost_threshold = 6;
inline bool ServerConfig_Master::has_cleaner_write_cost_threshold() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ServerConfig_Master::set_has_cleaner_write_cost_threshold() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ServerConfig_Master::clear_has_cleaner_write_cost_threshold() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ServerConfig_Master::clear_cleaner_write_cost_threshold() {
  cleaner_write_cost_threshold_ = 0u;
  clear_has_cleaner_write_cost_threshold();
}
inline ::google::protobuf::uint32 ServerConfig_Master::cleaner_write_cost_threshold() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.Master.cleaner_write_cost_threshold)
  return cleaner_write_cost_threshold_;
}
inline void ServerConfig_Master::set_cleaner_write_cost_threshold(::google::protobuf::uint32 value) {
  set_has_cleaner_write_cost_threshold();
  cleaner_write_cost_threshold_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.Master.cleaner_write_cost_threshold)
}

// required string cleaner_balancer = 7;
inline bool ServerConfig_Master::has_cleaner_balancer() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ServerConfig_Master::set_has_cleaner_balancer() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ServerConfig_Master::clear_has_cleaner_balancer() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ServerConfig_Master::clear_cleaner_balancer() {
  cleaner_balancer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cleaner_balancer();
}
inline const ::std::string& ServerConfig_Master::cleaner_balancer() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.Master.cleaner_balancer)
  return cleaner_balancer_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerConfig_Master::set_cleaner_balancer(const ::std::string& value) {
  set_has_cleaner_balancer();
  cleaner_balancer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.Master.cleaner_balancer)
}
inline void ServerConfig_Master::set_cleaner_balancer(const char* value) {
  set_has_cleaner_balancer();
  cleaner_balancer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RAMCloud.ProtoBuf.ServerConfig.Master.cleaner_balancer)
}
inline void ServerConfig_Master::set_cleaner_balancer(const char* value, size_t size) {
  set_has_cleaner_balancer();
  cleaner_balancer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RAMCloud.ProtoBuf.ServerConfig.Master.cleaner_balancer)
}
inline ::std::string* ServerConfig_Master::mutable_cleaner_balancer() {
  set_has_cleaner_balancer();
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.ServerConfig.Master.cleaner_balancer)
  return cleaner_balancer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerConfig_Master::release_cleaner_balancer() {
  // @@protoc_insertion_point(field_release:RAMCloud.ProtoBuf.ServerConfig.Master.cleaner_balancer)
  clear_has_cleaner_balancer();
  return cleaner_balancer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerConfig_Master::set_allocated_cleaner_balancer(::std::string* cleaner_balancer) {
  if (cleaner_balancer != NULL) {
    set_has_cleaner_balancer();
  } else {
    clear_has_cleaner_balancer();
  }
  cleaner_balancer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cleaner_balancer);
  // @@protoc_insertion_point(field_set_allocated:RAMCloud.ProtoBuf.ServerConfig.Master.cleaner_balancer)
}

// required fixed32 cleaner_thread_count = 8;
inline bool ServerConfig_Master::has_cleaner_thread_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ServerConfig_Master::set_has_cleaner_thread_count() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ServerConfig_Master::clear_has_cleaner_thread_count() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ServerConfig_Master::clear_cleaner_thread_count() {
  cleaner_thread_count_ = 0u;
  clear_has_cleaner_thread_count();
}
inline ::google::protobuf::uint32 ServerConfig_Master::cleaner_thread_count() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.Master.cleaner_thread_count)
  return cleaner_thread_count_;
}
inline void ServerConfig_Master::set_cleaner_thread_count(::google::protobuf::uint32 value) {
  set_has_cleaner_thread_count();
  cleaner_thread_count_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.Master.cleaner_thread_count)
}

// required fixed32 num_replicas = 9;
inline bool ServerConfig_Master::has_num_replicas() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ServerConfig_Master::set_has_num_replicas() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ServerConfig_Master::clear_has_num_replicas() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ServerConfig_Master::clear_num_replicas() {
  num_replicas_ = 0u;
  clear_has_num_replicas();
}
inline ::google::protobuf::uint32 ServerConfig_Master::num_replicas() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.Master.num_replicas)
  return num_replicas_;
}
inline void ServerConfig_Master::set_num_replicas(::google::protobuf::uint32 value) {
  set_has_num_replicas();
  num_replicas_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.Master.num_replicas)
}

// required bool use_hugepages = 10;
inline bool ServerConfig_Master::has_use_hugepages() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ServerConfig_Master::set_has_use_hugepages() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ServerConfig_Master::clear_has_use_hugepages() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ServerConfig_Master::clear_use_hugepages() {
  use_hugepages_ = false;
  clear_has_use_hugepages();
}
inline bool ServerConfig_Master::use_hugepages() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.Master.use_hugepages)
  return use_hugepages_;
}
inline void ServerConfig_Master::set_use_hugepages(bool value) {
  set_has_use_hugepages();
  use_hugepages_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.Master.use_hugepages)
}

// required bool use_mincopysets = 11;
inline bool ServerConfig_Master::has_use_mincopysets() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ServerConfig_Master::set_has_use_mincopysets() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ServerConfig_Master::clear_has_use_mincopysets() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ServerConfig_Master::clear_use_mincopysets() {
  use_mincopysets_ = false;
  clear_has_use_mincopysets();
}
inline bool ServerConfig_Master::use_mincopysets() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.Master.use_mincopysets)
  return use_mincopysets_;
}
inline void ServerConfig_Master::set_use_mincopysets(bool value) {
  set_has_use_mincopysets();
  use_mincopysets_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.Master.use_mincopysets)
}

// required bool use_local_backup = 12;
inline bool ServerConfig_Master::has_use_local_backup() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ServerConfig_Master::set_has_use_local_backup() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ServerConfig_Master::clear_has_use_local_backup() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ServerConfig_Master::clear_use_local_backup() {
  use_local_backup_ = false;
  clear_has_use_local_backup();
}
inline bool ServerConfig_Master::use_local_backup() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.Master.use_local_backup)
  return use_local_backup_;
}
inline void ServerConfig_Master::set_use_local_backup(bool value) {
  set_has_use_local_backup();
  use_local_backup_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.Master.use_local_backup)
}

// required bool use_plusonebackup = 13;
inline bool ServerConfig_Master::has_use_plusonebackup() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ServerConfig_Master::set_has_use_plusonebackup() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ServerConfig_Master::clear_has_use_plusonebackup() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ServerConfig_Master::clear_use_plusonebackup() {
  use_plusonebackup_ = false;
  clear_has_use_plusonebackup();
}
inline bool ServerConfig_Master::use_plusonebackup() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.Master.use_plusonebackup)
  return use_plusonebackup_;
}
inline void ServerConfig_Master::set_use_plusonebackup(bool value) {
  set_has_use_plusonebackup();
  use_plusonebackup_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.Master.use_plusonebackup)
}

// -------------------------------------------------------------------

// ServerConfig_Backup

// required bool gc = 1;
inline bool ServerConfig_Backup::has_gc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerConfig_Backup::set_has_gc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerConfig_Backup::clear_has_gc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerConfig_Backup::clear_gc() {
  gc_ = false;
  clear_has_gc();
}
inline bool ServerConfig_Backup::gc() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.Backup.gc)
  return gc_;
}
inline void ServerConfig_Backup::set_gc(bool value) {
  set_has_gc();
  gc_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.Backup.gc)
}

// required bool in_memory = 2;
inline bool ServerConfig_Backup::has_in_memory() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerConfig_Backup::set_has_in_memory() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerConfig_Backup::clear_has_in_memory() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerConfig_Backup::clear_in_memory() {
  in_memory_ = false;
  clear_has_in_memory();
}
inline bool ServerConfig_Backup::in_memory() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.Backup.in_memory)
  return in_memory_;
}
inline void ServerConfig_Backup::set_in_memory(bool value) {
  set_has_in_memory();
  in_memory_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.Backup.in_memory)
}

// required fixed32 num_segment_frames = 3;
inline bool ServerConfig_Backup::has_num_segment_frames() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerConfig_Backup::set_has_num_segment_frames() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerConfig_Backup::clear_has_num_segment_frames() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerConfig_Backup::clear_num_segment_frames() {
  num_segment_frames_ = 0u;
  clear_has_num_segment_frames();
}
inline ::google::protobuf::uint32 ServerConfig_Backup::num_segment_frames() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.Backup.num_segment_frames)
  return num_segment_frames_;
}
inline void ServerConfig_Backup::set_num_segment_frames(::google::protobuf::uint32 value) {
  set_has_num_segment_frames();
  num_segment_frames_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.Backup.num_segment_frames)
}

// required fixed32 max_non_volatile_buffers = 4;
inline bool ServerConfig_Backup::has_max_non_volatile_buffers() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServerConfig_Backup::set_has_max_non_volatile_buffers() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServerConfig_Backup::clear_has_max_non_volatile_buffers() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServerConfig_Backup::clear_max_non_volatile_buffers() {
  max_non_volatile_buffers_ = 0u;
  clear_has_max_non_volatile_buffers();
}
inline ::google::protobuf::uint32 ServerConfig_Backup::max_non_volatile_buffers() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.Backup.max_non_volatile_buffers)
  return max_non_volatile_buffers_;
}
inline void ServerConfig_Backup::set_max_non_volatile_buffers(::google::protobuf::uint32 value) {
  set_has_max_non_volatile_buffers();
  max_non_volatile_buffers_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.Backup.max_non_volatile_buffers)
}

// required fixed32 max_recovery_replicas = 20;
inline bool ServerConfig_Backup::has_max_recovery_replicas() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ServerConfig_Backup::set_has_max_recovery_replicas() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ServerConfig_Backup::clear_has_max_recovery_replicas() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ServerConfig_Backup::clear_max_recovery_replicas() {
  max_recovery_replicas_ = 0u;
  clear_has_max_recovery_replicas();
}
inline ::google::protobuf::uint32 ServerConfig_Backup::max_recovery_replicas() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.Backup.max_recovery_replicas)
  return max_recovery_replicas_;
}
inline void ServerConfig_Backup::set_max_recovery_replicas(::google::protobuf::uint32 value) {
  set_has_max_recovery_replicas();
  max_recovery_replicas_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.Backup.max_recovery_replicas)
}

// optional string file = 5;
inline bool ServerConfig_Backup::has_file() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ServerConfig_Backup::set_has_file() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ServerConfig_Backup::clear_has_file() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ServerConfig_Backup::clear_file() {
  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file();
}
inline const ::std::string& ServerConfig_Backup::file() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.Backup.file)
  return file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerConfig_Backup::set_file(const ::std::string& value) {
  set_has_file();
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.Backup.file)
}
inline void ServerConfig_Backup::set_file(const char* value) {
  set_has_file();
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RAMCloud.ProtoBuf.ServerConfig.Backup.file)
}
inline void ServerConfig_Backup::set_file(const char* value, size_t size) {
  set_has_file();
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RAMCloud.ProtoBuf.ServerConfig.Backup.file)
}
inline ::std::string* ServerConfig_Backup::mutable_file() {
  set_has_file();
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.ServerConfig.Backup.file)
  return file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerConfig_Backup::release_file() {
  // @@protoc_insertion_point(field_release:RAMCloud.ProtoBuf.ServerConfig.Backup.file)
  clear_has_file();
  return file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerConfig_Backup::set_allocated_file(::std::string* file) {
  if (file != NULL) {
    set_has_file();
  } else {
    clear_has_file();
  }
  file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file);
  // @@protoc_insertion_point(field_set_allocated:RAMCloud.ProtoBuf.ServerConfig.Backup.file)
}

// required int32 strategy = 6;
inline bool ServerConfig_Backup::has_strategy() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ServerConfig_Backup::set_has_strategy() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ServerConfig_Backup::clear_has_strategy() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ServerConfig_Backup::clear_strategy() {
  strategy_ = 0;
  clear_has_strategy();
}
inline ::google::protobuf::int32 ServerConfig_Backup::strategy() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.Backup.strategy)
  return strategy_;
}
inline void ServerConfig_Backup::set_strategy(::google::protobuf::int32 value) {
  set_has_strategy();
  strategy_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.Backup.strategy)
}

// required fixed32 mock_speed = 7;
inline bool ServerConfig_Backup::has_mock_speed() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ServerConfig_Backup::set_has_mock_speed() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ServerConfig_Backup::clear_has_mock_speed() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ServerConfig_Backup::clear_mock_speed() {
  mock_speed_ = 0u;
  clear_has_mock_speed();
}
inline ::google::protobuf::uint32 ServerConfig_Backup::mock_speed() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.Backup.mock_speed)
  return mock_speed_;
}
inline void ServerConfig_Backup::set_mock_speed(::google::protobuf::uint32 value) {
  set_has_mock_speed();
  mock_speed_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.Backup.mock_speed)
}

// required fixed64 write_rate_limit = 8;
inline bool ServerConfig_Backup::has_write_rate_limit() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ServerConfig_Backup::set_has_write_rate_limit() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ServerConfig_Backup::clear_has_write_rate_limit() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ServerConfig_Backup::clear_write_rate_limit() {
  write_rate_limit_ = GOOGLE_ULONGLONG(0);
  clear_has_write_rate_limit();
}
inline ::google::protobuf::uint64 ServerConfig_Backup::write_rate_limit() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.Backup.write_rate_limit)
  return write_rate_limit_;
}
inline void ServerConfig_Backup::set_write_rate_limit(::google::protobuf::uint64 value) {
  set_has_write_rate_limit();
  write_rate_limit_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.Backup.write_rate_limit)
}

// -------------------------------------------------------------------

// ServerConfig

// required string coordinator_locator = 1;
inline bool ServerConfig::has_coordinator_locator() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerConfig::set_has_coordinator_locator() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerConfig::clear_has_coordinator_locator() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerConfig::clear_coordinator_locator() {
  coordinator_locator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_coordinator_locator();
}
inline const ::std::string& ServerConfig::coordinator_locator() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.coordinator_locator)
  return coordinator_locator_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerConfig::set_coordinator_locator(const ::std::string& value) {
  set_has_coordinator_locator();
  coordinator_locator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.coordinator_locator)
}
inline void ServerConfig::set_coordinator_locator(const char* value) {
  set_has_coordinator_locator();
  coordinator_locator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RAMCloud.ProtoBuf.ServerConfig.coordinator_locator)
}
inline void ServerConfig::set_coordinator_locator(const char* value, size_t size) {
  set_has_coordinator_locator();
  coordinator_locator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RAMCloud.ProtoBuf.ServerConfig.coordinator_locator)
}
inline ::std::string* ServerConfig::mutable_coordinator_locator() {
  set_has_coordinator_locator();
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.ServerConfig.coordinator_locator)
  return coordinator_locator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerConfig::release_coordinator_locator() {
  // @@protoc_insertion_point(field_release:RAMCloud.ProtoBuf.ServerConfig.coordinator_locator)
  clear_has_coordinator_locator();
  return coordinator_locator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerConfig::set_allocated_coordinator_locator(::std::string* coordinator_locator) {
  if (coordinator_locator != NULL) {
    set_has_coordinator_locator();
  } else {
    clear_has_coordinator_locator();
  }
  coordinator_locator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), coordinator_locator);
  // @@protoc_insertion_point(field_set_allocated:RAMCloud.ProtoBuf.ServerConfig.coordinator_locator)
}

// required string local_locator = 2;
inline bool ServerConfig::has_local_locator() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerConfig::set_has_local_locator() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerConfig::clear_has_local_locator() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerConfig::clear_local_locator() {
  local_locator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_local_locator();
}
inline const ::std::string& ServerConfig::local_locator() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.local_locator)
  return local_locator_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerConfig::set_local_locator(const ::std::string& value) {
  set_has_local_locator();
  local_locator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.local_locator)
}
inline void ServerConfig::set_local_locator(const char* value) {
  set_has_local_locator();
  local_locator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RAMCloud.ProtoBuf.ServerConfig.local_locator)
}
inline void ServerConfig::set_local_locator(const char* value, size_t size) {
  set_has_local_locator();
  local_locator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RAMCloud.ProtoBuf.ServerConfig.local_locator)
}
inline ::std::string* ServerConfig::mutable_local_locator() {
  set_has_local_locator();
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.ServerConfig.local_locator)
  return local_locator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerConfig::release_local_locator() {
  // @@protoc_insertion_point(field_release:RAMCloud.ProtoBuf.ServerConfig.local_locator)
  clear_has_local_locator();
  return local_locator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerConfig::set_allocated_local_locator(::std::string* local_locator) {
  if (local_locator != NULL) {
    set_has_local_locator();
  } else {
    clear_has_local_locator();
  }
  local_locator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), local_locator);
  // @@protoc_insertion_point(field_set_allocated:RAMCloud.ProtoBuf.ServerConfig.local_locator)
}

// required string cluster_name = 3;
inline bool ServerConfig::has_cluster_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerConfig::set_has_cluster_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerConfig::clear_has_cluster_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerConfig::clear_cluster_name() {
  cluster_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cluster_name();
}
inline const ::std::string& ServerConfig::cluster_name() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.cluster_name)
  return cluster_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerConfig::set_cluster_name(const ::std::string& value) {
  set_has_cluster_name();
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.cluster_name)
}
inline void ServerConfig::set_cluster_name(const char* value) {
  set_has_cluster_name();
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RAMCloud.ProtoBuf.ServerConfig.cluster_name)
}
inline void ServerConfig::set_cluster_name(const char* value, size_t size) {
  set_has_cluster_name();
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RAMCloud.ProtoBuf.ServerConfig.cluster_name)
}
inline ::std::string* ServerConfig::mutable_cluster_name() {
  set_has_cluster_name();
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.ServerConfig.cluster_name)
  return cluster_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerConfig::release_cluster_name() {
  // @@protoc_insertion_point(field_release:RAMCloud.ProtoBuf.ServerConfig.cluster_name)
  clear_has_cluster_name();
  return cluster_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerConfig::set_allocated_cluster_name(::std::string* cluster_name) {
  if (cluster_name != NULL) {
    set_has_cluster_name();
  } else {
    clear_has_cluster_name();
  }
  cluster_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_name);
  // @@protoc_insertion_point(field_set_allocated:RAMCloud.ProtoBuf.ServerConfig.cluster_name)
}

// required string services = 4;
inline bool ServerConfig::has_services() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServerConfig::set_has_services() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServerConfig::clear_has_services() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServerConfig::clear_services() {
  services_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_services();
}
inline const ::std::string& ServerConfig::services() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.services)
  return services_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerConfig::set_services(const ::std::string& value) {
  set_has_services();
  services_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.services)
}
inline void ServerConfig::set_services(const char* value) {
  set_has_services();
  services_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RAMCloud.ProtoBuf.ServerConfig.services)
}
inline void ServerConfig::set_services(const char* value, size_t size) {
  set_has_services();
  services_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RAMCloud.ProtoBuf.ServerConfig.services)
}
inline ::std::string* ServerConfig::mutable_services() {
  set_has_services();
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.ServerConfig.services)
  return services_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerConfig::release_services() {
  // @@protoc_insertion_point(field_release:RAMCloud.ProtoBuf.ServerConfig.services)
  clear_has_services();
  return services_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerConfig::set_allocated_services(::std::string* services) {
  if (services != NULL) {
    set_has_services();
  } else {
    clear_has_services();
  }
  services_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), services);
  // @@protoc_insertion_point(field_set_allocated:RAMCloud.ProtoBuf.ServerConfig.services)
}

// required bool detect_failures = 5;
inline bool ServerConfig::has_detect_failures() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ServerConfig::set_has_detect_failures() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ServerConfig::clear_has_detect_failures() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ServerConfig::clear_detect_failures() {
  detect_failures_ = false;
  clear_has_detect_failures();
}
inline bool ServerConfig::detect_failures() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.detect_failures)
  return detect_failures_;
}
inline void ServerConfig::set_detect_failures(bool value) {
  set_has_detect_failures();
  detect_failures_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.detect_failures)
}

// required bool pin_memory = 6;
inline bool ServerConfig::has_pin_memory() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ServerConfig::set_has_pin_memory() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ServerConfig::clear_has_pin_memory() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ServerConfig::clear_pin_memory() {
  pin_memory_ = false;
  clear_has_pin_memory();
}
inline bool ServerConfig::pin_memory() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.pin_memory)
  return pin_memory_;
}
inline void ServerConfig::set_pin_memory(bool value) {
  set_has_pin_memory();
  pin_memory_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.pin_memory)
}

// required fixed32 segment_size = 7;
inline bool ServerConfig::has_segment_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ServerConfig::set_has_segment_size() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ServerConfig::clear_has_segment_size() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ServerConfig::clear_segment_size() {
  segment_size_ = 0u;
  clear_has_segment_size();
}
inline ::google::protobuf::uint32 ServerConfig::segment_size() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.segment_size)
  return segment_size_;
}
inline void ServerConfig::set_segment_size(::google::protobuf::uint32 value) {
  set_has_segment_size();
  segment_size_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.segment_size)
}

// required fixed32 seglet_size = 8;
inline bool ServerConfig::has_seglet_size() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ServerConfig::set_has_seglet_size() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ServerConfig::clear_has_seglet_size() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ServerConfig::clear_seglet_size() {
  seglet_size_ = 0u;
  clear_has_seglet_size();
}
inline ::google::protobuf::uint32 ServerConfig::seglet_size() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.seglet_size)
  return seglet_size_;
}
inline void ServerConfig::set_seglet_size(::google::protobuf::uint32 value) {
  set_has_seglet_size();
  seglet_size_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.seglet_size)
}

// required fixed32 max_object_data_size = 9;
inline bool ServerConfig::has_max_object_data_size() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ServerConfig::set_has_max_object_data_size() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ServerConfig::clear_has_max_object_data_size() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ServerConfig::clear_max_object_data_size() {
  max_object_data_size_ = 0u;
  clear_has_max_object_data_size();
}
inline ::google::protobuf::uint32 ServerConfig::max_object_data_size() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.max_object_data_size)
  return max_object_data_size_;
}
inline void ServerConfig::set_max_object_data_size(::google::protobuf::uint32 value) {
  set_has_max_object_data_size();
  max_object_data_size_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.max_object_data_size)
}

// required fixed32 max_object_key_size = 10;
inline bool ServerConfig::has_max_object_key_size() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ServerConfig::set_has_max_object_key_size() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ServerConfig::clear_has_max_object_key_size() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ServerConfig::clear_max_object_key_size() {
  max_object_key_size_ = 0u;
  clear_has_max_object_key_size();
}
inline ::google::protobuf::uint32 ServerConfig::max_object_key_size() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.max_object_key_size)
  return max_object_key_size_;
}
inline void ServerConfig::set_max_object_key_size(::google::protobuf::uint32 value) {
  set_has_max_object_key_size();
  max_object_key_size_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.max_object_key_size)
}

// required fixed32 max_cores = 11;
inline bool ServerConfig::has_max_cores() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ServerConfig::set_has_max_cores() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ServerConfig::clear_has_max_cores() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ServerConfig::clear_max_cores() {
  max_cores_ = 0u;
  clear_has_max_cores();
}
inline ::google::protobuf::uint32 ServerConfig::max_cores() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.max_cores)
  return max_cores_;
}
inline void ServerConfig::set_max_cores(::google::protobuf::uint32 value) {
  set_has_max_cores();
  max_cores_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerConfig.max_cores)
}

// optional .RAMCloud.ProtoBuf.ServerConfig.Master master = 12;
inline bool ServerConfig::has_master() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ServerConfig::set_has_master() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ServerConfig::clear_has_master() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ServerConfig::clear_master() {
  if (master_ != NULL) master_->::RAMCloud::ProtoBuf::ServerConfig_Master::Clear();
  clear_has_master();
}
inline const ::RAMCloud::ProtoBuf::ServerConfig_Master& ServerConfig::master() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.master)
  return master_ != NULL ? *master_ : *default_instance_->master_;
}
inline ::RAMCloud::ProtoBuf::ServerConfig_Master* ServerConfig::mutable_master() {
  set_has_master();
  if (master_ == NULL) {
    master_ = new ::RAMCloud::ProtoBuf::ServerConfig_Master;
  }
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.ServerConfig.master)
  return master_;
}
inline ::RAMCloud::ProtoBuf::ServerConfig_Master* ServerConfig::release_master() {
  // @@protoc_insertion_point(field_release:RAMCloud.ProtoBuf.ServerConfig.master)
  clear_has_master();
  ::RAMCloud::ProtoBuf::ServerConfig_Master* temp = master_;
  master_ = NULL;
  return temp;
}
inline void ServerConfig::set_allocated_master(::RAMCloud::ProtoBuf::ServerConfig_Master* master) {
  delete master_;
  master_ = master;
  if (master) {
    set_has_master();
  } else {
    clear_has_master();
  }
  // @@protoc_insertion_point(field_set_allocated:RAMCloud.ProtoBuf.ServerConfig.master)
}

// optional .RAMCloud.ProtoBuf.ServerConfig.Backup backup = 13;
inline bool ServerConfig::has_backup() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ServerConfig::set_has_backup() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ServerConfig::clear_has_backup() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ServerConfig::clear_backup() {
  if (backup_ != NULL) backup_->::RAMCloud::ProtoBuf::ServerConfig_Backup::Clear();
  clear_has_backup();
}
inline const ::RAMCloud::ProtoBuf::ServerConfig_Backup& ServerConfig::backup() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerConfig.backup)
  return backup_ != NULL ? *backup_ : *default_instance_->backup_;
}
inline ::RAMCloud::ProtoBuf::ServerConfig_Backup* ServerConfig::mutable_backup() {
  set_has_backup();
  if (backup_ == NULL) {
    backup_ = new ::RAMCloud::ProtoBuf::ServerConfig_Backup;
  }
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.ServerConfig.backup)
  return backup_;
}
inline ::RAMCloud::ProtoBuf::ServerConfig_Backup* ServerConfig::release_backup() {
  // @@protoc_insertion_point(field_release:RAMCloud.ProtoBuf.ServerConfig.backup)
  clear_has_backup();
  ::RAMCloud::ProtoBuf::ServerConfig_Backup* temp = backup_;
  backup_ = NULL;
  return temp;
}
inline void ServerConfig::set_allocated_backup(::RAMCloud::ProtoBuf::ServerConfig_Backup* backup) {
  delete backup_;
  backup_ = backup;
  if (backup) {
    set_has_backup();
  } else {
    clear_has_backup();
  }
  // @@protoc_insertion_point(field_set_allocated:RAMCloud.ProtoBuf.ServerConfig.backup)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoBuf
}  // namespace RAMCloud

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ServerConfig_2eproto__INCLUDED
// RAMCloud pragma [GCCWARN=0]
