// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Histogram.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Histogram.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace RAMCloud {
namespace ProtoBuf {

namespace {

const ::google::protobuf::Descriptor* Histogram_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Histogram_reflection_ = NULL;
const ::google::protobuf::Descriptor* Histogram_Bucket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Histogram_Bucket_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Histogram_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_Histogram_2eproto() {
  protobuf_AddDesc_Histogram_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Histogram.proto");
  GOOGLE_CHECK(file != NULL);
  Histogram_descriptor_ = file->message_type(0);
  static const int Histogram_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Histogram, num_buckets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Histogram, bucket_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Histogram, bucket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Histogram, sample_sum_high_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Histogram, sample_sum_low_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Histogram, outliers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Histogram, max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Histogram, min_),
  };
  Histogram_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Histogram_descriptor_,
      Histogram::default_instance_,
      Histogram_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Histogram, _has_bits_[0]),
      -1,
      -1,
      sizeof(Histogram),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Histogram, _internal_metadata_),
      -1);
  Histogram_Bucket_descriptor_ = Histogram_descriptor_->nested_type(0);
  static const int Histogram_Bucket_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Histogram_Bucket, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Histogram_Bucket, count_),
  };
  Histogram_Bucket_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Histogram_Bucket_descriptor_,
      Histogram_Bucket::default_instance_,
      Histogram_Bucket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Histogram_Bucket, _has_bits_[0]),
      -1,
      -1,
      sizeof(Histogram_Bucket),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Histogram_Bucket, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Histogram_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Histogram_descriptor_, &Histogram::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Histogram_Bucket_descriptor_, &Histogram_Bucket::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Histogram_2eproto() {
  delete Histogram::default_instance_;
  delete Histogram_reflection_;
  delete Histogram_Bucket::default_instance_;
  delete Histogram_Bucket_reflection_;
}

void protobuf_AddDesc_Histogram_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_Histogram_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017Histogram.proto\022\021RAMCloud.ProtoBuf\"\360\001\n"
    "\tHistogram\022\023\n\013num_buckets\030\001 \002(\006\022\024\n\014bucke"
    "t_width\030\002 \002(\006\0223\n\006bucket\030\003 \003(\0132#.RAMCloud"
    ".ProtoBuf.Histogram.Bucket\022\027\n\017sample_sum"
    "_high\030\004 \002(\006\022\026\n\016sample_sum_low\030\005 \002(\006\022\020\n\010o"
    "utliers\030\006 \002(\006\022\013\n\003max\030\007 \002(\006\022\013\n\003min\030\010 \002(\006\032"
    "&\n\006Bucket\022\r\n\005index\030\001 \002(\006\022\r\n\005count\030\002 \002(\006", 279);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Histogram.proto", &protobuf_RegisterTypes);
  Histogram::default_instance_ = new Histogram();
  Histogram_Bucket::default_instance_ = new Histogram_Bucket();
  Histogram::default_instance_->InitAsDefaultInstance();
  Histogram_Bucket::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Histogram_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Histogram_2eproto {
  StaticDescriptorInitializer_Histogram_2eproto() {
    protobuf_AddDesc_Histogram_2eproto();
  }
} static_descriptor_initializer_Histogram_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Histogram_Bucket::kIndexFieldNumber;
const int Histogram_Bucket::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Histogram_Bucket::Histogram_Bucket()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RAMCloud.ProtoBuf.Histogram.Bucket)
}

void Histogram_Bucket::InitAsDefaultInstance() {
}

Histogram_Bucket::Histogram_Bucket(const Histogram_Bucket& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RAMCloud.ProtoBuf.Histogram.Bucket)
}

void Histogram_Bucket::SharedCtor() {
  _cached_size_ = 0;
  index_ = GOOGLE_ULONGLONG(0);
  count_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Histogram_Bucket::~Histogram_Bucket() {
  // @@protoc_insertion_point(destructor:RAMCloud.ProtoBuf.Histogram.Bucket)
  SharedDtor();
}

void Histogram_Bucket::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Histogram_Bucket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Histogram_Bucket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Histogram_Bucket_descriptor_;
}

const Histogram_Bucket& Histogram_Bucket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Histogram_2eproto();
  return *default_instance_;
}

Histogram_Bucket* Histogram_Bucket::default_instance_ = NULL;

Histogram_Bucket* Histogram_Bucket::New(::google::protobuf::Arena* arena) const {
  Histogram_Bucket* n = new Histogram_Bucket;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Histogram_Bucket::Clear() {
// @@protoc_insertion_point(message_clear_start:RAMCloud.ProtoBuf.Histogram.Bucket)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Histogram_Bucket, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Histogram_Bucket*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(index_, count_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Histogram_Bucket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RAMCloud.ProtoBuf.Histogram.Bucket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 index = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_count;
        break;
      }

      // required fixed64 count = 2;
      case 2: {
        if (tag == 17) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RAMCloud.ProtoBuf.Histogram.Bucket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RAMCloud.ProtoBuf.Histogram.Bucket)
  return false;
#undef DO_
}

void Histogram_Bucket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RAMCloud.ProtoBuf.Histogram.Bucket)
  // required fixed64 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->index(), output);
  }

  // required fixed64 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RAMCloud.ProtoBuf.Histogram.Bucket)
}

::google::protobuf::uint8* Histogram_Bucket::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RAMCloud.ProtoBuf.Histogram.Bucket)
  // required fixed64 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->index(), target);
  }

  // required fixed64 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RAMCloud.ProtoBuf.Histogram.Bucket)
  return target;
}

int Histogram_Bucket::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RAMCloud.ProtoBuf.Histogram.Bucket)
  int total_size = 0;

  if (has_index()) {
    // required fixed64 index = 1;
    total_size += 1 + 8;
  }

  if (has_count()) {
    // required fixed64 count = 2;
    total_size += 1 + 8;
  }

  return total_size;
}
int Histogram_Bucket::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:RAMCloud.ProtoBuf.Histogram.Bucket)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required fixed64 index = 1;
    total_size += 1 + 8;

    // required fixed64 count = 2;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Histogram_Bucket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RAMCloud.ProtoBuf.Histogram.Bucket)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Histogram_Bucket* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Histogram_Bucket>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RAMCloud.ProtoBuf.Histogram.Bucket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RAMCloud.ProtoBuf.Histogram.Bucket)
    MergeFrom(*source);
  }
}

void Histogram_Bucket::MergeFrom(const Histogram_Bucket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RAMCloud.ProtoBuf.Histogram.Bucket)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Histogram_Bucket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RAMCloud.ProtoBuf.Histogram.Bucket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Histogram_Bucket::CopyFrom(const Histogram_Bucket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RAMCloud.ProtoBuf.Histogram.Bucket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Histogram_Bucket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Histogram_Bucket::Swap(Histogram_Bucket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Histogram_Bucket::InternalSwap(Histogram_Bucket* other) {
  std::swap(index_, other->index_);
  std::swap(count_, other->count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Histogram_Bucket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Histogram_Bucket_descriptor_;
  metadata.reflection = Histogram_Bucket_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Histogram::kNumBucketsFieldNumber;
const int Histogram::kBucketWidthFieldNumber;
const int Histogram::kBucketFieldNumber;
const int Histogram::kSampleSumHighFieldNumber;
const int Histogram::kSampleSumLowFieldNumber;
const int Histogram::kOutliersFieldNumber;
const int Histogram::kMaxFieldNumber;
const int Histogram::kMinFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Histogram::Histogram()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RAMCloud.ProtoBuf.Histogram)
}

void Histogram::InitAsDefaultInstance() {
}

Histogram::Histogram(const Histogram& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RAMCloud.ProtoBuf.Histogram)
}

void Histogram::SharedCtor() {
  _cached_size_ = 0;
  num_buckets_ = GOOGLE_ULONGLONG(0);
  bucket_width_ = GOOGLE_ULONGLONG(0);
  sample_sum_high_ = GOOGLE_ULONGLONG(0);
  sample_sum_low_ = GOOGLE_ULONGLONG(0);
  outliers_ = GOOGLE_ULONGLONG(0);
  max_ = GOOGLE_ULONGLONG(0);
  min_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Histogram::~Histogram() {
  // @@protoc_insertion_point(destructor:RAMCloud.ProtoBuf.Histogram)
  SharedDtor();
}

void Histogram::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Histogram::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Histogram::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Histogram_descriptor_;
}

const Histogram& Histogram::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Histogram_2eproto();
  return *default_instance_;
}

Histogram* Histogram::default_instance_ = NULL;

Histogram* Histogram::New(::google::protobuf::Arena* arena) const {
  Histogram* n = new Histogram;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Histogram::Clear() {
// @@protoc_insertion_point(message_clear_start:RAMCloud.ProtoBuf.Histogram)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Histogram, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Histogram*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 251u) {
    ZR_(num_buckets_, bucket_width_);
    ZR_(sample_sum_high_, min_);
  }

#undef ZR_HELPER_
#undef ZR_

  bucket_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Histogram::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RAMCloud.ProtoBuf.Histogram)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 num_buckets = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &num_buckets_)));
          set_has_num_buckets();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_bucket_width;
        break;
      }

      // required fixed64 bucket_width = 2;
      case 2: {
        if (tag == 17) {
         parse_bucket_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &bucket_width_)));
          set_has_bucket_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_bucket;
        break;
      }

      // repeated .RAMCloud.ProtoBuf.Histogram.Bucket bucket = 3;
      case 3: {
        if (tag == 26) {
         parse_bucket:
          DO_(input->IncrementRecursionDepth());
         parse_loop_bucket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_bucket()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_bucket;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(33)) goto parse_sample_sum_high;
        break;
      }

      // required fixed64 sample_sum_high = 4;
      case 4: {
        if (tag == 33) {
         parse_sample_sum_high:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &sample_sum_high_)));
          set_has_sample_sum_high();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_sample_sum_low;
        break;
      }

      // required fixed64 sample_sum_low = 5;
      case 5: {
        if (tag == 41) {
         parse_sample_sum_low:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &sample_sum_low_)));
          set_has_sample_sum_low();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_outliers;
        break;
      }

      // required fixed64 outliers = 6;
      case 6: {
        if (tag == 49) {
         parse_outliers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &outliers_)));
          set_has_outliers();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_max;
        break;
      }

      // required fixed64 max = 7;
      case 7: {
        if (tag == 57) {
         parse_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &max_)));
          set_has_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_min;
        break;
      }

      // required fixed64 min = 8;
      case 8: {
        if (tag == 65) {
         parse_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &min_)));
          set_has_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RAMCloud.ProtoBuf.Histogram)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RAMCloud.ProtoBuf.Histogram)
  return false;
#undef DO_
}

void Histogram::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RAMCloud.ProtoBuf.Histogram)
  // required fixed64 num_buckets = 1;
  if (has_num_buckets()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->num_buckets(), output);
  }

  // required fixed64 bucket_width = 2;
  if (has_bucket_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->bucket_width(), output);
  }

  // repeated .RAMCloud.ProtoBuf.Histogram.Bucket bucket = 3;
  for (unsigned int i = 0, n = this->bucket_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->bucket(i), output);
  }

  // required fixed64 sample_sum_high = 4;
  if (has_sample_sum_high()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->sample_sum_high(), output);
  }

  // required fixed64 sample_sum_low = 5;
  if (has_sample_sum_low()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->sample_sum_low(), output);
  }

  // required fixed64 outliers = 6;
  if (has_outliers()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->outliers(), output);
  }

  // required fixed64 max = 7;
  if (has_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->max(), output);
  }

  // required fixed64 min = 8;
  if (has_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(8, this->min(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RAMCloud.ProtoBuf.Histogram)
}

::google::protobuf::uint8* Histogram::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RAMCloud.ProtoBuf.Histogram)
  // required fixed64 num_buckets = 1;
  if (has_num_buckets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->num_buckets(), target);
  }

  // required fixed64 bucket_width = 2;
  if (has_bucket_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->bucket_width(), target);
  }

  // repeated .RAMCloud.ProtoBuf.Histogram.Bucket bucket = 3;
  for (unsigned int i = 0, n = this->bucket_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->bucket(i), false, target);
  }

  // required fixed64 sample_sum_high = 4;
  if (has_sample_sum_high()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->sample_sum_high(), target);
  }

  // required fixed64 sample_sum_low = 5;
  if (has_sample_sum_low()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->sample_sum_low(), target);
  }

  // required fixed64 outliers = 6;
  if (has_outliers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->outliers(), target);
  }

  // required fixed64 max = 7;
  if (has_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->max(), target);
  }

  // required fixed64 min = 8;
  if (has_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(8, this->min(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RAMCloud.ProtoBuf.Histogram)
  return target;
}

int Histogram::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RAMCloud.ProtoBuf.Histogram)
  int total_size = 0;

  if (has_num_buckets()) {
    // required fixed64 num_buckets = 1;
    total_size += 1 + 8;
  }

  if (has_bucket_width()) {
    // required fixed64 bucket_width = 2;
    total_size += 1 + 8;
  }

  if (has_sample_sum_high()) {
    // required fixed64 sample_sum_high = 4;
    total_size += 1 + 8;
  }

  if (has_sample_sum_low()) {
    // required fixed64 sample_sum_low = 5;
    total_size += 1 + 8;
  }

  if (has_outliers()) {
    // required fixed64 outliers = 6;
    total_size += 1 + 8;
  }

  if (has_max()) {
    // required fixed64 max = 7;
    total_size += 1 + 8;
  }

  if (has_min()) {
    // required fixed64 min = 8;
    total_size += 1 + 8;
  }

  return total_size;
}
int Histogram::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:RAMCloud.ProtoBuf.Histogram)
  int total_size = 0;

  if (((_has_bits_[0] & 0x000000fb) ^ 0x000000fb) == 0) {  // All required fields are present.
    // required fixed64 num_buckets = 1;
    total_size += 1 + 8;

    // required fixed64 bucket_width = 2;
    total_size += 1 + 8;

    // required fixed64 sample_sum_high = 4;
    total_size += 1 + 8;

    // required fixed64 sample_sum_low = 5;
    total_size += 1 + 8;

    // required fixed64 outliers = 6;
    total_size += 1 + 8;

    // required fixed64 max = 7;
    total_size += 1 + 8;

    // required fixed64 min = 8;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .RAMCloud.ProtoBuf.Histogram.Bucket bucket = 3;
  total_size += 1 * this->bucket_size();
  for (int i = 0; i < this->bucket_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bucket(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Histogram::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RAMCloud.ProtoBuf.Histogram)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Histogram* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Histogram>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RAMCloud.ProtoBuf.Histogram)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RAMCloud.ProtoBuf.Histogram)
    MergeFrom(*source);
  }
}

void Histogram::MergeFrom(const Histogram& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RAMCloud.ProtoBuf.Histogram)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  bucket_.MergeFrom(from.bucket_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_buckets()) {
      set_num_buckets(from.num_buckets());
    }
    if (from.has_bucket_width()) {
      set_bucket_width(from.bucket_width());
    }
    if (from.has_sample_sum_high()) {
      set_sample_sum_high(from.sample_sum_high());
    }
    if (from.has_sample_sum_low()) {
      set_sample_sum_low(from.sample_sum_low());
    }
    if (from.has_outliers()) {
      set_outliers(from.outliers());
    }
    if (from.has_max()) {
      set_max(from.max());
    }
    if (from.has_min()) {
      set_min(from.min());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Histogram::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RAMCloud.ProtoBuf.Histogram)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Histogram::CopyFrom(const Histogram& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RAMCloud.ProtoBuf.Histogram)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Histogram::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000fb) != 0x000000fb) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->bucket())) return false;
  return true;
}

void Histogram::Swap(Histogram* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Histogram::InternalSwap(Histogram* other) {
  std::swap(num_buckets_, other->num_buckets_);
  std::swap(bucket_width_, other->bucket_width_);
  bucket_.UnsafeArenaSwap(&other->bucket_);
  std::swap(sample_sum_high_, other->sample_sum_high_);
  std::swap(sample_sum_low_, other->sample_sum_low_);
  std::swap(outliers_, other->outliers_);
  std::swap(max_, other->max_);
  std::swap(min_, other->min_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Histogram::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Histogram_descriptor_;
  metadata.reflection = Histogram_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Histogram_Bucket

// required fixed64 index = 1;
bool Histogram_Bucket::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Histogram_Bucket::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
void Histogram_Bucket::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
void Histogram_Bucket::clear_index() {
  index_ = GOOGLE_ULONGLONG(0);
  clear_has_index();
}
 ::google::protobuf::uint64 Histogram_Bucket::index() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Histogram.Bucket.index)
  return index_;
}
 void Histogram_Bucket::set_index(::google::protobuf::uint64 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Histogram.Bucket.index)
}

// required fixed64 count = 2;
bool Histogram_Bucket::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Histogram_Bucket::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
void Histogram_Bucket::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void Histogram_Bucket::clear_count() {
  count_ = GOOGLE_ULONGLONG(0);
  clear_has_count();
}
 ::google::protobuf::uint64 Histogram_Bucket::count() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Histogram.Bucket.count)
  return count_;
}
 void Histogram_Bucket::set_count(::google::protobuf::uint64 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Histogram.Bucket.count)
}

// -------------------------------------------------------------------

// Histogram

// required fixed64 num_buckets = 1;
bool Histogram::has_num_buckets() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Histogram::set_has_num_buckets() {
  _has_bits_[0] |= 0x00000001u;
}
void Histogram::clear_has_num_buckets() {
  _has_bits_[0] &= ~0x00000001u;
}
void Histogram::clear_num_buckets() {
  num_buckets_ = GOOGLE_ULONGLONG(0);
  clear_has_num_buckets();
}
 ::google::protobuf::uint64 Histogram::num_buckets() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Histogram.num_buckets)
  return num_buckets_;
}
 void Histogram::set_num_buckets(::google::protobuf::uint64 value) {
  set_has_num_buckets();
  num_buckets_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Histogram.num_buckets)
}

// required fixed64 bucket_width = 2;
bool Histogram::has_bucket_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Histogram::set_has_bucket_width() {
  _has_bits_[0] |= 0x00000002u;
}
void Histogram::clear_has_bucket_width() {
  _has_bits_[0] &= ~0x00000002u;
}
void Histogram::clear_bucket_width() {
  bucket_width_ = GOOGLE_ULONGLONG(0);
  clear_has_bucket_width();
}
 ::google::protobuf::uint64 Histogram::bucket_width() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Histogram.bucket_width)
  return bucket_width_;
}
 void Histogram::set_bucket_width(::google::protobuf::uint64 value) {
  set_has_bucket_width();
  bucket_width_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Histogram.bucket_width)
}

// repeated .RAMCloud.ProtoBuf.Histogram.Bucket bucket = 3;
int Histogram::bucket_size() const {
  return bucket_.size();
}
void Histogram::clear_bucket() {
  bucket_.Clear();
}
const ::RAMCloud::ProtoBuf::Histogram_Bucket& Histogram::bucket(int index) const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Histogram.bucket)
  return bucket_.Get(index);
}
::RAMCloud::ProtoBuf::Histogram_Bucket* Histogram::mutable_bucket(int index) {
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.Histogram.bucket)
  return bucket_.Mutable(index);
}
::RAMCloud::ProtoBuf::Histogram_Bucket* Histogram::add_bucket() {
  // @@protoc_insertion_point(field_add:RAMCloud.ProtoBuf.Histogram.bucket)
  return bucket_.Add();
}
::google::protobuf::RepeatedPtrField< ::RAMCloud::ProtoBuf::Histogram_Bucket >*
Histogram::mutable_bucket() {
  // @@protoc_insertion_point(field_mutable_list:RAMCloud.ProtoBuf.Histogram.bucket)
  return &bucket_;
}
const ::google::protobuf::RepeatedPtrField< ::RAMCloud::ProtoBuf::Histogram_Bucket >&
Histogram::bucket() const {
  // @@protoc_insertion_point(field_list:RAMCloud.ProtoBuf.Histogram.bucket)
  return bucket_;
}

// required fixed64 sample_sum_high = 4;
bool Histogram::has_sample_sum_high() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Histogram::set_has_sample_sum_high() {
  _has_bits_[0] |= 0x00000008u;
}
void Histogram::clear_has_sample_sum_high() {
  _has_bits_[0] &= ~0x00000008u;
}
void Histogram::clear_sample_sum_high() {
  sample_sum_high_ = GOOGLE_ULONGLONG(0);
  clear_has_sample_sum_high();
}
 ::google::protobuf::uint64 Histogram::sample_sum_high() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Histogram.sample_sum_high)
  return sample_sum_high_;
}
 void Histogram::set_sample_sum_high(::google::protobuf::uint64 value) {
  set_has_sample_sum_high();
  sample_sum_high_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Histogram.sample_sum_high)
}

// required fixed64 sample_sum_low = 5;
bool Histogram::has_sample_sum_low() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Histogram::set_has_sample_sum_low() {
  _has_bits_[0] |= 0x00000010u;
}
void Histogram::clear_has_sample_sum_low() {
  _has_bits_[0] &= ~0x00000010u;
}
void Histogram::clear_sample_sum_low() {
  sample_sum_low_ = GOOGLE_ULONGLONG(0);
  clear_has_sample_sum_low();
}
 ::google::protobuf::uint64 Histogram::sample_sum_low() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Histogram.sample_sum_low)
  return sample_sum_low_;
}
 void Histogram::set_sample_sum_low(::google::protobuf::uint64 value) {
  set_has_sample_sum_low();
  sample_sum_low_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Histogram.sample_sum_low)
}

// required fixed64 outliers = 6;
bool Histogram::has_outliers() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Histogram::set_has_outliers() {
  _has_bits_[0] |= 0x00000020u;
}
void Histogram::clear_has_outliers() {
  _has_bits_[0] &= ~0x00000020u;
}
void Histogram::clear_outliers() {
  outliers_ = GOOGLE_ULONGLONG(0);
  clear_has_outliers();
}
 ::google::protobuf::uint64 Histogram::outliers() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Histogram.outliers)
  return outliers_;
}
 void Histogram::set_outliers(::google::protobuf::uint64 value) {
  set_has_outliers();
  outliers_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Histogram.outliers)
}

// required fixed64 max = 7;
bool Histogram::has_max() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Histogram::set_has_max() {
  _has_bits_[0] |= 0x00000040u;
}
void Histogram::clear_has_max() {
  _has_bits_[0] &= ~0x00000040u;
}
void Histogram::clear_max() {
  max_ = GOOGLE_ULONGLONG(0);
  clear_has_max();
}
 ::google::protobuf::uint64 Histogram::max() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Histogram.max)
  return max_;
}
 void Histogram::set_max(::google::protobuf::uint64 value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Histogram.max)
}

// required fixed64 min = 8;
bool Histogram::has_min() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Histogram::set_has_min() {
  _has_bits_[0] |= 0x00000080u;
}
void Histogram::clear_has_min() {
  _has_bits_[0] &= ~0x00000080u;
}
void Histogram::clear_min() {
  min_ = GOOGLE_ULONGLONG(0);
  clear_has_min();
}
 ::google::protobuf::uint64 Histogram::min() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Histogram.min)
  return min_;
}
 void Histogram::set_min(::google::protobuf::uint64 value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Histogram.min)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoBuf
}  // namespace RAMCloud

// @@protoc_insertion_point(global_scope)
// RAMCloud pragma [GCCWARN=0]
