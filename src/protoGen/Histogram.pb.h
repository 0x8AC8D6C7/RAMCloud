// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Histogram.proto

#ifndef PROTOBUF_Histogram_2eproto__INCLUDED
#define PROTOBUF_Histogram_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace RAMCloud {
namespace ProtoBuf {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_Histogram_2eproto();
void protobuf_AssignDesc_Histogram_2eproto();
void protobuf_ShutdownFile_Histogram_2eproto();

class Histogram;
class Histogram_Bucket;

// ===================================================================

class Histogram_Bucket : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RAMCloud.ProtoBuf.Histogram.Bucket) */ {
 public:
  Histogram_Bucket();
  virtual ~Histogram_Bucket();

  Histogram_Bucket(const Histogram_Bucket& from);

  inline Histogram_Bucket& operator=(const Histogram_Bucket& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Histogram_Bucket& default_instance();

  void Swap(Histogram_Bucket* other);

  // implements Message ----------------------------------------------

  inline Histogram_Bucket* New() const { return New(NULL); }

  Histogram_Bucket* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Histogram_Bucket& from);
  void MergeFrom(const Histogram_Bucket& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Histogram_Bucket* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 index = 1;
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::uint64 index() const;
  void set_index(::google::protobuf::uint64 value);

  // required fixed64 count = 2;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::uint64 count() const;
  void set_count(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:RAMCloud.ProtoBuf.Histogram.Bucket)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_count();
  inline void clear_has_count();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 index_;
  ::google::protobuf::uint64 count_;
  friend void  protobuf_AddDesc_Histogram_2eproto();
  friend void protobuf_AssignDesc_Histogram_2eproto();
  friend void protobuf_ShutdownFile_Histogram_2eproto();

  void InitAsDefaultInstance();
  static Histogram_Bucket* default_instance_;
};
// -------------------------------------------------------------------

class Histogram : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RAMCloud.ProtoBuf.Histogram) */ {
 public:
  Histogram();
  virtual ~Histogram();

  Histogram(const Histogram& from);

  inline Histogram& operator=(const Histogram& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Histogram& default_instance();

  void Swap(Histogram* other);

  // implements Message ----------------------------------------------

  inline Histogram* New() const { return New(NULL); }

  Histogram* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Histogram& from);
  void MergeFrom(const Histogram& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Histogram* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Histogram_Bucket Bucket;

  // accessors -------------------------------------------------------

  // required fixed64 num_buckets = 1;
  bool has_num_buckets() const;
  void clear_num_buckets();
  static const int kNumBucketsFieldNumber = 1;
  ::google::protobuf::uint64 num_buckets() const;
  void set_num_buckets(::google::protobuf::uint64 value);

  // required fixed64 bucket_width = 2;
  bool has_bucket_width() const;
  void clear_bucket_width();
  static const int kBucketWidthFieldNumber = 2;
  ::google::protobuf::uint64 bucket_width() const;
  void set_bucket_width(::google::protobuf::uint64 value);

  // repeated .RAMCloud.ProtoBuf.Histogram.Bucket bucket = 3;
  int bucket_size() const;
  void clear_bucket();
  static const int kBucketFieldNumber = 3;
  const ::RAMCloud::ProtoBuf::Histogram_Bucket& bucket(int index) const;
  ::RAMCloud::ProtoBuf::Histogram_Bucket* mutable_bucket(int index);
  ::RAMCloud::ProtoBuf::Histogram_Bucket* add_bucket();
  ::google::protobuf::RepeatedPtrField< ::RAMCloud::ProtoBuf::Histogram_Bucket >*
      mutable_bucket();
  const ::google::protobuf::RepeatedPtrField< ::RAMCloud::ProtoBuf::Histogram_Bucket >&
      bucket() const;

  // required fixed64 sample_sum_high = 4;
  bool has_sample_sum_high() const;
  void clear_sample_sum_high();
  static const int kSampleSumHighFieldNumber = 4;
  ::google::protobuf::uint64 sample_sum_high() const;
  void set_sample_sum_high(::google::protobuf::uint64 value);

  // required fixed64 sample_sum_low = 5;
  bool has_sample_sum_low() const;
  void clear_sample_sum_low();
  static const int kSampleSumLowFieldNumber = 5;
  ::google::protobuf::uint64 sample_sum_low() const;
  void set_sample_sum_low(::google::protobuf::uint64 value);

  // required fixed64 outliers = 6;
  bool has_outliers() const;
  void clear_outliers();
  static const int kOutliersFieldNumber = 6;
  ::google::protobuf::uint64 outliers() const;
  void set_outliers(::google::protobuf::uint64 value);

  // required fixed64 max = 7;
  bool has_max() const;
  void clear_max();
  static const int kMaxFieldNumber = 7;
  ::google::protobuf::uint64 max() const;
  void set_max(::google::protobuf::uint64 value);

  // required fixed64 min = 8;
  bool has_min() const;
  void clear_min();
  static const int kMinFieldNumber = 8;
  ::google::protobuf::uint64 min() const;
  void set_min(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:RAMCloud.ProtoBuf.Histogram)
 private:
  inline void set_has_num_buckets();
  inline void clear_has_num_buckets();
  inline void set_has_bucket_width();
  inline void clear_has_bucket_width();
  inline void set_has_sample_sum_high();
  inline void clear_has_sample_sum_high();
  inline void set_has_sample_sum_low();
  inline void clear_has_sample_sum_low();
  inline void set_has_outliers();
  inline void clear_has_outliers();
  inline void set_has_max();
  inline void clear_has_max();
  inline void set_has_min();
  inline void clear_has_min();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 num_buckets_;
  ::google::protobuf::uint64 bucket_width_;
  ::google::protobuf::RepeatedPtrField< ::RAMCloud::ProtoBuf::Histogram_Bucket > bucket_;
  ::google::protobuf::uint64 sample_sum_high_;
  ::google::protobuf::uint64 sample_sum_low_;
  ::google::protobuf::uint64 outliers_;
  ::google::protobuf::uint64 max_;
  ::google::protobuf::uint64 min_;
  friend void  protobuf_AddDesc_Histogram_2eproto();
  friend void protobuf_AssignDesc_Histogram_2eproto();
  friend void protobuf_ShutdownFile_Histogram_2eproto();

  void InitAsDefaultInstance();
  static Histogram* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Histogram_Bucket

// required fixed64 index = 1;
inline bool Histogram_Bucket::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Histogram_Bucket::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Histogram_Bucket::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Histogram_Bucket::clear_index() {
  index_ = GOOGLE_ULONGLONG(0);
  clear_has_index();
}
inline ::google::protobuf::uint64 Histogram_Bucket::index() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Histogram.Bucket.index)
  return index_;
}
inline void Histogram_Bucket::set_index(::google::protobuf::uint64 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Histogram.Bucket.index)
}

// required fixed64 count = 2;
inline bool Histogram_Bucket::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Histogram_Bucket::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Histogram_Bucket::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Histogram_Bucket::clear_count() {
  count_ = GOOGLE_ULONGLONG(0);
  clear_has_count();
}
inline ::google::protobuf::uint64 Histogram_Bucket::count() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Histogram.Bucket.count)
  return count_;
}
inline void Histogram_Bucket::set_count(::google::protobuf::uint64 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Histogram.Bucket.count)
}

// -------------------------------------------------------------------

// Histogram

// required fixed64 num_buckets = 1;
inline bool Histogram::has_num_buckets() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Histogram::set_has_num_buckets() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Histogram::clear_has_num_buckets() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Histogram::clear_num_buckets() {
  num_buckets_ = GOOGLE_ULONGLONG(0);
  clear_has_num_buckets();
}
inline ::google::protobuf::uint64 Histogram::num_buckets() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Histogram.num_buckets)
  return num_buckets_;
}
inline void Histogram::set_num_buckets(::google::protobuf::uint64 value) {
  set_has_num_buckets();
  num_buckets_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Histogram.num_buckets)
}

// required fixed64 bucket_width = 2;
inline bool Histogram::has_bucket_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Histogram::set_has_bucket_width() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Histogram::clear_has_bucket_width() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Histogram::clear_bucket_width() {
  bucket_width_ = GOOGLE_ULONGLONG(0);
  clear_has_bucket_width();
}
inline ::google::protobuf::uint64 Histogram::bucket_width() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Histogram.bucket_width)
  return bucket_width_;
}
inline void Histogram::set_bucket_width(::google::protobuf::uint64 value) {
  set_has_bucket_width();
  bucket_width_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Histogram.bucket_width)
}

// repeated .RAMCloud.ProtoBuf.Histogram.Bucket bucket = 3;
inline int Histogram::bucket_size() const {
  return bucket_.size();
}
inline void Histogram::clear_bucket() {
  bucket_.Clear();
}
inline const ::RAMCloud::ProtoBuf::Histogram_Bucket& Histogram::bucket(int index) const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Histogram.bucket)
  return bucket_.Get(index);
}
inline ::RAMCloud::ProtoBuf::Histogram_Bucket* Histogram::mutable_bucket(int index) {
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.Histogram.bucket)
  return bucket_.Mutable(index);
}
inline ::RAMCloud::ProtoBuf::Histogram_Bucket* Histogram::add_bucket() {
  // @@protoc_insertion_point(field_add:RAMCloud.ProtoBuf.Histogram.bucket)
  return bucket_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::RAMCloud::ProtoBuf::Histogram_Bucket >*
Histogram::mutable_bucket() {
  // @@protoc_insertion_point(field_mutable_list:RAMCloud.ProtoBuf.Histogram.bucket)
  return &bucket_;
}
inline const ::google::protobuf::RepeatedPtrField< ::RAMCloud::ProtoBuf::Histogram_Bucket >&
Histogram::bucket() const {
  // @@protoc_insertion_point(field_list:RAMCloud.ProtoBuf.Histogram.bucket)
  return bucket_;
}

// required fixed64 sample_sum_high = 4;
inline bool Histogram::has_sample_sum_high() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Histogram::set_has_sample_sum_high() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Histogram::clear_has_sample_sum_high() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Histogram::clear_sample_sum_high() {
  sample_sum_high_ = GOOGLE_ULONGLONG(0);
  clear_has_sample_sum_high();
}
inline ::google::protobuf::uint64 Histogram::sample_sum_high() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Histogram.sample_sum_high)
  return sample_sum_high_;
}
inline void Histogram::set_sample_sum_high(::google::protobuf::uint64 value) {
  set_has_sample_sum_high();
  sample_sum_high_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Histogram.sample_sum_high)
}

// required fixed64 sample_sum_low = 5;
inline bool Histogram::has_sample_sum_low() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Histogram::set_has_sample_sum_low() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Histogram::clear_has_sample_sum_low() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Histogram::clear_sample_sum_low() {
  sample_sum_low_ = GOOGLE_ULONGLONG(0);
  clear_has_sample_sum_low();
}
inline ::google::protobuf::uint64 Histogram::sample_sum_low() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Histogram.sample_sum_low)
  return sample_sum_low_;
}
inline void Histogram::set_sample_sum_low(::google::protobuf::uint64 value) {
  set_has_sample_sum_low();
  sample_sum_low_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Histogram.sample_sum_low)
}

// required fixed64 outliers = 6;
inline bool Histogram::has_outliers() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Histogram::set_has_outliers() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Histogram::clear_has_outliers() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Histogram::clear_outliers() {
  outliers_ = GOOGLE_ULONGLONG(0);
  clear_has_outliers();
}
inline ::google::protobuf::uint64 Histogram::outliers() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Histogram.outliers)
  return outliers_;
}
inline void Histogram::set_outliers(::google::protobuf::uint64 value) {
  set_has_outliers();
  outliers_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Histogram.outliers)
}

// required fixed64 max = 7;
inline bool Histogram::has_max() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Histogram::set_has_max() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Histogram::clear_has_max() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Histogram::clear_max() {
  max_ = GOOGLE_ULONGLONG(0);
  clear_has_max();
}
inline ::google::protobuf::uint64 Histogram::max() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Histogram.max)
  return max_;
}
inline void Histogram::set_max(::google::protobuf::uint64 value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Histogram.max)
}

// required fixed64 min = 8;
inline bool Histogram::has_min() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Histogram::set_has_min() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Histogram::clear_has_min() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Histogram::clear_min() {
  min_ = GOOGLE_ULONGLONG(0);
  clear_has_min();
}
inline ::google::protobuf::uint64 Histogram::min() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Histogram.min)
  return min_;
}
inline void Histogram::set_min(::google::protobuf::uint64 value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Histogram.min)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoBuf
}  // namespace RAMCloud

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Histogram_2eproto__INCLUDED
// RAMCloud pragma [GCCWARN=0]
