// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MasterRecoveryInfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MasterRecoveryInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace RAMCloud {
namespace ProtoBuf {

namespace {

const ::google::protobuf::Descriptor* MasterRecoveryInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MasterRecoveryInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MasterRecoveryInfo_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_MasterRecoveryInfo_2eproto() {
  protobuf_AddDesc_MasterRecoveryInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MasterRecoveryInfo.proto");
  GOOGLE_CHECK(file != NULL);
  MasterRecoveryInfo_descriptor_ = file->message_type(0);
  static const int MasterRecoveryInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterRecoveryInfo, min_open_segment_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterRecoveryInfo, min_open_segment_epoch_),
  };
  MasterRecoveryInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MasterRecoveryInfo_descriptor_,
      MasterRecoveryInfo::default_instance_,
      MasterRecoveryInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterRecoveryInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(MasterRecoveryInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterRecoveryInfo, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MasterRecoveryInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MasterRecoveryInfo_descriptor_, &MasterRecoveryInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MasterRecoveryInfo_2eproto() {
  delete MasterRecoveryInfo::default_instance_;
  delete MasterRecoveryInfo_reflection_;
}

void protobuf_AddDesc_MasterRecoveryInfo_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_MasterRecoveryInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030MasterRecoveryInfo.proto\022\021RAMCloud.Pro"
    "toBuf\"W\n\022MasterRecoveryInfo\022\036\n\023min_open_"
    "segment_id\030\001 \001(\004:\0010\022!\n\026min_open_segment_"
    "epoch\030\002 \001(\004:\0010", 134);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MasterRecoveryInfo.proto", &protobuf_RegisterTypes);
  MasterRecoveryInfo::default_instance_ = new MasterRecoveryInfo();
  MasterRecoveryInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MasterRecoveryInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MasterRecoveryInfo_2eproto {
  StaticDescriptorInitializer_MasterRecoveryInfo_2eproto() {
    protobuf_AddDesc_MasterRecoveryInfo_2eproto();
  }
} static_descriptor_initializer_MasterRecoveryInfo_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MasterRecoveryInfo::kMinOpenSegmentIdFieldNumber;
const int MasterRecoveryInfo::kMinOpenSegmentEpochFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MasterRecoveryInfo::MasterRecoveryInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RAMCloud.ProtoBuf.MasterRecoveryInfo)
}

void MasterRecoveryInfo::InitAsDefaultInstance() {
}

MasterRecoveryInfo::MasterRecoveryInfo(const MasterRecoveryInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RAMCloud.ProtoBuf.MasterRecoveryInfo)
}

void MasterRecoveryInfo::SharedCtor() {
  _cached_size_ = 0;
  min_open_segment_id_ = GOOGLE_ULONGLONG(0);
  min_open_segment_epoch_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MasterRecoveryInfo::~MasterRecoveryInfo() {
  // @@protoc_insertion_point(destructor:RAMCloud.ProtoBuf.MasterRecoveryInfo)
  SharedDtor();
}

void MasterRecoveryInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MasterRecoveryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MasterRecoveryInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MasterRecoveryInfo_descriptor_;
}

const MasterRecoveryInfo& MasterRecoveryInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterRecoveryInfo_2eproto();
  return *default_instance_;
}

MasterRecoveryInfo* MasterRecoveryInfo::default_instance_ = NULL;

MasterRecoveryInfo* MasterRecoveryInfo::New(::google::protobuf::Arena* arena) const {
  MasterRecoveryInfo* n = new MasterRecoveryInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MasterRecoveryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:RAMCloud.ProtoBuf.MasterRecoveryInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MasterRecoveryInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MasterRecoveryInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(min_open_segment_id_, min_open_segment_epoch_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MasterRecoveryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RAMCloud.ProtoBuf.MasterRecoveryInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 min_open_segment_id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &min_open_segment_id_)));
          set_has_min_open_segment_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_min_open_segment_epoch;
        break;
      }

      // optional uint64 min_open_segment_epoch = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_min_open_segment_epoch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &min_open_segment_epoch_)));
          set_has_min_open_segment_epoch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RAMCloud.ProtoBuf.MasterRecoveryInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RAMCloud.ProtoBuf.MasterRecoveryInfo)
  return false;
#undef DO_
}

void MasterRecoveryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RAMCloud.ProtoBuf.MasterRecoveryInfo)
  // optional uint64 min_open_segment_id = 1 [default = 0];
  if (has_min_open_segment_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->min_open_segment_id(), output);
  }

  // optional uint64 min_open_segment_epoch = 2 [default = 0];
  if (has_min_open_segment_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->min_open_segment_epoch(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RAMCloud.ProtoBuf.MasterRecoveryInfo)
}

::google::protobuf::uint8* MasterRecoveryInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RAMCloud.ProtoBuf.MasterRecoveryInfo)
  // optional uint64 min_open_segment_id = 1 [default = 0];
  if (has_min_open_segment_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->min_open_segment_id(), target);
  }

  // optional uint64 min_open_segment_epoch = 2 [default = 0];
  if (has_min_open_segment_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->min_open_segment_epoch(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RAMCloud.ProtoBuf.MasterRecoveryInfo)
  return target;
}

int MasterRecoveryInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:RAMCloud.ProtoBuf.MasterRecoveryInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 min_open_segment_id = 1 [default = 0];
    if (has_min_open_segment_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->min_open_segment_id());
    }

    // optional uint64 min_open_segment_epoch = 2 [default = 0];
    if (has_min_open_segment_epoch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->min_open_segment_epoch());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MasterRecoveryInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RAMCloud.ProtoBuf.MasterRecoveryInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MasterRecoveryInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MasterRecoveryInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RAMCloud.ProtoBuf.MasterRecoveryInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RAMCloud.ProtoBuf.MasterRecoveryInfo)
    MergeFrom(*source);
  }
}

void MasterRecoveryInfo::MergeFrom(const MasterRecoveryInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RAMCloud.ProtoBuf.MasterRecoveryInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_min_open_segment_id()) {
      set_min_open_segment_id(from.min_open_segment_id());
    }
    if (from.has_min_open_segment_epoch()) {
      set_min_open_segment_epoch(from.min_open_segment_epoch());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MasterRecoveryInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RAMCloud.ProtoBuf.MasterRecoveryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MasterRecoveryInfo::CopyFrom(const MasterRecoveryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RAMCloud.ProtoBuf.MasterRecoveryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MasterRecoveryInfo::IsInitialized() const {

  return true;
}

void MasterRecoveryInfo::Swap(MasterRecoveryInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MasterRecoveryInfo::InternalSwap(MasterRecoveryInfo* other) {
  std::swap(min_open_segment_id_, other->min_open_segment_id_);
  std::swap(min_open_segment_epoch_, other->min_open_segment_epoch_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MasterRecoveryInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MasterRecoveryInfo_descriptor_;
  metadata.reflection = MasterRecoveryInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MasterRecoveryInfo

// optional uint64 min_open_segment_id = 1 [default = 0];
bool MasterRecoveryInfo::has_min_open_segment_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MasterRecoveryInfo::set_has_min_open_segment_id() {
  _has_bits_[0] |= 0x00000001u;
}
void MasterRecoveryInfo::clear_has_min_open_segment_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void MasterRecoveryInfo::clear_min_open_segment_id() {
  min_open_segment_id_ = GOOGLE_ULONGLONG(0);
  clear_has_min_open_segment_id();
}
 ::google::protobuf::uint64 MasterRecoveryInfo::min_open_segment_id() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.MasterRecoveryInfo.min_open_segment_id)
  return min_open_segment_id_;
}
 void MasterRecoveryInfo::set_min_open_segment_id(::google::protobuf::uint64 value) {
  set_has_min_open_segment_id();
  min_open_segment_id_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.MasterRecoveryInfo.min_open_segment_id)
}

// optional uint64 min_open_segment_epoch = 2 [default = 0];
bool MasterRecoveryInfo::has_min_open_segment_epoch() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MasterRecoveryInfo::set_has_min_open_segment_epoch() {
  _has_bits_[0] |= 0x00000002u;
}
void MasterRecoveryInfo::clear_has_min_open_segment_epoch() {
  _has_bits_[0] &= ~0x00000002u;
}
void MasterRecoveryInfo::clear_min_open_segment_epoch() {
  min_open_segment_epoch_ = GOOGLE_ULONGLONG(0);
  clear_has_min_open_segment_epoch();
}
 ::google::protobuf::uint64 MasterRecoveryInfo::min_open_segment_epoch() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.MasterRecoveryInfo.min_open_segment_epoch)
  return min_open_segment_epoch_;
}
 void MasterRecoveryInfo::set_min_open_segment_epoch(::google::protobuf::uint64 value) {
  set_has_min_open_segment_epoch();
  min_open_segment_epoch_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.MasterRecoveryInfo.min_open_segment_epoch)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoBuf
}  // namespace RAMCloud

// @@protoc_insertion_point(global_scope)
// RAMCloud pragma [GCCWARN=0]
