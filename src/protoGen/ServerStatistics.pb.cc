// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerStatistics.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ServerStatistics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace RAMCloud {
namespace ProtoBuf {

namespace {

const ::google::protobuf::Descriptor* ServerStatistics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerStatistics_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerStatistics_TabletEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerStatistics_TabletEntry_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ServerStatistics_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_ServerStatistics_2eproto() {
  protobuf_AddDesc_ServerStatistics_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ServerStatistics.proto");
  GOOGLE_CHECK(file != NULL);
  ServerStatistics_descriptor_ = file->message_type(0);
  static const int ServerStatistics_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatistics, tabletentry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatistics, spin_lock_stats_),
  };
  ServerStatistics_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ServerStatistics_descriptor_,
      ServerStatistics::default_instance_,
      ServerStatistics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatistics, _has_bits_[0]),
      -1,
      -1,
      sizeof(ServerStatistics),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatistics, _internal_metadata_),
      -1);
  ServerStatistics_TabletEntry_descriptor_ = ServerStatistics_descriptor_->nested_type(0);
  static const int ServerStatistics_TabletEntry_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatistics_TabletEntry, table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatistics_TabletEntry, start_key_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatistics_TabletEntry, end_key_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatistics_TabletEntry, number_read_and_writes_),
  };
  ServerStatistics_TabletEntry_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ServerStatistics_TabletEntry_descriptor_,
      ServerStatistics_TabletEntry::default_instance_,
      ServerStatistics_TabletEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatistics_TabletEntry, _has_bits_[0]),
      -1,
      -1,
      sizeof(ServerStatistics_TabletEntry),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatistics_TabletEntry, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ServerStatistics_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ServerStatistics_descriptor_, &ServerStatistics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ServerStatistics_TabletEntry_descriptor_, &ServerStatistics_TabletEntry::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ServerStatistics_2eproto() {
  delete ServerStatistics::default_instance_;
  delete ServerStatistics_reflection_;
  delete ServerStatistics_TabletEntry::default_instance_;
  delete ServerStatistics_TabletEntry_reflection_;
}

void protobuf_AddDesc_ServerStatistics_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_ServerStatistics_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::RAMCloud::ProtoBuf::protobuf_AddDesc_SpinLockStatistics_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026ServerStatistics.proto\022\021RAMCloud.Proto"
    "Buf\032\030SpinLockStatistics.proto\"\212\002\n\020Server"
    "Statistics\022D\n\013tabletentry\030\001 \003(\0132/.RAMClo"
    "ud.ProtoBuf.ServerStatistics.TabletEntry"
    "\022>\n\017spin_lock_stats\030\002 \002(\0132%.RAMCloud.Pro"
    "toBuf.SpinLockStatistics\032p\n\013TabletEntry\022"
    "\020\n\010table_id\030\001 \002(\004\022\026\n\016start_key_hash\030\002 \002("
    "\004\022\024\n\014end_key_hash\030\003 \002(\004\022!\n\026number_read_a"
    "nd_writes\030\004 \001(\004:\0010", 338);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ServerStatistics.proto", &protobuf_RegisterTypes);
  ServerStatistics::default_instance_ = new ServerStatistics();
  ServerStatistics_TabletEntry::default_instance_ = new ServerStatistics_TabletEntry();
  ServerStatistics::default_instance_->InitAsDefaultInstance();
  ServerStatistics_TabletEntry::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ServerStatistics_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ServerStatistics_2eproto {
  StaticDescriptorInitializer_ServerStatistics_2eproto() {
    protobuf_AddDesc_ServerStatistics_2eproto();
  }
} static_descriptor_initializer_ServerStatistics_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerStatistics_TabletEntry::kTableIdFieldNumber;
const int ServerStatistics_TabletEntry::kStartKeyHashFieldNumber;
const int ServerStatistics_TabletEntry::kEndKeyHashFieldNumber;
const int ServerStatistics_TabletEntry::kNumberReadAndWritesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerStatistics_TabletEntry::ServerStatistics_TabletEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RAMCloud.ProtoBuf.ServerStatistics.TabletEntry)
}

void ServerStatistics_TabletEntry::InitAsDefaultInstance() {
}

ServerStatistics_TabletEntry::ServerStatistics_TabletEntry(const ServerStatistics_TabletEntry& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RAMCloud.ProtoBuf.ServerStatistics.TabletEntry)
}

void ServerStatistics_TabletEntry::SharedCtor() {
  _cached_size_ = 0;
  table_id_ = GOOGLE_ULONGLONG(0);
  start_key_hash_ = GOOGLE_ULONGLONG(0);
  end_key_hash_ = GOOGLE_ULONGLONG(0);
  number_read_and_writes_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerStatistics_TabletEntry::~ServerStatistics_TabletEntry() {
  // @@protoc_insertion_point(destructor:RAMCloud.ProtoBuf.ServerStatistics.TabletEntry)
  SharedDtor();
}

void ServerStatistics_TabletEntry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerStatistics_TabletEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerStatistics_TabletEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerStatistics_TabletEntry_descriptor_;
}

const ServerStatistics_TabletEntry& ServerStatistics_TabletEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerStatistics_2eproto();
  return *default_instance_;
}

ServerStatistics_TabletEntry* ServerStatistics_TabletEntry::default_instance_ = NULL;

ServerStatistics_TabletEntry* ServerStatistics_TabletEntry::New(::google::protobuf::Arena* arena) const {
  ServerStatistics_TabletEntry* n = new ServerStatistics_TabletEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerStatistics_TabletEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:RAMCloud.ProtoBuf.ServerStatistics.TabletEntry)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ServerStatistics_TabletEntry, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ServerStatistics_TabletEntry*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(table_id_, number_read_and_writes_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ServerStatistics_TabletEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RAMCloud.ProtoBuf.ServerStatistics.TabletEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 table_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_start_key_hash;
        break;
      }

      // required uint64 start_key_hash = 2;
      case 2: {
        if (tag == 16) {
         parse_start_key_hash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_key_hash_)));
          set_has_start_key_hash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_end_key_hash;
        break;
      }

      // required uint64 end_key_hash = 3;
      case 3: {
        if (tag == 24) {
         parse_end_key_hash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_key_hash_)));
          set_has_end_key_hash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_number_read_and_writes;
        break;
      }

      // optional uint64 number_read_and_writes = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_number_read_and_writes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &number_read_and_writes_)));
          set_has_number_read_and_writes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RAMCloud.ProtoBuf.ServerStatistics.TabletEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RAMCloud.ProtoBuf.ServerStatistics.TabletEntry)
  return false;
#undef DO_
}

void ServerStatistics_TabletEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RAMCloud.ProtoBuf.ServerStatistics.TabletEntry)
  // required uint64 table_id = 1;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->table_id(), output);
  }

  // required uint64 start_key_hash = 2;
  if (has_start_key_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->start_key_hash(), output);
  }

  // required uint64 end_key_hash = 3;
  if (has_end_key_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->end_key_hash(), output);
  }

  // optional uint64 number_read_and_writes = 4 [default = 0];
  if (has_number_read_and_writes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->number_read_and_writes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RAMCloud.ProtoBuf.ServerStatistics.TabletEntry)
}

::google::protobuf::uint8* ServerStatistics_TabletEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RAMCloud.ProtoBuf.ServerStatistics.TabletEntry)
  // required uint64 table_id = 1;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->table_id(), target);
  }

  // required uint64 start_key_hash = 2;
  if (has_start_key_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->start_key_hash(), target);
  }

  // required uint64 end_key_hash = 3;
  if (has_end_key_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->end_key_hash(), target);
  }

  // optional uint64 number_read_and_writes = 4 [default = 0];
  if (has_number_read_and_writes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->number_read_and_writes(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RAMCloud.ProtoBuf.ServerStatistics.TabletEntry)
  return target;
}

int ServerStatistics_TabletEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RAMCloud.ProtoBuf.ServerStatistics.TabletEntry)
  int total_size = 0;

  if (has_table_id()) {
    // required uint64 table_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->table_id());
  }

  if (has_start_key_hash()) {
    // required uint64 start_key_hash = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->start_key_hash());
  }

  if (has_end_key_hash()) {
    // required uint64 end_key_hash = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->end_key_hash());
  }

  return total_size;
}
int ServerStatistics_TabletEntry::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:RAMCloud.ProtoBuf.ServerStatistics.TabletEntry)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint64 table_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->table_id());

    // required uint64 start_key_hash = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->start_key_hash());

    // required uint64 end_key_hash = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->end_key_hash());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional uint64 number_read_and_writes = 4 [default = 0];
  if (has_number_read_and_writes()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->number_read_and_writes());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerStatistics_TabletEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RAMCloud.ProtoBuf.ServerStatistics.TabletEntry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ServerStatistics_TabletEntry* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerStatistics_TabletEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RAMCloud.ProtoBuf.ServerStatistics.TabletEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RAMCloud.ProtoBuf.ServerStatistics.TabletEntry)
    MergeFrom(*source);
  }
}

void ServerStatistics_TabletEntry::MergeFrom(const ServerStatistics_TabletEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RAMCloud.ProtoBuf.ServerStatistics.TabletEntry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
    if (from.has_start_key_hash()) {
      set_start_key_hash(from.start_key_hash());
    }
    if (from.has_end_key_hash()) {
      set_end_key_hash(from.end_key_hash());
    }
    if (from.has_number_read_and_writes()) {
      set_number_read_and_writes(from.number_read_and_writes());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ServerStatistics_TabletEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RAMCloud.ProtoBuf.ServerStatistics.TabletEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerStatistics_TabletEntry::CopyFrom(const ServerStatistics_TabletEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RAMCloud.ProtoBuf.ServerStatistics.TabletEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerStatistics_TabletEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ServerStatistics_TabletEntry::Swap(ServerStatistics_TabletEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerStatistics_TabletEntry::InternalSwap(ServerStatistics_TabletEntry* other) {
  std::swap(table_id_, other->table_id_);
  std::swap(start_key_hash_, other->start_key_hash_);
  std::swap(end_key_hash_, other->end_key_hash_);
  std::swap(number_read_and_writes_, other->number_read_and_writes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerStatistics_TabletEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerStatistics_TabletEntry_descriptor_;
  metadata.reflection = ServerStatistics_TabletEntry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerStatistics::kTabletentryFieldNumber;
const int ServerStatistics::kSpinLockStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerStatistics::ServerStatistics()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RAMCloud.ProtoBuf.ServerStatistics)
}

void ServerStatistics::InitAsDefaultInstance() {
  spin_lock_stats_ = const_cast< ::RAMCloud::ProtoBuf::SpinLockStatistics*>(&::RAMCloud::ProtoBuf::SpinLockStatistics::default_instance());
}

ServerStatistics::ServerStatistics(const ServerStatistics& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RAMCloud.ProtoBuf.ServerStatistics)
}

void ServerStatistics::SharedCtor() {
  _cached_size_ = 0;
  spin_lock_stats_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerStatistics::~ServerStatistics() {
  // @@protoc_insertion_point(destructor:RAMCloud.ProtoBuf.ServerStatistics)
  SharedDtor();
}

void ServerStatistics::SharedDtor() {
  if (this != default_instance_) {
    delete spin_lock_stats_;
  }
}

void ServerStatistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerStatistics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerStatistics_descriptor_;
}

const ServerStatistics& ServerStatistics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerStatistics_2eproto();
  return *default_instance_;
}

ServerStatistics* ServerStatistics::default_instance_ = NULL;

ServerStatistics* ServerStatistics::New(::google::protobuf::Arena* arena) const {
  ServerStatistics* n = new ServerStatistics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerStatistics::Clear() {
// @@protoc_insertion_point(message_clear_start:RAMCloud.ProtoBuf.ServerStatistics)
  if (has_spin_lock_stats()) {
    if (spin_lock_stats_ != NULL) spin_lock_stats_->::RAMCloud::ProtoBuf::SpinLockStatistics::Clear();
  }
  tabletentry_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ServerStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RAMCloud.ProtoBuf.ServerStatistics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RAMCloud.ProtoBuf.ServerStatistics.TabletEntry tabletentry = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_tabletentry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_tabletentry()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_tabletentry;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_spin_lock_stats;
        break;
      }

      // required .RAMCloud.ProtoBuf.SpinLockStatistics spin_lock_stats = 2;
      case 2: {
        if (tag == 18) {
         parse_spin_lock_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spin_lock_stats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RAMCloud.ProtoBuf.ServerStatistics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RAMCloud.ProtoBuf.ServerStatistics)
  return false;
#undef DO_
}

void ServerStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RAMCloud.ProtoBuf.ServerStatistics)
  // repeated .RAMCloud.ProtoBuf.ServerStatistics.TabletEntry tabletentry = 1;
  for (unsigned int i = 0, n = this->tabletentry_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tabletentry(i), output);
  }

  // required .RAMCloud.ProtoBuf.SpinLockStatistics spin_lock_stats = 2;
  if (has_spin_lock_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->spin_lock_stats_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RAMCloud.ProtoBuf.ServerStatistics)
}

::google::protobuf::uint8* ServerStatistics::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RAMCloud.ProtoBuf.ServerStatistics)
  // repeated .RAMCloud.ProtoBuf.ServerStatistics.TabletEntry tabletentry = 1;
  for (unsigned int i = 0, n = this->tabletentry_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->tabletentry(i), false, target);
  }

  // required .RAMCloud.ProtoBuf.SpinLockStatistics spin_lock_stats = 2;
  if (has_spin_lock_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->spin_lock_stats_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RAMCloud.ProtoBuf.ServerStatistics)
  return target;
}

int ServerStatistics::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:RAMCloud.ProtoBuf.ServerStatistics)
  int total_size = 0;

  // required .RAMCloud.ProtoBuf.SpinLockStatistics spin_lock_stats = 2;
  if (has_spin_lock_stats()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->spin_lock_stats_);
  }
  // repeated .RAMCloud.ProtoBuf.ServerStatistics.TabletEntry tabletentry = 1;
  total_size += 1 * this->tabletentry_size();
  for (int i = 0; i < this->tabletentry_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tabletentry(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerStatistics::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RAMCloud.ProtoBuf.ServerStatistics)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ServerStatistics* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerStatistics>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RAMCloud.ProtoBuf.ServerStatistics)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RAMCloud.ProtoBuf.ServerStatistics)
    MergeFrom(*source);
  }
}

void ServerStatistics::MergeFrom(const ServerStatistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RAMCloud.ProtoBuf.ServerStatistics)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  tabletentry_.MergeFrom(from.tabletentry_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_spin_lock_stats()) {
      mutable_spin_lock_stats()->::RAMCloud::ProtoBuf::SpinLockStatistics::MergeFrom(from.spin_lock_stats());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ServerStatistics::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RAMCloud.ProtoBuf.ServerStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerStatistics::CopyFrom(const ServerStatistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RAMCloud.ProtoBuf.ServerStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerStatistics::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->tabletentry())) return false;
  if (has_spin_lock_stats()) {
    if (!this->spin_lock_stats_->IsInitialized()) return false;
  }
  return true;
}

void ServerStatistics::Swap(ServerStatistics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerStatistics::InternalSwap(ServerStatistics* other) {
  tabletentry_.UnsafeArenaSwap(&other->tabletentry_);
  std::swap(spin_lock_stats_, other->spin_lock_stats_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerStatistics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerStatistics_descriptor_;
  metadata.reflection = ServerStatistics_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerStatistics_TabletEntry

// required uint64 table_id = 1;
bool ServerStatistics_TabletEntry::has_table_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ServerStatistics_TabletEntry::set_has_table_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ServerStatistics_TabletEntry::clear_has_table_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ServerStatistics_TabletEntry::clear_table_id() {
  table_id_ = GOOGLE_ULONGLONG(0);
  clear_has_table_id();
}
 ::google::protobuf::uint64 ServerStatistics_TabletEntry::table_id() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerStatistics.TabletEntry.table_id)
  return table_id_;
}
 void ServerStatistics_TabletEntry::set_table_id(::google::protobuf::uint64 value) {
  set_has_table_id();
  table_id_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerStatistics.TabletEntry.table_id)
}

// required uint64 start_key_hash = 2;
bool ServerStatistics_TabletEntry::has_start_key_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ServerStatistics_TabletEntry::set_has_start_key_hash() {
  _has_bits_[0] |= 0x00000002u;
}
void ServerStatistics_TabletEntry::clear_has_start_key_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
void ServerStatistics_TabletEntry::clear_start_key_hash() {
  start_key_hash_ = GOOGLE_ULONGLONG(0);
  clear_has_start_key_hash();
}
 ::google::protobuf::uint64 ServerStatistics_TabletEntry::start_key_hash() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerStatistics.TabletEntry.start_key_hash)
  return start_key_hash_;
}
 void ServerStatistics_TabletEntry::set_start_key_hash(::google::protobuf::uint64 value) {
  set_has_start_key_hash();
  start_key_hash_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerStatistics.TabletEntry.start_key_hash)
}

// required uint64 end_key_hash = 3;
bool ServerStatistics_TabletEntry::has_end_key_hash() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ServerStatistics_TabletEntry::set_has_end_key_hash() {
  _has_bits_[0] |= 0x00000004u;
}
void ServerStatistics_TabletEntry::clear_has_end_key_hash() {
  _has_bits_[0] &= ~0x00000004u;
}
void ServerStatistics_TabletEntry::clear_end_key_hash() {
  end_key_hash_ = GOOGLE_ULONGLONG(0);
  clear_has_end_key_hash();
}
 ::google::protobuf::uint64 ServerStatistics_TabletEntry::end_key_hash() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerStatistics.TabletEntry.end_key_hash)
  return end_key_hash_;
}
 void ServerStatistics_TabletEntry::set_end_key_hash(::google::protobuf::uint64 value) {
  set_has_end_key_hash();
  end_key_hash_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerStatistics.TabletEntry.end_key_hash)
}

// optional uint64 number_read_and_writes = 4 [default = 0];
bool ServerStatistics_TabletEntry::has_number_read_and_writes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ServerStatistics_TabletEntry::set_has_number_read_and_writes() {
  _has_bits_[0] |= 0x00000008u;
}
void ServerStatistics_TabletEntry::clear_has_number_read_and_writes() {
  _has_bits_[0] &= ~0x00000008u;
}
void ServerStatistics_TabletEntry::clear_number_read_and_writes() {
  number_read_and_writes_ = GOOGLE_ULONGLONG(0);
  clear_has_number_read_and_writes();
}
 ::google::protobuf::uint64 ServerStatistics_TabletEntry::number_read_and_writes() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerStatistics.TabletEntry.number_read_and_writes)
  return number_read_and_writes_;
}
 void ServerStatistics_TabletEntry::set_number_read_and_writes(::google::protobuf::uint64 value) {
  set_has_number_read_and_writes();
  number_read_and_writes_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerStatistics.TabletEntry.number_read_and_writes)
}

// -------------------------------------------------------------------

// ServerStatistics

// repeated .RAMCloud.ProtoBuf.ServerStatistics.TabletEntry tabletentry = 1;
int ServerStatistics::tabletentry_size() const {
  return tabletentry_.size();
}
void ServerStatistics::clear_tabletentry() {
  tabletentry_.Clear();
}
const ::RAMCloud::ProtoBuf::ServerStatistics_TabletEntry& ServerStatistics::tabletentry(int index) const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerStatistics.tabletentry)
  return tabletentry_.Get(index);
}
::RAMCloud::ProtoBuf::ServerStatistics_TabletEntry* ServerStatistics::mutable_tabletentry(int index) {
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.ServerStatistics.tabletentry)
  return tabletentry_.Mutable(index);
}
::RAMCloud::ProtoBuf::ServerStatistics_TabletEntry* ServerStatistics::add_tabletentry() {
  // @@protoc_insertion_point(field_add:RAMCloud.ProtoBuf.ServerStatistics.tabletentry)
  return tabletentry_.Add();
}
::google::protobuf::RepeatedPtrField< ::RAMCloud::ProtoBuf::ServerStatistics_TabletEntry >*
ServerStatistics::mutable_tabletentry() {
  // @@protoc_insertion_point(field_mutable_list:RAMCloud.ProtoBuf.ServerStatistics.tabletentry)
  return &tabletentry_;
}
const ::google::protobuf::RepeatedPtrField< ::RAMCloud::ProtoBuf::ServerStatistics_TabletEntry >&
ServerStatistics::tabletentry() const {
  // @@protoc_insertion_point(field_list:RAMCloud.ProtoBuf.ServerStatistics.tabletentry)
  return tabletentry_;
}

// required .RAMCloud.ProtoBuf.SpinLockStatistics spin_lock_stats = 2;
bool ServerStatistics::has_spin_lock_stats() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ServerStatistics::set_has_spin_lock_stats() {
  _has_bits_[0] |= 0x00000002u;
}
void ServerStatistics::clear_has_spin_lock_stats() {
  _has_bits_[0] &= ~0x00000002u;
}
void ServerStatistics::clear_spin_lock_stats() {
  if (spin_lock_stats_ != NULL) spin_lock_stats_->::RAMCloud::ProtoBuf::SpinLockStatistics::Clear();
  clear_has_spin_lock_stats();
}
const ::RAMCloud::ProtoBuf::SpinLockStatistics& ServerStatistics::spin_lock_stats() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerStatistics.spin_lock_stats)
  return spin_lock_stats_ != NULL ? *spin_lock_stats_ : *default_instance_->spin_lock_stats_;
}
::RAMCloud::ProtoBuf::SpinLockStatistics* ServerStatistics::mutable_spin_lock_stats() {
  set_has_spin_lock_stats();
  if (spin_lock_stats_ == NULL) {
    spin_lock_stats_ = new ::RAMCloud::ProtoBuf::SpinLockStatistics;
  }
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.ServerStatistics.spin_lock_stats)
  return spin_lock_stats_;
}
::RAMCloud::ProtoBuf::SpinLockStatistics* ServerStatistics::release_spin_lock_stats() {
  // @@protoc_insertion_point(field_release:RAMCloud.ProtoBuf.ServerStatistics.spin_lock_stats)
  clear_has_spin_lock_stats();
  ::RAMCloud::ProtoBuf::SpinLockStatistics* temp = spin_lock_stats_;
  spin_lock_stats_ = NULL;
  return temp;
}
void ServerStatistics::set_allocated_spin_lock_stats(::RAMCloud::ProtoBuf::SpinLockStatistics* spin_lock_stats) {
  delete spin_lock_stats_;
  spin_lock_stats_ = spin_lock_stats;
  if (spin_lock_stats) {
    set_has_spin_lock_stats();
  } else {
    clear_has_spin_lock_stats();
  }
  // @@protoc_insertion_point(field_set_allocated:RAMCloud.ProtoBuf.ServerStatistics.spin_lock_stats)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoBuf
}  // namespace RAMCloud

// @@protoc_insertion_point(global_scope)
// RAMCloud pragma [GCCWARN=0]
