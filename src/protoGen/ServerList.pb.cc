// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerList.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ServerList.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace RAMCloud {
namespace ProtoBuf {

namespace {

const ::google::protobuf::Descriptor* ServerList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerList_Entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerList_Entry_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ServerList_Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ServerList_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_ServerList_2eproto() {
  protobuf_AddDesc_ServerList_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ServerList.proto");
  GOOGLE_CHECK(file != NULL);
  ServerList_descriptor_ = file->message_type(0);
  static const int ServerList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerList, server_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerList, version_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerList, type_),
  };
  ServerList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ServerList_descriptor_,
      ServerList::default_instance_,
      ServerList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerList, _has_bits_[0]),
      -1,
      -1,
      sizeof(ServerList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerList, _internal_metadata_),
      -1);
  ServerList_Entry_descriptor_ = ServerList_descriptor_->nested_type(0);
  static const int ServerList_Entry_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerList_Entry, services_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerList_Entry, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerList_Entry, service_locator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerList_Entry, expected_read_mbytes_per_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerList_Entry, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerList_Entry, replication_id_),
  };
  ServerList_Entry_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ServerList_Entry_descriptor_,
      ServerList_Entry::default_instance_,
      ServerList_Entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerList_Entry, _has_bits_[0]),
      -1,
      -1,
      sizeof(ServerList_Entry),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerList_Entry, _internal_metadata_),
      -1);
  ServerList_Type_descriptor_ = ServerList_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ServerList_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ServerList_descriptor_, &ServerList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ServerList_Entry_descriptor_, &ServerList_Entry::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ServerList_2eproto() {
  delete ServerList::default_instance_;
  delete ServerList_reflection_;
  delete ServerList_Entry::default_instance_;
  delete ServerList_Entry_reflection_;
}

void protobuf_AddDesc_ServerList_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_ServerList_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020ServerList.proto\022\021RAMCloud.ProtoBuf\"\304\002"
    "\n\nServerList\0223\n\006server\030\001 \003(\0132#.RAMCloud."
    "ProtoBuf.ServerList.Entry\022\026\n\016version_num"
    "ber\030\002 \002(\006\0220\n\004type\030\003 \002(\0162\".RAMCloud.Proto"
    "Buf.ServerList.Type\032\223\001\n\005Entry\022\020\n\010service"
    "s\030\001 \002(\007\022\021\n\tserver_id\030\002 \002(\006\022\027\n\017service_lo"
    "cator\030\003 \002(\t\022$\n\034expected_read_mbytes_per_"
    "sec\030\005 \002(\007\022\016\n\006status\030\006 \002(\007\022\026\n\016replication"
    "_id\030\007 \002(\006\"!\n\004Type\022\r\n\tFULL_LIST\020\000\022\n\n\006UPDA"
    "TE\020\001", 364);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ServerList.proto", &protobuf_RegisterTypes);
  ServerList::default_instance_ = new ServerList();
  ServerList_Entry::default_instance_ = new ServerList_Entry();
  ServerList::default_instance_->InitAsDefaultInstance();
  ServerList_Entry::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ServerList_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ServerList_2eproto {
  StaticDescriptorInitializer_ServerList_2eproto() {
    protobuf_AddDesc_ServerList_2eproto();
  }
} static_descriptor_initializer_ServerList_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* ServerList_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerList_Type_descriptor_;
}
bool ServerList_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ServerList_Type ServerList::FULL_LIST;
const ServerList_Type ServerList::UPDATE;
const ServerList_Type ServerList::Type_MIN;
const ServerList_Type ServerList::Type_MAX;
const int ServerList::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerList_Entry::kServicesFieldNumber;
const int ServerList_Entry::kServerIdFieldNumber;
const int ServerList_Entry::kServiceLocatorFieldNumber;
const int ServerList_Entry::kExpectedReadMbytesPerSecFieldNumber;
const int ServerList_Entry::kStatusFieldNumber;
const int ServerList_Entry::kReplicationIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerList_Entry::ServerList_Entry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RAMCloud.ProtoBuf.ServerList.Entry)
}

void ServerList_Entry::InitAsDefaultInstance() {
}

ServerList_Entry::ServerList_Entry(const ServerList_Entry& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RAMCloud.ProtoBuf.ServerList.Entry)
}

void ServerList_Entry::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  services_ = 0u;
  server_id_ = GOOGLE_ULONGLONG(0);
  service_locator_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expected_read_mbytes_per_sec_ = 0u;
  status_ = 0u;
  replication_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerList_Entry::~ServerList_Entry() {
  // @@protoc_insertion_point(destructor:RAMCloud.ProtoBuf.ServerList.Entry)
  SharedDtor();
}

void ServerList_Entry::SharedDtor() {
  service_locator_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ServerList_Entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerList_Entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerList_Entry_descriptor_;
}

const ServerList_Entry& ServerList_Entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerList_2eproto();
  return *default_instance_;
}

ServerList_Entry* ServerList_Entry::default_instance_ = NULL;

ServerList_Entry* ServerList_Entry::New(::google::protobuf::Arena* arena) const {
  ServerList_Entry* n = new ServerList_Entry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerList_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:RAMCloud.ProtoBuf.ServerList.Entry)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ServerList_Entry, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ServerList_Entry*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(server_id_, expected_read_mbytes_per_sec_);
    ZR_(replication_id_, status_);
    if (has_service_locator()) {
      service_locator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ServerList_Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RAMCloud.ProtoBuf.ServerList.Entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 services = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &services_)));
          set_has_services();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_server_id;
        break;
      }

      // required fixed64 server_id = 2;
      case 2: {
        if (tag == 17) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_service_locator;
        break;
      }

      // required string service_locator = 3;
      case 3: {
        if (tag == 26) {
         parse_service_locator:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_locator()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->service_locator().data(), this->service_locator().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RAMCloud.ProtoBuf.ServerList.Entry.service_locator");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_expected_read_mbytes_per_sec;
        break;
      }

      // required fixed32 expected_read_mbytes_per_sec = 5;
      case 5: {
        if (tag == 45) {
         parse_expected_read_mbytes_per_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &expected_read_mbytes_per_sec_)));
          set_has_expected_read_mbytes_per_sec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_status;
        break;
      }

      // required fixed32 status = 6;
      case 6: {
        if (tag == 53) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_replication_id;
        break;
      }

      // required fixed64 replication_id = 7;
      case 7: {
        if (tag == 57) {
         parse_replication_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &replication_id_)));
          set_has_replication_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RAMCloud.ProtoBuf.ServerList.Entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RAMCloud.ProtoBuf.ServerList.Entry)
  return false;
#undef DO_
}

void ServerList_Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RAMCloud.ProtoBuf.ServerList.Entry)
  // required fixed32 services = 1;
  if (has_services()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->services(), output);
  }

  // required fixed64 server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->server_id(), output);
  }

  // required string service_locator = 3;
  if (has_service_locator()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_locator().data(), this->service_locator().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RAMCloud.ProtoBuf.ServerList.Entry.service_locator");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->service_locator(), output);
  }

  // required fixed32 expected_read_mbytes_per_sec = 5;
  if (has_expected_read_mbytes_per_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->expected_read_mbytes_per_sec(), output);
  }

  // required fixed32 status = 6;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(6, this->status(), output);
  }

  // required fixed64 replication_id = 7;
  if (has_replication_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->replication_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RAMCloud.ProtoBuf.ServerList.Entry)
}

::google::protobuf::uint8* ServerList_Entry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RAMCloud.ProtoBuf.ServerList.Entry)
  // required fixed32 services = 1;
  if (has_services()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->services(), target);
  }

  // required fixed64 server_id = 2;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->server_id(), target);
  }

  // required string service_locator = 3;
  if (has_service_locator()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_locator().data(), this->service_locator().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RAMCloud.ProtoBuf.ServerList.Entry.service_locator");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->service_locator(), target);
  }

  // required fixed32 expected_read_mbytes_per_sec = 5;
  if (has_expected_read_mbytes_per_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->expected_read_mbytes_per_sec(), target);
  }

  // required fixed32 status = 6;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(6, this->status(), target);
  }

  // required fixed64 replication_id = 7;
  if (has_replication_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->replication_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RAMCloud.ProtoBuf.ServerList.Entry)
  return target;
}

int ServerList_Entry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RAMCloud.ProtoBuf.ServerList.Entry)
  int total_size = 0;

  if (has_services()) {
    // required fixed32 services = 1;
    total_size += 1 + 4;
  }

  if (has_server_id()) {
    // required fixed64 server_id = 2;
    total_size += 1 + 8;
  }

  if (has_service_locator()) {
    // required string service_locator = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service_locator());
  }

  if (has_expected_read_mbytes_per_sec()) {
    // required fixed32 expected_read_mbytes_per_sec = 5;
    total_size += 1 + 4;
  }

  if (has_status()) {
    // required fixed32 status = 6;
    total_size += 1 + 4;
  }

  if (has_replication_id()) {
    // required fixed64 replication_id = 7;
    total_size += 1 + 8;
  }

  return total_size;
}
int ServerList_Entry::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:RAMCloud.ProtoBuf.ServerList.Entry)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required fixed32 services = 1;
    total_size += 1 + 4;

    // required fixed64 server_id = 2;
    total_size += 1 + 8;

    // required string service_locator = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service_locator());

    // required fixed32 expected_read_mbytes_per_sec = 5;
    total_size += 1 + 4;

    // required fixed32 status = 6;
    total_size += 1 + 4;

    // required fixed64 replication_id = 7;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerList_Entry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RAMCloud.ProtoBuf.ServerList.Entry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ServerList_Entry* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerList_Entry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RAMCloud.ProtoBuf.ServerList.Entry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RAMCloud.ProtoBuf.ServerList.Entry)
    MergeFrom(*source);
  }
}

void ServerList_Entry::MergeFrom(const ServerList_Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RAMCloud.ProtoBuf.ServerList.Entry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_services()) {
      set_services(from.services());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_service_locator()) {
      set_has_service_locator();
      service_locator_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_locator_);
    }
    if (from.has_expected_read_mbytes_per_sec()) {
      set_expected_read_mbytes_per_sec(from.expected_read_mbytes_per_sec());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_replication_id()) {
      set_replication_id(from.replication_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ServerList_Entry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RAMCloud.ProtoBuf.ServerList.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerList_Entry::CopyFrom(const ServerList_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RAMCloud.ProtoBuf.ServerList.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerList_Entry::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void ServerList_Entry::Swap(ServerList_Entry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerList_Entry::InternalSwap(ServerList_Entry* other) {
  std::swap(services_, other->services_);
  std::swap(server_id_, other->server_id_);
  service_locator_.Swap(&other->service_locator_);
  std::swap(expected_read_mbytes_per_sec_, other->expected_read_mbytes_per_sec_);
  std::swap(status_, other->status_);
  std::swap(replication_id_, other->replication_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerList_Entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerList_Entry_descriptor_;
  metadata.reflection = ServerList_Entry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerList::kServerFieldNumber;
const int ServerList::kVersionNumberFieldNumber;
const int ServerList::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerList::ServerList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RAMCloud.ProtoBuf.ServerList)
}

void ServerList::InitAsDefaultInstance() {
}

ServerList::ServerList(const ServerList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RAMCloud.ProtoBuf.ServerList)
}

void ServerList::SharedCtor() {
  _cached_size_ = 0;
  version_number_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerList::~ServerList() {
  // @@protoc_insertion_point(destructor:RAMCloud.ProtoBuf.ServerList)
  SharedDtor();
}

void ServerList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerList_descriptor_;
}

const ServerList& ServerList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerList_2eproto();
  return *default_instance_;
}

ServerList* ServerList::default_instance_ = NULL;

ServerList* ServerList::New(::google::protobuf::Arena* arena) const {
  ServerList* n = new ServerList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerList::Clear() {
// @@protoc_insertion_point(message_clear_start:RAMCloud.ProtoBuf.ServerList)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ServerList, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ServerList*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(version_number_, type_);

#undef ZR_HELPER_
#undef ZR_

  server_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ServerList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RAMCloud.ProtoBuf.ServerList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RAMCloud.ProtoBuf.ServerList.Entry server = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_server:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_server()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_server;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(17)) goto parse_version_number;
        break;
      }

      // required fixed64 version_number = 2;
      case 2: {
        if (tag == 17) {
         parse_version_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &version_number_)));
          set_has_version_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required .RAMCloud.ProtoBuf.ServerList.Type type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::RAMCloud::ProtoBuf::ServerList_Type_IsValid(value)) {
            set_type(static_cast< ::RAMCloud::ProtoBuf::ServerList_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RAMCloud.ProtoBuf.ServerList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RAMCloud.ProtoBuf.ServerList)
  return false;
#undef DO_
}

void ServerList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RAMCloud.ProtoBuf.ServerList)
  // repeated .RAMCloud.ProtoBuf.ServerList.Entry server = 1;
  for (unsigned int i = 0, n = this->server_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->server(i), output);
  }

  // required fixed64 version_number = 2;
  if (has_version_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->version_number(), output);
  }

  // required .RAMCloud.ProtoBuf.ServerList.Type type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RAMCloud.ProtoBuf.ServerList)
}

::google::protobuf::uint8* ServerList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RAMCloud.ProtoBuf.ServerList)
  // repeated .RAMCloud.ProtoBuf.ServerList.Entry server = 1;
  for (unsigned int i = 0, n = this->server_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->server(i), false, target);
  }

  // required fixed64 version_number = 2;
  if (has_version_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->version_number(), target);
  }

  // required .RAMCloud.ProtoBuf.ServerList.Type type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RAMCloud.ProtoBuf.ServerList)
  return target;
}

int ServerList::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RAMCloud.ProtoBuf.ServerList)
  int total_size = 0;

  if (has_version_number()) {
    // required fixed64 version_number = 2;
    total_size += 1 + 8;
  }

  if (has_type()) {
    // required .RAMCloud.ProtoBuf.ServerList.Type type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  return total_size;
}
int ServerList::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:RAMCloud.ProtoBuf.ServerList)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required fixed64 version_number = 2;
    total_size += 1 + 8;

    // required .RAMCloud.ProtoBuf.ServerList.Type type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .RAMCloud.ProtoBuf.ServerList.Entry server = 1;
  total_size += 1 * this->server_size();
  for (int i = 0; i < this->server_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->server(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RAMCloud.ProtoBuf.ServerList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ServerList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RAMCloud.ProtoBuf.ServerList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RAMCloud.ProtoBuf.ServerList)
    MergeFrom(*source);
  }
}

void ServerList::MergeFrom(const ServerList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RAMCloud.ProtoBuf.ServerList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  server_.MergeFrom(from.server_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_version_number()) {
      set_version_number(from.version_number());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ServerList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RAMCloud.ProtoBuf.ServerList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerList::CopyFrom(const ServerList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RAMCloud.ProtoBuf.ServerList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->server())) return false;
  return true;
}

void ServerList::Swap(ServerList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerList::InternalSwap(ServerList* other) {
  server_.UnsafeArenaSwap(&other->server_);
  std::swap(version_number_, other->version_number_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerList_descriptor_;
  metadata.reflection = ServerList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerList_Entry

// required fixed32 services = 1;
bool ServerList_Entry::has_services() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ServerList_Entry::set_has_services() {
  _has_bits_[0] |= 0x00000001u;
}
void ServerList_Entry::clear_has_services() {
  _has_bits_[0] &= ~0x00000001u;
}
void ServerList_Entry::clear_services() {
  services_ = 0u;
  clear_has_services();
}
 ::google::protobuf::uint32 ServerList_Entry::services() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerList.Entry.services)
  return services_;
}
 void ServerList_Entry::set_services(::google::protobuf::uint32 value) {
  set_has_services();
  services_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerList.Entry.services)
}

// required fixed64 server_id = 2;
bool ServerList_Entry::has_server_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ServerList_Entry::set_has_server_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ServerList_Entry::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ServerList_Entry::clear_server_id() {
  server_id_ = GOOGLE_ULONGLONG(0);
  clear_has_server_id();
}
 ::google::protobuf::uint64 ServerList_Entry::server_id() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerList.Entry.server_id)
  return server_id_;
}
 void ServerList_Entry::set_server_id(::google::protobuf::uint64 value) {
  set_has_server_id();
  server_id_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerList.Entry.server_id)
}

// required string service_locator = 3;
bool ServerList_Entry::has_service_locator() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ServerList_Entry::set_has_service_locator() {
  _has_bits_[0] |= 0x00000004u;
}
void ServerList_Entry::clear_has_service_locator() {
  _has_bits_[0] &= ~0x00000004u;
}
void ServerList_Entry::clear_service_locator() {
  service_locator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_service_locator();
}
 const ::std::string& ServerList_Entry::service_locator() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerList.Entry.service_locator)
  return service_locator_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServerList_Entry::set_service_locator(const ::std::string& value) {
  set_has_service_locator();
  service_locator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerList.Entry.service_locator)
}
 void ServerList_Entry::set_service_locator(const char* value) {
  set_has_service_locator();
  service_locator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RAMCloud.ProtoBuf.ServerList.Entry.service_locator)
}
 void ServerList_Entry::set_service_locator(const char* value, size_t size) {
  set_has_service_locator();
  service_locator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RAMCloud.ProtoBuf.ServerList.Entry.service_locator)
}
 ::std::string* ServerList_Entry::mutable_service_locator() {
  set_has_service_locator();
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.ServerList.Entry.service_locator)
  return service_locator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ServerList_Entry::release_service_locator() {
  // @@protoc_insertion_point(field_release:RAMCloud.ProtoBuf.ServerList.Entry.service_locator)
  clear_has_service_locator();
  return service_locator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServerList_Entry::set_allocated_service_locator(::std::string* service_locator) {
  if (service_locator != NULL) {
    set_has_service_locator();
  } else {
    clear_has_service_locator();
  }
  service_locator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_locator);
  // @@protoc_insertion_point(field_set_allocated:RAMCloud.ProtoBuf.ServerList.Entry.service_locator)
}

// required fixed32 expected_read_mbytes_per_sec = 5;
bool ServerList_Entry::has_expected_read_mbytes_per_sec() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ServerList_Entry::set_has_expected_read_mbytes_per_sec() {
  _has_bits_[0] |= 0x00000008u;
}
void ServerList_Entry::clear_has_expected_read_mbytes_per_sec() {
  _has_bits_[0] &= ~0x00000008u;
}
void ServerList_Entry::clear_expected_read_mbytes_per_sec() {
  expected_read_mbytes_per_sec_ = 0u;
  clear_has_expected_read_mbytes_per_sec();
}
 ::google::protobuf::uint32 ServerList_Entry::expected_read_mbytes_per_sec() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerList.Entry.expected_read_mbytes_per_sec)
  return expected_read_mbytes_per_sec_;
}
 void ServerList_Entry::set_expected_read_mbytes_per_sec(::google::protobuf::uint32 value) {
  set_has_expected_read_mbytes_per_sec();
  expected_read_mbytes_per_sec_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerList.Entry.expected_read_mbytes_per_sec)
}

// required fixed32 status = 6;
bool ServerList_Entry::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ServerList_Entry::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
void ServerList_Entry::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
void ServerList_Entry::clear_status() {
  status_ = 0u;
  clear_has_status();
}
 ::google::protobuf::uint32 ServerList_Entry::status() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerList.Entry.status)
  return status_;
}
 void ServerList_Entry::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerList.Entry.status)
}

// required fixed64 replication_id = 7;
bool ServerList_Entry::has_replication_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ServerList_Entry::set_has_replication_id() {
  _has_bits_[0] |= 0x00000020u;
}
void ServerList_Entry::clear_has_replication_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void ServerList_Entry::clear_replication_id() {
  replication_id_ = GOOGLE_ULONGLONG(0);
  clear_has_replication_id();
}
 ::google::protobuf::uint64 ServerList_Entry::replication_id() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerList.Entry.replication_id)
  return replication_id_;
}
 void ServerList_Entry::set_replication_id(::google::protobuf::uint64 value) {
  set_has_replication_id();
  replication_id_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerList.Entry.replication_id)
}

// -------------------------------------------------------------------

// ServerList

// repeated .RAMCloud.ProtoBuf.ServerList.Entry server = 1;
int ServerList::server_size() const {
  return server_.size();
}
void ServerList::clear_server() {
  server_.Clear();
}
const ::RAMCloud::ProtoBuf::ServerList_Entry& ServerList::server(int index) const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerList.server)
  return server_.Get(index);
}
::RAMCloud::ProtoBuf::ServerList_Entry* ServerList::mutable_server(int index) {
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.ServerList.server)
  return server_.Mutable(index);
}
::RAMCloud::ProtoBuf::ServerList_Entry* ServerList::add_server() {
  // @@protoc_insertion_point(field_add:RAMCloud.ProtoBuf.ServerList.server)
  return server_.Add();
}
::google::protobuf::RepeatedPtrField< ::RAMCloud::ProtoBuf::ServerList_Entry >*
ServerList::mutable_server() {
  // @@protoc_insertion_point(field_mutable_list:RAMCloud.ProtoBuf.ServerList.server)
  return &server_;
}
const ::google::protobuf::RepeatedPtrField< ::RAMCloud::ProtoBuf::ServerList_Entry >&
ServerList::server() const {
  // @@protoc_insertion_point(field_list:RAMCloud.ProtoBuf.ServerList.server)
  return server_;
}

// required fixed64 version_number = 2;
bool ServerList::has_version_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ServerList::set_has_version_number() {
  _has_bits_[0] |= 0x00000002u;
}
void ServerList::clear_has_version_number() {
  _has_bits_[0] &= ~0x00000002u;
}
void ServerList::clear_version_number() {
  version_number_ = GOOGLE_ULONGLONG(0);
  clear_has_version_number();
}
 ::google::protobuf::uint64 ServerList::version_number() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerList.version_number)
  return version_number_;
}
 void ServerList::set_version_number(::google::protobuf::uint64 value) {
  set_has_version_number();
  version_number_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerList.version_number)
}

// required .RAMCloud.ProtoBuf.ServerList.Type type = 3;
bool ServerList::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ServerList::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void ServerList::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void ServerList::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::RAMCloud::ProtoBuf::ServerList_Type ServerList::type() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerList.type)
  return static_cast< ::RAMCloud::ProtoBuf::ServerList_Type >(type_);
}
 void ServerList::set_type(::RAMCloud::ProtoBuf::ServerList_Type value) {
  assert(::RAMCloud::ProtoBuf::ServerList_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerList.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoBuf
}  // namespace RAMCloud

// @@protoc_insertion_point(global_scope)
// RAMCloud pragma [GCCWARN=0]
