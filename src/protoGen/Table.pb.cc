// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Table.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Table.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace RAMCloud {
namespace ProtoBuf {

namespace {

const ::google::protobuf::Descriptor* Table_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Table_reflection_ = NULL;
const ::google::protobuf::Descriptor* Table_Tablet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Table_Tablet_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Table_Tablet_State_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Table_Split_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Table_Split_reflection_ = NULL;
const ::google::protobuf::Descriptor* Table_Reassign_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Table_Reassign_reflection_ = NULL;
const ::google::protobuf::Descriptor* Table_Index_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Table_Index_reflection_ = NULL;
const ::google::protobuf::Descriptor* Table_Index_Indexlet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Table_Index_Indexlet_reflection_ = NULL;
const ::google::protobuf::Descriptor* Table_ReassignIndexlet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Table_ReassignIndexlet_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Table_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_Table_2eproto() {
  protobuf_AddDesc_Table_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Table.proto");
  GOOGLE_CHECK(file != NULL);
  Table_descriptor_ = file->message_type(0);
  static const int Table_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, tablet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, sequence_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, created_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, deleted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, split_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, reassign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, reassign_indexlet_),
  };
  Table_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Table_descriptor_,
      Table::default_instance_,
      Table_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, _has_bits_[0]),
      -1,
      -1,
      sizeof(Table),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, _internal_metadata_),
      -1);
  Table_Tablet_descriptor_ = Table_descriptor_->nested_type(0);
  static const int Table_Tablet_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table_Tablet, start_key_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table_Tablet, end_key_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table_Tablet, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table_Tablet, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table_Tablet, ctime_log_head_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table_Tablet, ctime_log_head_offset_),
  };
  Table_Tablet_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Table_Tablet_descriptor_,
      Table_Tablet::default_instance_,
      Table_Tablet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table_Tablet, _has_bits_[0]),
      -1,
      -1,
      sizeof(Table_Tablet),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table_Tablet, _internal_metadata_),
      -1);
  Table_Tablet_State_descriptor_ = Table_Tablet_descriptor_->enum_type(0);
  Table_Split_descriptor_ = Table_descriptor_->nested_type(1);
  static const int Table_Split_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table_Split, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table_Split, split_key_hash_),
  };
  Table_Split_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Table_Split_descriptor_,
      Table_Split::default_instance_,
      Table_Split_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table_Split, _has_bits_[0]),
      -1,
      -1,
      sizeof(Table_Split),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table_Split, _internal_metadata_),
      -1);
  Table_Reassign_descriptor_ = Table_descriptor_->nested_type(2);
  static const int Table_Reassign_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table_Reassign, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table_Reassign, start_key_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table_Reassign, end_key_hash_),
  };
  Table_Reassign_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Table_Reassign_descriptor_,
      Table_Reassign::default_instance_,
      Table_Reassign_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table_Reassign, _has_bits_[0]),
      -1,
      -1,
      sizeof(Table_Reassign),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table_Reassign, _internal_metadata_),
      -1);
  Table_Index_descriptor_ = Table_descriptor_->nested_type(3);
  static const int Table_Index_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table_Index, index_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table_Index, indexlet_),
  };
  Table_Index_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Table_Index_descriptor_,
      Table_Index::default_instance_,
      Table_Index_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table_Index, _has_bits_[0]),
      -1,
      -1,
      sizeof(Table_Index),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table_Index, _internal_metadata_),
      -1);
  Table_Index_Indexlet_descriptor_ = Table_Index_descriptor_->nested_type(0);
  static const int Table_Index_Indexlet_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table_Index_Indexlet, first_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table_Index_Indexlet, first_not_owned_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table_Index_Indexlet, backing_table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table_Index_Indexlet, server_id_),
  };
  Table_Index_Indexlet_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Table_Index_Indexlet_descriptor_,
      Table_Index_Indexlet::default_instance_,
      Table_Index_Indexlet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table_Index_Indexlet, _has_bits_[0]),
      -1,
      -1,
      sizeof(Table_Index_Indexlet),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table_Index_Indexlet, _internal_metadata_),
      -1);
  Table_ReassignIndexlet_descriptor_ = Table_descriptor_->nested_type(4);
  static const int Table_ReassignIndexlet_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table_ReassignIndexlet, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table_ReassignIndexlet, index_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table_ReassignIndexlet, first_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table_ReassignIndexlet, first_not_owned_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table_ReassignIndexlet, backing_table_id_),
  };
  Table_ReassignIndexlet_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Table_ReassignIndexlet_descriptor_,
      Table_ReassignIndexlet::default_instance_,
      Table_ReassignIndexlet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table_ReassignIndexlet, _has_bits_[0]),
      -1,
      -1,
      sizeof(Table_ReassignIndexlet),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table_ReassignIndexlet, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Table_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Table_descriptor_, &Table::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Table_Tablet_descriptor_, &Table_Tablet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Table_Split_descriptor_, &Table_Split::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Table_Reassign_descriptor_, &Table_Reassign::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Table_Index_descriptor_, &Table_Index::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Table_Index_Indexlet_descriptor_, &Table_Index_Indexlet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Table_ReassignIndexlet_descriptor_, &Table_ReassignIndexlet::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Table_2eproto() {
  delete Table::default_instance_;
  delete Table_reflection_;
  delete Table_Tablet::default_instance_;
  delete Table_Tablet_reflection_;
  delete Table_Split::default_instance_;
  delete Table_Split_reflection_;
  delete Table_Reassign::default_instance_;
  delete Table_Reassign_reflection_;
  delete Table_Index::default_instance_;
  delete Table_Index_reflection_;
  delete Table_Index_Indexlet::default_instance_;
  delete Table_Index_Indexlet_reflection_;
  delete Table_ReassignIndexlet::default_instance_;
  delete Table_ReassignIndexlet_reflection_;
}

void protobuf_AddDesc_Table_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_Table_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013Table.proto\022\021RAMCloud.ProtoBuf\"\227\010\n\005Tab"
    "le\022\014\n\004name\030\001 \002(\t\022\n\n\002id\030\002 \002(\004\022/\n\006tablet\030\003"
    " \003(\0132\037.RAMCloud.ProtoBuf.Table.Tablet\022\027\n"
    "\017sequence_number\030\004 \002(\004\022\017\n\007created\030\005 \001(\010\022"
    "\017\n\007deleted\030\006 \001(\010\022-\n\005split\030\007 \001(\0132\036.RAMClo"
    "ud.ProtoBuf.Table.Split\0223\n\010reassign\030\010 \001("
    "\0132!.RAMCloud.ProtoBuf.Table.Reassign\022-\n\005"
    "index\030\t \003(\0132\036.RAMCloud.ProtoBuf.Table.In"
    "dex\022D\n\021reassign_indexlet\030\n \001(\0132).RAMClou"
    "d.ProtoBuf.Table.ReassignIndexlet\032\351\001\n\006Ta"
    "blet\022\026\n\016start_key_hash\030\001 \002(\004\022\024\n\014end_key_"
    "hash\030\002 \002(\004\0224\n\005state\030\003 \002(\0162%.RAMCloud.Pro"
    "toBuf.Table.Tablet.State\022\021\n\tserver_id\030\004 "
    "\002(\006\022\031\n\021ctime_log_head_id\030\005 \002(\004\022\035\n\025ctime_"
    "log_head_offset\030\006 \002(\r\".\n\005State\022\n\n\006NORMAL"
    "\020\000\022\016\n\nRECOVERING\020\001\022\t\n\005BOGUS\020\002\0322\n\005Split\022\021"
    "\n\tserver_id\030\001 \002(\006\022\026\n\016split_key_hash\030\002 \002("
    "\004\032K\n\010Reassign\022\021\n\tserver_id\030\001 \002(\006\022\026\n\016star"
    "t_key_hash\030\002 \002(\004\022\024\n\014end_key_hash\030\003 \002(\004\032\275"
    "\001\n\005Index\022\020\n\010index_id\030\001 \002(\r\0229\n\010indexlet\030\002"
    " \003(\0132\'.RAMCloud.ProtoBuf.Table.Index.Ind"
    "exlet\032g\n\010Indexlet\022\021\n\tfirst_key\030\001 \002(\t\022\033\n\023"
    "first_not_owned_key\030\002 \002(\t\022\030\n\020backing_tab"
    "le_id\030\003 \002(\004\022\021\n\tserver_id\030\004 \002(\006\032\201\001\n\020Reass"
    "ignIndexlet\022\021\n\tserver_id\030\001 \002(\006\022\020\n\010index_"
    "id\030\002 \002(\r\022\021\n\tfirst_key\030\003 \002(\014\022\033\n\023first_not"
    "_owned_key\030\004 \002(\014\022\030\n\020backing_table_id\030\005 \002"
    "(\004", 1082);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Table.proto", &protobuf_RegisterTypes);
  Table::default_instance_ = new Table();
  Table_Tablet::default_instance_ = new Table_Tablet();
  Table_Split::default_instance_ = new Table_Split();
  Table_Reassign::default_instance_ = new Table_Reassign();
  Table_Index::default_instance_ = new Table_Index();
  Table_Index_Indexlet::default_instance_ = new Table_Index_Indexlet();
  Table_ReassignIndexlet::default_instance_ = new Table_ReassignIndexlet();
  Table::default_instance_->InitAsDefaultInstance();
  Table_Tablet::default_instance_->InitAsDefaultInstance();
  Table_Split::default_instance_->InitAsDefaultInstance();
  Table_Reassign::default_instance_->InitAsDefaultInstance();
  Table_Index::default_instance_->InitAsDefaultInstance();
  Table_Index_Indexlet::default_instance_->InitAsDefaultInstance();
  Table_ReassignIndexlet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Table_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Table_2eproto {
  StaticDescriptorInitializer_Table_2eproto() {
    protobuf_AddDesc_Table_2eproto();
  }
} static_descriptor_initializer_Table_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Table_Tablet_State_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Table_Tablet_State_descriptor_;
}
bool Table_Tablet_State_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Table_Tablet_State Table_Tablet::NORMAL;
const Table_Tablet_State Table_Tablet::RECOVERING;
const Table_Tablet_State Table_Tablet::BOGUS;
const Table_Tablet_State Table_Tablet::State_MIN;
const Table_Tablet_State Table_Tablet::State_MAX;
const int Table_Tablet::State_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Table_Tablet::kStartKeyHashFieldNumber;
const int Table_Tablet::kEndKeyHashFieldNumber;
const int Table_Tablet::kStateFieldNumber;
const int Table_Tablet::kServerIdFieldNumber;
const int Table_Tablet::kCtimeLogHeadIdFieldNumber;
const int Table_Tablet::kCtimeLogHeadOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Table_Tablet::Table_Tablet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RAMCloud.ProtoBuf.Table.Tablet)
}

void Table_Tablet::InitAsDefaultInstance() {
}

Table_Tablet::Table_Tablet(const Table_Tablet& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RAMCloud.ProtoBuf.Table.Tablet)
}

void Table_Tablet::SharedCtor() {
  _cached_size_ = 0;
  start_key_hash_ = GOOGLE_ULONGLONG(0);
  end_key_hash_ = GOOGLE_ULONGLONG(0);
  state_ = 0;
  server_id_ = GOOGLE_ULONGLONG(0);
  ctime_log_head_id_ = GOOGLE_ULONGLONG(0);
  ctime_log_head_offset_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Table_Tablet::~Table_Tablet() {
  // @@protoc_insertion_point(destructor:RAMCloud.ProtoBuf.Table.Tablet)
  SharedDtor();
}

void Table_Tablet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Table_Tablet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Table_Tablet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Table_Tablet_descriptor_;
}

const Table_Tablet& Table_Tablet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Table_2eproto();
  return *default_instance_;
}

Table_Tablet* Table_Tablet::default_instance_ = NULL;

Table_Tablet* Table_Tablet::New(::google::protobuf::Arena* arena) const {
  Table_Tablet* n = new Table_Tablet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Table_Tablet::Clear() {
// @@protoc_insertion_point(message_clear_start:RAMCloud.ProtoBuf.Table.Tablet)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Table_Tablet, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Table_Tablet*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(start_key_hash_, ctime_log_head_id_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Table_Tablet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RAMCloud.ProtoBuf.Table.Tablet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 start_key_hash = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_key_hash_)));
          set_has_start_key_hash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_end_key_hash;
        break;
      }

      // required uint64 end_key_hash = 2;
      case 2: {
        if (tag == 16) {
         parse_end_key_hash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_key_hash_)));
          set_has_end_key_hash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // required .RAMCloud.ProtoBuf.Table.Tablet.State state = 3;
      case 3: {
        if (tag == 24) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::RAMCloud::ProtoBuf::Table_Tablet_State_IsValid(value)) {
            set_state(static_cast< ::RAMCloud::ProtoBuf::Table_Tablet_State >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_server_id;
        break;
      }

      // required fixed64 server_id = 4;
      case 4: {
        if (tag == 33) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ctime_log_head_id;
        break;
      }

      // required uint64 ctime_log_head_id = 5;
      case 5: {
        if (tag == 40) {
         parse_ctime_log_head_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ctime_log_head_id_)));
          set_has_ctime_log_head_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ctime_log_head_offset;
        break;
      }

      // required uint32 ctime_log_head_offset = 6;
      case 6: {
        if (tag == 48) {
         parse_ctime_log_head_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ctime_log_head_offset_)));
          set_has_ctime_log_head_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RAMCloud.ProtoBuf.Table.Tablet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RAMCloud.ProtoBuf.Table.Tablet)
  return false;
#undef DO_
}

void Table_Tablet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RAMCloud.ProtoBuf.Table.Tablet)
  // required uint64 start_key_hash = 1;
  if (has_start_key_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->start_key_hash(), output);
  }

  // required uint64 end_key_hash = 2;
  if (has_end_key_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->end_key_hash(), output);
  }

  // required .RAMCloud.ProtoBuf.Table.Tablet.State state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->state(), output);
  }

  // required fixed64 server_id = 4;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->server_id(), output);
  }

  // required uint64 ctime_log_head_id = 5;
  if (has_ctime_log_head_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->ctime_log_head_id(), output);
  }

  // required uint32 ctime_log_head_offset = 6;
  if (has_ctime_log_head_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->ctime_log_head_offset(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RAMCloud.ProtoBuf.Table.Tablet)
}

::google::protobuf::uint8* Table_Tablet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RAMCloud.ProtoBuf.Table.Tablet)
  // required uint64 start_key_hash = 1;
  if (has_start_key_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->start_key_hash(), target);
  }

  // required uint64 end_key_hash = 2;
  if (has_end_key_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->end_key_hash(), target);
  }

  // required .RAMCloud.ProtoBuf.Table.Tablet.State state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->state(), target);
  }

  // required fixed64 server_id = 4;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->server_id(), target);
  }

  // required uint64 ctime_log_head_id = 5;
  if (has_ctime_log_head_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->ctime_log_head_id(), target);
  }

  // required uint32 ctime_log_head_offset = 6;
  if (has_ctime_log_head_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->ctime_log_head_offset(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RAMCloud.ProtoBuf.Table.Tablet)
  return target;
}

int Table_Tablet::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RAMCloud.ProtoBuf.Table.Tablet)
  int total_size = 0;

  if (has_start_key_hash()) {
    // required uint64 start_key_hash = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->start_key_hash());
  }

  if (has_end_key_hash()) {
    // required uint64 end_key_hash = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->end_key_hash());
  }

  if (has_state()) {
    // required .RAMCloud.ProtoBuf.Table.Tablet.State state = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  if (has_server_id()) {
    // required fixed64 server_id = 4;
    total_size += 1 + 8;
  }

  if (has_ctime_log_head_id()) {
    // required uint64 ctime_log_head_id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ctime_log_head_id());
  }

  if (has_ctime_log_head_offset()) {
    // required uint32 ctime_log_head_offset = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ctime_log_head_offset());
  }

  return total_size;
}
int Table_Tablet::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:RAMCloud.ProtoBuf.Table.Tablet)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required uint64 start_key_hash = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->start_key_hash());

    // required uint64 end_key_hash = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->end_key_hash());

    // required .RAMCloud.ProtoBuf.Table.Tablet.State state = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());

    // required fixed64 server_id = 4;
    total_size += 1 + 8;

    // required uint64 ctime_log_head_id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ctime_log_head_id());

    // required uint32 ctime_log_head_offset = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ctime_log_head_offset());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Table_Tablet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RAMCloud.ProtoBuf.Table.Tablet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Table_Tablet* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Table_Tablet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RAMCloud.ProtoBuf.Table.Tablet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RAMCloud.ProtoBuf.Table.Tablet)
    MergeFrom(*source);
  }
}

void Table_Tablet::MergeFrom(const Table_Tablet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RAMCloud.ProtoBuf.Table.Tablet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_key_hash()) {
      set_start_key_hash(from.start_key_hash());
    }
    if (from.has_end_key_hash()) {
      set_end_key_hash(from.end_key_hash());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_ctime_log_head_id()) {
      set_ctime_log_head_id(from.ctime_log_head_id());
    }
    if (from.has_ctime_log_head_offset()) {
      set_ctime_log_head_offset(from.ctime_log_head_offset());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Table_Tablet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RAMCloud.ProtoBuf.Table.Tablet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Table_Tablet::CopyFrom(const Table_Tablet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RAMCloud.ProtoBuf.Table.Tablet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Table_Tablet::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void Table_Tablet::Swap(Table_Tablet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Table_Tablet::InternalSwap(Table_Tablet* other) {
  std::swap(start_key_hash_, other->start_key_hash_);
  std::swap(end_key_hash_, other->end_key_hash_);
  std::swap(state_, other->state_);
  std::swap(server_id_, other->server_id_);
  std::swap(ctime_log_head_id_, other->ctime_log_head_id_);
  std::swap(ctime_log_head_offset_, other->ctime_log_head_offset_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Table_Tablet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Table_Tablet_descriptor_;
  metadata.reflection = Table_Tablet_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Table_Split::kServerIdFieldNumber;
const int Table_Split::kSplitKeyHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Table_Split::Table_Split()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RAMCloud.ProtoBuf.Table.Split)
}

void Table_Split::InitAsDefaultInstance() {
}

Table_Split::Table_Split(const Table_Split& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RAMCloud.ProtoBuf.Table.Split)
}

void Table_Split::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = GOOGLE_ULONGLONG(0);
  split_key_hash_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Table_Split::~Table_Split() {
  // @@protoc_insertion_point(destructor:RAMCloud.ProtoBuf.Table.Split)
  SharedDtor();
}

void Table_Split::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Table_Split::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Table_Split::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Table_Split_descriptor_;
}

const Table_Split& Table_Split::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Table_2eproto();
  return *default_instance_;
}

Table_Split* Table_Split::default_instance_ = NULL;

Table_Split* Table_Split::New(::google::protobuf::Arena* arena) const {
  Table_Split* n = new Table_Split;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Table_Split::Clear() {
// @@protoc_insertion_point(message_clear_start:RAMCloud.ProtoBuf.Table.Split)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Table_Split, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Table_Split*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(server_id_, split_key_hash_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Table_Split::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RAMCloud.ProtoBuf.Table.Split)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 server_id = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_split_key_hash;
        break;
      }

      // required uint64 split_key_hash = 2;
      case 2: {
        if (tag == 16) {
         parse_split_key_hash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &split_key_hash_)));
          set_has_split_key_hash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RAMCloud.ProtoBuf.Table.Split)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RAMCloud.ProtoBuf.Table.Split)
  return false;
#undef DO_
}

void Table_Split::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RAMCloud.ProtoBuf.Table.Split)
  // required fixed64 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->server_id(), output);
  }

  // required uint64 split_key_hash = 2;
  if (has_split_key_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->split_key_hash(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RAMCloud.ProtoBuf.Table.Split)
}

::google::protobuf::uint8* Table_Split::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RAMCloud.ProtoBuf.Table.Split)
  // required fixed64 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->server_id(), target);
  }

  // required uint64 split_key_hash = 2;
  if (has_split_key_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->split_key_hash(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RAMCloud.ProtoBuf.Table.Split)
  return target;
}

int Table_Split::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RAMCloud.ProtoBuf.Table.Split)
  int total_size = 0;

  if (has_server_id()) {
    // required fixed64 server_id = 1;
    total_size += 1 + 8;
  }

  if (has_split_key_hash()) {
    // required uint64 split_key_hash = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->split_key_hash());
  }

  return total_size;
}
int Table_Split::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:RAMCloud.ProtoBuf.Table.Split)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required fixed64 server_id = 1;
    total_size += 1 + 8;

    // required uint64 split_key_hash = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->split_key_hash());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Table_Split::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RAMCloud.ProtoBuf.Table.Split)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Table_Split* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Table_Split>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RAMCloud.ProtoBuf.Table.Split)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RAMCloud.ProtoBuf.Table.Split)
    MergeFrom(*source);
  }
}

void Table_Split::MergeFrom(const Table_Split& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RAMCloud.ProtoBuf.Table.Split)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_split_key_hash()) {
      set_split_key_hash(from.split_key_hash());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Table_Split::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RAMCloud.ProtoBuf.Table.Split)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Table_Split::CopyFrom(const Table_Split& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RAMCloud.ProtoBuf.Table.Split)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Table_Split::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Table_Split::Swap(Table_Split* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Table_Split::InternalSwap(Table_Split* other) {
  std::swap(server_id_, other->server_id_);
  std::swap(split_key_hash_, other->split_key_hash_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Table_Split::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Table_Split_descriptor_;
  metadata.reflection = Table_Split_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Table_Reassign::kServerIdFieldNumber;
const int Table_Reassign::kStartKeyHashFieldNumber;
const int Table_Reassign::kEndKeyHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Table_Reassign::Table_Reassign()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RAMCloud.ProtoBuf.Table.Reassign)
}

void Table_Reassign::InitAsDefaultInstance() {
}

Table_Reassign::Table_Reassign(const Table_Reassign& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RAMCloud.ProtoBuf.Table.Reassign)
}

void Table_Reassign::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = GOOGLE_ULONGLONG(0);
  start_key_hash_ = GOOGLE_ULONGLONG(0);
  end_key_hash_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Table_Reassign::~Table_Reassign() {
  // @@protoc_insertion_point(destructor:RAMCloud.ProtoBuf.Table.Reassign)
  SharedDtor();
}

void Table_Reassign::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Table_Reassign::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Table_Reassign::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Table_Reassign_descriptor_;
}

const Table_Reassign& Table_Reassign::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Table_2eproto();
  return *default_instance_;
}

Table_Reassign* Table_Reassign::default_instance_ = NULL;

Table_Reassign* Table_Reassign::New(::google::protobuf::Arena* arena) const {
  Table_Reassign* n = new Table_Reassign;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Table_Reassign::Clear() {
// @@protoc_insertion_point(message_clear_start:RAMCloud.ProtoBuf.Table.Reassign)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Table_Reassign, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Table_Reassign*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(server_id_, end_key_hash_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Table_Reassign::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RAMCloud.ProtoBuf.Table.Reassign)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 server_id = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_start_key_hash;
        break;
      }

      // required uint64 start_key_hash = 2;
      case 2: {
        if (tag == 16) {
         parse_start_key_hash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_key_hash_)));
          set_has_start_key_hash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_end_key_hash;
        break;
      }

      // required uint64 end_key_hash = 3;
      case 3: {
        if (tag == 24) {
         parse_end_key_hash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_key_hash_)));
          set_has_end_key_hash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RAMCloud.ProtoBuf.Table.Reassign)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RAMCloud.ProtoBuf.Table.Reassign)
  return false;
#undef DO_
}

void Table_Reassign::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RAMCloud.ProtoBuf.Table.Reassign)
  // required fixed64 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->server_id(), output);
  }

  // required uint64 start_key_hash = 2;
  if (has_start_key_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->start_key_hash(), output);
  }

  // required uint64 end_key_hash = 3;
  if (has_end_key_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->end_key_hash(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RAMCloud.ProtoBuf.Table.Reassign)
}

::google::protobuf::uint8* Table_Reassign::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RAMCloud.ProtoBuf.Table.Reassign)
  // required fixed64 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->server_id(), target);
  }

  // required uint64 start_key_hash = 2;
  if (has_start_key_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->start_key_hash(), target);
  }

  // required uint64 end_key_hash = 3;
  if (has_end_key_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->end_key_hash(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RAMCloud.ProtoBuf.Table.Reassign)
  return target;
}

int Table_Reassign::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RAMCloud.ProtoBuf.Table.Reassign)
  int total_size = 0;

  if (has_server_id()) {
    // required fixed64 server_id = 1;
    total_size += 1 + 8;
  }

  if (has_start_key_hash()) {
    // required uint64 start_key_hash = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->start_key_hash());
  }

  if (has_end_key_hash()) {
    // required uint64 end_key_hash = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->end_key_hash());
  }

  return total_size;
}
int Table_Reassign::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:RAMCloud.ProtoBuf.Table.Reassign)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required fixed64 server_id = 1;
    total_size += 1 + 8;

    // required uint64 start_key_hash = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->start_key_hash());

    // required uint64 end_key_hash = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->end_key_hash());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Table_Reassign::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RAMCloud.ProtoBuf.Table.Reassign)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Table_Reassign* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Table_Reassign>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RAMCloud.ProtoBuf.Table.Reassign)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RAMCloud.ProtoBuf.Table.Reassign)
    MergeFrom(*source);
  }
}

void Table_Reassign::MergeFrom(const Table_Reassign& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RAMCloud.ProtoBuf.Table.Reassign)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_start_key_hash()) {
      set_start_key_hash(from.start_key_hash());
    }
    if (from.has_end_key_hash()) {
      set_end_key_hash(from.end_key_hash());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Table_Reassign::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RAMCloud.ProtoBuf.Table.Reassign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Table_Reassign::CopyFrom(const Table_Reassign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RAMCloud.ProtoBuf.Table.Reassign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Table_Reassign::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Table_Reassign::Swap(Table_Reassign* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Table_Reassign::InternalSwap(Table_Reassign* other) {
  std::swap(server_id_, other->server_id_);
  std::swap(start_key_hash_, other->start_key_hash_);
  std::swap(end_key_hash_, other->end_key_hash_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Table_Reassign::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Table_Reassign_descriptor_;
  metadata.reflection = Table_Reassign_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Table_Index_Indexlet::kFirstKeyFieldNumber;
const int Table_Index_Indexlet::kFirstNotOwnedKeyFieldNumber;
const int Table_Index_Indexlet::kBackingTableIdFieldNumber;
const int Table_Index_Indexlet::kServerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Table_Index_Indexlet::Table_Index_Indexlet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RAMCloud.ProtoBuf.Table.Index.Indexlet)
}

void Table_Index_Indexlet::InitAsDefaultInstance() {
}

Table_Index_Indexlet::Table_Index_Indexlet(const Table_Index_Indexlet& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RAMCloud.ProtoBuf.Table.Index.Indexlet)
}

void Table_Index_Indexlet::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  first_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  first_not_owned_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  backing_table_id_ = GOOGLE_ULONGLONG(0);
  server_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Table_Index_Indexlet::~Table_Index_Indexlet() {
  // @@protoc_insertion_point(destructor:RAMCloud.ProtoBuf.Table.Index.Indexlet)
  SharedDtor();
}

void Table_Index_Indexlet::SharedDtor() {
  first_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  first_not_owned_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Table_Index_Indexlet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Table_Index_Indexlet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Table_Index_Indexlet_descriptor_;
}

const Table_Index_Indexlet& Table_Index_Indexlet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Table_2eproto();
  return *default_instance_;
}

Table_Index_Indexlet* Table_Index_Indexlet::default_instance_ = NULL;

Table_Index_Indexlet* Table_Index_Indexlet::New(::google::protobuf::Arena* arena) const {
  Table_Index_Indexlet* n = new Table_Index_Indexlet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Table_Index_Indexlet::Clear() {
// @@protoc_insertion_point(message_clear_start:RAMCloud.ProtoBuf.Table.Index.Indexlet)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Table_Index_Indexlet, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Table_Index_Indexlet*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(backing_table_id_, server_id_);
    if (has_first_key()) {
      first_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_first_not_owned_key()) {
      first_not_owned_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Table_Index_Indexlet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RAMCloud.ProtoBuf.Table.Index.Indexlet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string first_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_first_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->first_key().data(), this->first_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RAMCloud.ProtoBuf.Table.Index.Indexlet.first_key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_first_not_owned_key;
        break;
      }

      // required string first_not_owned_key = 2;
      case 2: {
        if (tag == 18) {
         parse_first_not_owned_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_first_not_owned_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->first_not_owned_key().data(), this->first_not_owned_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RAMCloud.ProtoBuf.Table.Index.Indexlet.first_not_owned_key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_backing_table_id;
        break;
      }

      // required uint64 backing_table_id = 3;
      case 3: {
        if (tag == 24) {
         parse_backing_table_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &backing_table_id_)));
          set_has_backing_table_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_server_id;
        break;
      }

      // required fixed64 server_id = 4;
      case 4: {
        if (tag == 33) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RAMCloud.ProtoBuf.Table.Index.Indexlet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RAMCloud.ProtoBuf.Table.Index.Indexlet)
  return false;
#undef DO_
}

void Table_Index_Indexlet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RAMCloud.ProtoBuf.Table.Index.Indexlet)
  // required string first_key = 1;
  if (has_first_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->first_key().data(), this->first_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RAMCloud.ProtoBuf.Table.Index.Indexlet.first_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->first_key(), output);
  }

  // required string first_not_owned_key = 2;
  if (has_first_not_owned_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->first_not_owned_key().data(), this->first_not_owned_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RAMCloud.ProtoBuf.Table.Index.Indexlet.first_not_owned_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->first_not_owned_key(), output);
  }

  // required uint64 backing_table_id = 3;
  if (has_backing_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->backing_table_id(), output);
  }

  // required fixed64 server_id = 4;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->server_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RAMCloud.ProtoBuf.Table.Index.Indexlet)
}

::google::protobuf::uint8* Table_Index_Indexlet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RAMCloud.ProtoBuf.Table.Index.Indexlet)
  // required string first_key = 1;
  if (has_first_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->first_key().data(), this->first_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RAMCloud.ProtoBuf.Table.Index.Indexlet.first_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->first_key(), target);
  }

  // required string first_not_owned_key = 2;
  if (has_first_not_owned_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->first_not_owned_key().data(), this->first_not_owned_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RAMCloud.ProtoBuf.Table.Index.Indexlet.first_not_owned_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->first_not_owned_key(), target);
  }

  // required uint64 backing_table_id = 3;
  if (has_backing_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->backing_table_id(), target);
  }

  // required fixed64 server_id = 4;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->server_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RAMCloud.ProtoBuf.Table.Index.Indexlet)
  return target;
}

int Table_Index_Indexlet::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RAMCloud.ProtoBuf.Table.Index.Indexlet)
  int total_size = 0;

  if (has_first_key()) {
    // required string first_key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->first_key());
  }

  if (has_first_not_owned_key()) {
    // required string first_not_owned_key = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->first_not_owned_key());
  }

  if (has_backing_table_id()) {
    // required uint64 backing_table_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->backing_table_id());
  }

  if (has_server_id()) {
    // required fixed64 server_id = 4;
    total_size += 1 + 8;
  }

  return total_size;
}
int Table_Index_Indexlet::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:RAMCloud.ProtoBuf.Table.Index.Indexlet)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string first_key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->first_key());

    // required string first_not_owned_key = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->first_not_owned_key());

    // required uint64 backing_table_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->backing_table_id());

    // required fixed64 server_id = 4;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Table_Index_Indexlet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RAMCloud.ProtoBuf.Table.Index.Indexlet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Table_Index_Indexlet* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Table_Index_Indexlet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RAMCloud.ProtoBuf.Table.Index.Indexlet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RAMCloud.ProtoBuf.Table.Index.Indexlet)
    MergeFrom(*source);
  }
}

void Table_Index_Indexlet::MergeFrom(const Table_Index_Indexlet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RAMCloud.ProtoBuf.Table.Index.Indexlet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_first_key()) {
      set_has_first_key();
      first_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.first_key_);
    }
    if (from.has_first_not_owned_key()) {
      set_has_first_not_owned_key();
      first_not_owned_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.first_not_owned_key_);
    }
    if (from.has_backing_table_id()) {
      set_backing_table_id(from.backing_table_id());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Table_Index_Indexlet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RAMCloud.ProtoBuf.Table.Index.Indexlet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Table_Index_Indexlet::CopyFrom(const Table_Index_Indexlet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RAMCloud.ProtoBuf.Table.Index.Indexlet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Table_Index_Indexlet::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Table_Index_Indexlet::Swap(Table_Index_Indexlet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Table_Index_Indexlet::InternalSwap(Table_Index_Indexlet* other) {
  first_key_.Swap(&other->first_key_);
  first_not_owned_key_.Swap(&other->first_not_owned_key_);
  std::swap(backing_table_id_, other->backing_table_id_);
  std::swap(server_id_, other->server_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Table_Index_Indexlet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Table_Index_Indexlet_descriptor_;
  metadata.reflection = Table_Index_Indexlet_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Table_Index::kIndexIdFieldNumber;
const int Table_Index::kIndexletFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Table_Index::Table_Index()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RAMCloud.ProtoBuf.Table.Index)
}

void Table_Index::InitAsDefaultInstance() {
}

Table_Index::Table_Index(const Table_Index& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RAMCloud.ProtoBuf.Table.Index)
}

void Table_Index::SharedCtor() {
  _cached_size_ = 0;
  index_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Table_Index::~Table_Index() {
  // @@protoc_insertion_point(destructor:RAMCloud.ProtoBuf.Table.Index)
  SharedDtor();
}

void Table_Index::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Table_Index::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Table_Index::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Table_Index_descriptor_;
}

const Table_Index& Table_Index::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Table_2eproto();
  return *default_instance_;
}

Table_Index* Table_Index::default_instance_ = NULL;

Table_Index* Table_Index::New(::google::protobuf::Arena* arena) const {
  Table_Index* n = new Table_Index;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Table_Index::Clear() {
// @@protoc_insertion_point(message_clear_start:RAMCloud.ProtoBuf.Table.Index)
  index_id_ = 0u;
  indexlet_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Table_Index::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RAMCloud.ProtoBuf.Table.Index)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 index_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_id_)));
          set_has_index_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_indexlet;
        break;
      }

      // repeated .RAMCloud.ProtoBuf.Table.Index.Indexlet indexlet = 2;
      case 2: {
        if (tag == 18) {
         parse_indexlet:
          DO_(input->IncrementRecursionDepth());
         parse_loop_indexlet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_indexlet()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_indexlet;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RAMCloud.ProtoBuf.Table.Index)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RAMCloud.ProtoBuf.Table.Index)
  return false;
#undef DO_
}

void Table_Index::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RAMCloud.ProtoBuf.Table.Index)
  // required uint32 index_id = 1;
  if (has_index_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index_id(), output);
  }

  // repeated .RAMCloud.ProtoBuf.Table.Index.Indexlet indexlet = 2;
  for (unsigned int i = 0, n = this->indexlet_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->indexlet(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RAMCloud.ProtoBuf.Table.Index)
}

::google::protobuf::uint8* Table_Index::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RAMCloud.ProtoBuf.Table.Index)
  // required uint32 index_id = 1;
  if (has_index_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index_id(), target);
  }

  // repeated .RAMCloud.ProtoBuf.Table.Index.Indexlet indexlet = 2;
  for (unsigned int i = 0, n = this->indexlet_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->indexlet(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RAMCloud.ProtoBuf.Table.Index)
  return target;
}

int Table_Index::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:RAMCloud.ProtoBuf.Table.Index)
  int total_size = 0;

  // required uint32 index_id = 1;
  if (has_index_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->index_id());
  }
  // repeated .RAMCloud.ProtoBuf.Table.Index.Indexlet indexlet = 2;
  total_size += 1 * this->indexlet_size();
  for (int i = 0; i < this->indexlet_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->indexlet(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Table_Index::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RAMCloud.ProtoBuf.Table.Index)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Table_Index* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Table_Index>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RAMCloud.ProtoBuf.Table.Index)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RAMCloud.ProtoBuf.Table.Index)
    MergeFrom(*source);
  }
}

void Table_Index::MergeFrom(const Table_Index& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RAMCloud.ProtoBuf.Table.Index)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  indexlet_.MergeFrom(from.indexlet_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index_id()) {
      set_index_id(from.index_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Table_Index::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RAMCloud.ProtoBuf.Table.Index)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Table_Index::CopyFrom(const Table_Index& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RAMCloud.ProtoBuf.Table.Index)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Table_Index::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->indexlet())) return false;
  return true;
}

void Table_Index::Swap(Table_Index* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Table_Index::InternalSwap(Table_Index* other) {
  std::swap(index_id_, other->index_id_);
  indexlet_.UnsafeArenaSwap(&other->indexlet_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Table_Index::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Table_Index_descriptor_;
  metadata.reflection = Table_Index_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Table_ReassignIndexlet::kServerIdFieldNumber;
const int Table_ReassignIndexlet::kIndexIdFieldNumber;
const int Table_ReassignIndexlet::kFirstKeyFieldNumber;
const int Table_ReassignIndexlet::kFirstNotOwnedKeyFieldNumber;
const int Table_ReassignIndexlet::kBackingTableIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Table_ReassignIndexlet::Table_ReassignIndexlet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RAMCloud.ProtoBuf.Table.ReassignIndexlet)
}

void Table_ReassignIndexlet::InitAsDefaultInstance() {
}

Table_ReassignIndexlet::Table_ReassignIndexlet(const Table_ReassignIndexlet& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RAMCloud.ProtoBuf.Table.ReassignIndexlet)
}

void Table_ReassignIndexlet::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  server_id_ = GOOGLE_ULONGLONG(0);
  index_id_ = 0u;
  first_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  first_not_owned_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  backing_table_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Table_ReassignIndexlet::~Table_ReassignIndexlet() {
  // @@protoc_insertion_point(destructor:RAMCloud.ProtoBuf.Table.ReassignIndexlet)
  SharedDtor();
}

void Table_ReassignIndexlet::SharedDtor() {
  first_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  first_not_owned_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Table_ReassignIndexlet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Table_ReassignIndexlet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Table_ReassignIndexlet_descriptor_;
}

const Table_ReassignIndexlet& Table_ReassignIndexlet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Table_2eproto();
  return *default_instance_;
}

Table_ReassignIndexlet* Table_ReassignIndexlet::default_instance_ = NULL;

Table_ReassignIndexlet* Table_ReassignIndexlet::New(::google::protobuf::Arena* arena) const {
  Table_ReassignIndexlet* n = new Table_ReassignIndexlet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Table_ReassignIndexlet::Clear() {
// @@protoc_insertion_point(message_clear_start:RAMCloud.ProtoBuf.Table.ReassignIndexlet)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Table_ReassignIndexlet, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Table_ReassignIndexlet*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(backing_table_id_, index_id_);
    server_id_ = GOOGLE_ULONGLONG(0);
    if (has_first_key()) {
      first_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_first_not_owned_key()) {
      first_not_owned_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Table_ReassignIndexlet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RAMCloud.ProtoBuf.Table.ReassignIndexlet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 server_id = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_index_id;
        break;
      }

      // required uint32 index_id = 2;
      case 2: {
        if (tag == 16) {
         parse_index_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_id_)));
          set_has_index_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_first_key;
        break;
      }

      // required bytes first_key = 3;
      case 3: {
        if (tag == 26) {
         parse_first_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_first_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_first_not_owned_key;
        break;
      }

      // required bytes first_not_owned_key = 4;
      case 4: {
        if (tag == 34) {
         parse_first_not_owned_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_first_not_owned_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_backing_table_id;
        break;
      }

      // required uint64 backing_table_id = 5;
      case 5: {
        if (tag == 40) {
         parse_backing_table_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &backing_table_id_)));
          set_has_backing_table_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RAMCloud.ProtoBuf.Table.ReassignIndexlet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RAMCloud.ProtoBuf.Table.ReassignIndexlet)
  return false;
#undef DO_
}

void Table_ReassignIndexlet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RAMCloud.ProtoBuf.Table.ReassignIndexlet)
  // required fixed64 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->server_id(), output);
  }

  // required uint32 index_id = 2;
  if (has_index_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->index_id(), output);
  }

  // required bytes first_key = 3;
  if (has_first_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->first_key(), output);
  }

  // required bytes first_not_owned_key = 4;
  if (has_first_not_owned_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->first_not_owned_key(), output);
  }

  // required uint64 backing_table_id = 5;
  if (has_backing_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->backing_table_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RAMCloud.ProtoBuf.Table.ReassignIndexlet)
}

::google::protobuf::uint8* Table_ReassignIndexlet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RAMCloud.ProtoBuf.Table.ReassignIndexlet)
  // required fixed64 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->server_id(), target);
  }

  // required uint32 index_id = 2;
  if (has_index_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->index_id(), target);
  }

  // required bytes first_key = 3;
  if (has_first_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->first_key(), target);
  }

  // required bytes first_not_owned_key = 4;
  if (has_first_not_owned_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->first_not_owned_key(), target);
  }

  // required uint64 backing_table_id = 5;
  if (has_backing_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->backing_table_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RAMCloud.ProtoBuf.Table.ReassignIndexlet)
  return target;
}

int Table_ReassignIndexlet::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RAMCloud.ProtoBuf.Table.ReassignIndexlet)
  int total_size = 0;

  if (has_server_id()) {
    // required fixed64 server_id = 1;
    total_size += 1 + 8;
  }

  if (has_index_id()) {
    // required uint32 index_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->index_id());
  }

  if (has_first_key()) {
    // required bytes first_key = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->first_key());
  }

  if (has_first_not_owned_key()) {
    // required bytes first_not_owned_key = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->first_not_owned_key());
  }

  if (has_backing_table_id()) {
    // required uint64 backing_table_id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->backing_table_id());
  }

  return total_size;
}
int Table_ReassignIndexlet::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:RAMCloud.ProtoBuf.Table.ReassignIndexlet)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required fixed64 server_id = 1;
    total_size += 1 + 8;

    // required uint32 index_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->index_id());

    // required bytes first_key = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->first_key());

    // required bytes first_not_owned_key = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->first_not_owned_key());

    // required uint64 backing_table_id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->backing_table_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Table_ReassignIndexlet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RAMCloud.ProtoBuf.Table.ReassignIndexlet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Table_ReassignIndexlet* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Table_ReassignIndexlet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RAMCloud.ProtoBuf.Table.ReassignIndexlet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RAMCloud.ProtoBuf.Table.ReassignIndexlet)
    MergeFrom(*source);
  }
}

void Table_ReassignIndexlet::MergeFrom(const Table_ReassignIndexlet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RAMCloud.ProtoBuf.Table.ReassignIndexlet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_index_id()) {
      set_index_id(from.index_id());
    }
    if (from.has_first_key()) {
      set_has_first_key();
      first_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.first_key_);
    }
    if (from.has_first_not_owned_key()) {
      set_has_first_not_owned_key();
      first_not_owned_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.first_not_owned_key_);
    }
    if (from.has_backing_table_id()) {
      set_backing_table_id(from.backing_table_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Table_ReassignIndexlet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RAMCloud.ProtoBuf.Table.ReassignIndexlet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Table_ReassignIndexlet::CopyFrom(const Table_ReassignIndexlet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RAMCloud.ProtoBuf.Table.ReassignIndexlet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Table_ReassignIndexlet::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void Table_ReassignIndexlet::Swap(Table_ReassignIndexlet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Table_ReassignIndexlet::InternalSwap(Table_ReassignIndexlet* other) {
  std::swap(server_id_, other->server_id_);
  std::swap(index_id_, other->index_id_);
  first_key_.Swap(&other->first_key_);
  first_not_owned_key_.Swap(&other->first_not_owned_key_);
  std::swap(backing_table_id_, other->backing_table_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Table_ReassignIndexlet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Table_ReassignIndexlet_descriptor_;
  metadata.reflection = Table_ReassignIndexlet_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Table::kNameFieldNumber;
const int Table::kIdFieldNumber;
const int Table::kTabletFieldNumber;
const int Table::kSequenceNumberFieldNumber;
const int Table::kCreatedFieldNumber;
const int Table::kDeletedFieldNumber;
const int Table::kSplitFieldNumber;
const int Table::kReassignFieldNumber;
const int Table::kIndexFieldNumber;
const int Table::kReassignIndexletFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Table::Table()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RAMCloud.ProtoBuf.Table)
}

void Table::InitAsDefaultInstance() {
  split_ = const_cast< ::RAMCloud::ProtoBuf::Table_Split*>(&::RAMCloud::ProtoBuf::Table_Split::default_instance());
  reassign_ = const_cast< ::RAMCloud::ProtoBuf::Table_Reassign*>(&::RAMCloud::ProtoBuf::Table_Reassign::default_instance());
  reassign_indexlet_ = const_cast< ::RAMCloud::ProtoBuf::Table_ReassignIndexlet*>(&::RAMCloud::ProtoBuf::Table_ReassignIndexlet::default_instance());
}

Table::Table(const Table& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RAMCloud.ProtoBuf.Table)
}

void Table::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = GOOGLE_ULONGLONG(0);
  sequence_number_ = GOOGLE_ULONGLONG(0);
  created_ = false;
  deleted_ = false;
  split_ = NULL;
  reassign_ = NULL;
  reassign_indexlet_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Table::~Table() {
  // @@protoc_insertion_point(destructor:RAMCloud.ProtoBuf.Table)
  SharedDtor();
}

void Table::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete split_;
    delete reassign_;
    delete reassign_indexlet_;
  }
}

void Table::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Table::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Table_descriptor_;
}

const Table& Table::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Table_2eproto();
  return *default_instance_;
}

Table* Table::default_instance_ = NULL;

Table* Table::New(::google::protobuf::Arena* arena) const {
  Table* n = new Table;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Table::Clear() {
// @@protoc_insertion_point(message_clear_start:RAMCloud.ProtoBuf.Table)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Table, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Table*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 251u) {
    ZR_(created_, deleted_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    id_ = GOOGLE_ULONGLONG(0);
    sequence_number_ = GOOGLE_ULONGLONG(0);
    if (has_split()) {
      if (split_ != NULL) split_->::RAMCloud::ProtoBuf::Table_Split::Clear();
    }
    if (has_reassign()) {
      if (reassign_ != NULL) reassign_->::RAMCloud::ProtoBuf::Table_Reassign::Clear();
    }
  }
  if (has_reassign_indexlet()) {
    if (reassign_indexlet_ != NULL) reassign_indexlet_->::RAMCloud::ProtoBuf::Table_ReassignIndexlet::Clear();
  }

#undef ZR_HELPER_
#undef ZR_

  tablet_.Clear();
  index_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Table::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RAMCloud.ProtoBuf.Table)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RAMCloud.ProtoBuf.Table.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required uint64 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tablet;
        break;
      }

      // repeated .RAMCloud.ProtoBuf.Table.Tablet tablet = 3;
      case 3: {
        if (tag == 26) {
         parse_tablet:
          DO_(input->IncrementRecursionDepth());
         parse_loop_tablet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_tablet()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_tablet;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(32)) goto parse_sequence_number;
        break;
      }

      // required uint64 sequence_number = 4;
      case 4: {
        if (tag == 32) {
         parse_sequence_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sequence_number_)));
          set_has_sequence_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_created;
        break;
      }

      // optional bool created = 5;
      case 5: {
        if (tag == 40) {
         parse_created:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &created_)));
          set_has_created();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_deleted;
        break;
      }

      // optional bool deleted = 6;
      case 6: {
        if (tag == 48) {
         parse_deleted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deleted_)));
          set_has_deleted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_split;
        break;
      }

      // optional .RAMCloud.ProtoBuf.Table.Split split = 7;
      case 7: {
        if (tag == 58) {
         parse_split:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_split()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_reassign;
        break;
      }

      // optional .RAMCloud.ProtoBuf.Table.Reassign reassign = 8;
      case 8: {
        if (tag == 66) {
         parse_reassign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reassign()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_index;
        break;
      }

      // repeated .RAMCloud.ProtoBuf.Table.Index index = 9;
      case 9: {
        if (tag == 74) {
         parse_index:
          DO_(input->IncrementRecursionDepth());
         parse_loop_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_loop_index;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(82)) goto parse_reassign_indexlet;
        break;
      }

      // optional .RAMCloud.ProtoBuf.Table.ReassignIndexlet reassign_indexlet = 10;
      case 10: {
        if (tag == 82) {
         parse_reassign_indexlet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reassign_indexlet()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RAMCloud.ProtoBuf.Table)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RAMCloud.ProtoBuf.Table)
  return false;
#undef DO_
}

void Table::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RAMCloud.ProtoBuf.Table)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RAMCloud.ProtoBuf.Table.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required uint64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  // repeated .RAMCloud.ProtoBuf.Table.Tablet tablet = 3;
  for (unsigned int i = 0, n = this->tablet_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tablet(i), output);
  }

  // required uint64 sequence_number = 4;
  if (has_sequence_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->sequence_number(), output);
  }

  // optional bool created = 5;
  if (has_created()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->created(), output);
  }

  // optional bool deleted = 6;
  if (has_deleted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->deleted(), output);
  }

  // optional .RAMCloud.ProtoBuf.Table.Split split = 7;
  if (has_split()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->split_, output);
  }

  // optional .RAMCloud.ProtoBuf.Table.Reassign reassign = 8;
  if (has_reassign()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->reassign_, output);
  }

  // repeated .RAMCloud.ProtoBuf.Table.Index index = 9;
  for (unsigned int i = 0, n = this->index_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->index(i), output);
  }

  // optional .RAMCloud.ProtoBuf.Table.ReassignIndexlet reassign_indexlet = 10;
  if (has_reassign_indexlet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->reassign_indexlet_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RAMCloud.ProtoBuf.Table)
}

::google::protobuf::uint8* Table::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RAMCloud.ProtoBuf.Table)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RAMCloud.ProtoBuf.Table.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required uint64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  // repeated .RAMCloud.ProtoBuf.Table.Tablet tablet = 3;
  for (unsigned int i = 0, n = this->tablet_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->tablet(i), false, target);
  }

  // required uint64 sequence_number = 4;
  if (has_sequence_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->sequence_number(), target);
  }

  // optional bool created = 5;
  if (has_created()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->created(), target);
  }

  // optional bool deleted = 6;
  if (has_deleted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->deleted(), target);
  }

  // optional .RAMCloud.ProtoBuf.Table.Split split = 7;
  if (has_split()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->split_, false, target);
  }

  // optional .RAMCloud.ProtoBuf.Table.Reassign reassign = 8;
  if (has_reassign()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->reassign_, false, target);
  }

  // repeated .RAMCloud.ProtoBuf.Table.Index index = 9;
  for (unsigned int i = 0, n = this->index_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->index(i), false, target);
  }

  // optional .RAMCloud.ProtoBuf.Table.ReassignIndexlet reassign_indexlet = 10;
  if (has_reassign_indexlet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->reassign_indexlet_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RAMCloud.ProtoBuf.Table)
  return target;
}

int Table::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RAMCloud.ProtoBuf.Table)
  int total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_id()) {
    // required uint64 id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  if (has_sequence_number()) {
    // required uint64 sequence_number = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sequence_number());
  }

  return total_size;
}
int Table::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:RAMCloud.ProtoBuf.Table)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required uint64 id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());

    // required uint64 sequence_number = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sequence_number());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[4 / 32] & 240u) {
    // optional bool created = 5;
    if (has_created()) {
      total_size += 1 + 1;
    }

    // optional bool deleted = 6;
    if (has_deleted()) {
      total_size += 1 + 1;
    }

    // optional .RAMCloud.ProtoBuf.Table.Split split = 7;
    if (has_split()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->split_);
    }

    // optional .RAMCloud.ProtoBuf.Table.Reassign reassign = 8;
    if (has_reassign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reassign_);
    }

  }
  // optional .RAMCloud.ProtoBuf.Table.ReassignIndexlet reassign_indexlet = 10;
  if (has_reassign_indexlet()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->reassign_indexlet_);
  }

  // repeated .RAMCloud.ProtoBuf.Table.Tablet tablet = 3;
  total_size += 1 * this->tablet_size();
  for (int i = 0; i < this->tablet_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tablet(i));
  }

  // repeated .RAMCloud.ProtoBuf.Table.Index index = 9;
  total_size += 1 * this->index_size();
  for (int i = 0; i < this->index_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->index(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Table::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RAMCloud.ProtoBuf.Table)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Table* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Table>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RAMCloud.ProtoBuf.Table)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RAMCloud.ProtoBuf.Table)
    MergeFrom(*source);
  }
}

void Table::MergeFrom(const Table& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RAMCloud.ProtoBuf.Table)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  tablet_.MergeFrom(from.tablet_);
  index_.MergeFrom(from.index_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_sequence_number()) {
      set_sequence_number(from.sequence_number());
    }
    if (from.has_created()) {
      set_created(from.created());
    }
    if (from.has_deleted()) {
      set_deleted(from.deleted());
    }
    if (from.has_split()) {
      mutable_split()->::RAMCloud::ProtoBuf::Table_Split::MergeFrom(from.split());
    }
    if (from.has_reassign()) {
      mutable_reassign()->::RAMCloud::ProtoBuf::Table_Reassign::MergeFrom(from.reassign());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_reassign_indexlet()) {
      mutable_reassign_indexlet()->::RAMCloud::ProtoBuf::Table_ReassignIndexlet::MergeFrom(from.reassign_indexlet());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Table::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RAMCloud.ProtoBuf.Table)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Table::CopyFrom(const Table& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RAMCloud.ProtoBuf.Table)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Table::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->tablet())) return false;
  if (has_split()) {
    if (!this->split_->IsInitialized()) return false;
  }
  if (has_reassign()) {
    if (!this->reassign_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->index())) return false;
  if (has_reassign_indexlet()) {
    if (!this->reassign_indexlet_->IsInitialized()) return false;
  }
  return true;
}

void Table::Swap(Table* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Table::InternalSwap(Table* other) {
  name_.Swap(&other->name_);
  std::swap(id_, other->id_);
  tablet_.UnsafeArenaSwap(&other->tablet_);
  std::swap(sequence_number_, other->sequence_number_);
  std::swap(created_, other->created_);
  std::swap(deleted_, other->deleted_);
  std::swap(split_, other->split_);
  std::swap(reassign_, other->reassign_);
  index_.UnsafeArenaSwap(&other->index_);
  std::swap(reassign_indexlet_, other->reassign_indexlet_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Table::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Table_descriptor_;
  metadata.reflection = Table_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Table_Tablet

// required uint64 start_key_hash = 1;
bool Table_Tablet::has_start_key_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Table_Tablet::set_has_start_key_hash() {
  _has_bits_[0] |= 0x00000001u;
}
void Table_Tablet::clear_has_start_key_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
void Table_Tablet::clear_start_key_hash() {
  start_key_hash_ = GOOGLE_ULONGLONG(0);
  clear_has_start_key_hash();
}
 ::google::protobuf::uint64 Table_Tablet::start_key_hash() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Table.Tablet.start_key_hash)
  return start_key_hash_;
}
 void Table_Tablet::set_start_key_hash(::google::protobuf::uint64 value) {
  set_has_start_key_hash();
  start_key_hash_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Table.Tablet.start_key_hash)
}

// required uint64 end_key_hash = 2;
bool Table_Tablet::has_end_key_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Table_Tablet::set_has_end_key_hash() {
  _has_bits_[0] |= 0x00000002u;
}
void Table_Tablet::clear_has_end_key_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
void Table_Tablet::clear_end_key_hash() {
  end_key_hash_ = GOOGLE_ULONGLONG(0);
  clear_has_end_key_hash();
}
 ::google::protobuf::uint64 Table_Tablet::end_key_hash() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Table.Tablet.end_key_hash)
  return end_key_hash_;
}
 void Table_Tablet::set_end_key_hash(::google::protobuf::uint64 value) {
  set_has_end_key_hash();
  end_key_hash_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Table.Tablet.end_key_hash)
}

// required .RAMCloud.ProtoBuf.Table.Tablet.State state = 3;
bool Table_Tablet::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Table_Tablet::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
void Table_Tablet::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
void Table_Tablet::clear_state() {
  state_ = 0;
  clear_has_state();
}
 ::RAMCloud::ProtoBuf::Table_Tablet_State Table_Tablet::state() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Table.Tablet.state)
  return static_cast< ::RAMCloud::ProtoBuf::Table_Tablet_State >(state_);
}
 void Table_Tablet::set_state(::RAMCloud::ProtoBuf::Table_Tablet_State value) {
  assert(::RAMCloud::ProtoBuf::Table_Tablet_State_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Table.Tablet.state)
}

// required fixed64 server_id = 4;
bool Table_Tablet::has_server_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Table_Tablet::set_has_server_id() {
  _has_bits_[0] |= 0x00000008u;
}
void Table_Tablet::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void Table_Tablet::clear_server_id() {
  server_id_ = GOOGLE_ULONGLONG(0);
  clear_has_server_id();
}
 ::google::protobuf::uint64 Table_Tablet::server_id() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Table.Tablet.server_id)
  return server_id_;
}
 void Table_Tablet::set_server_id(::google::protobuf::uint64 value) {
  set_has_server_id();
  server_id_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Table.Tablet.server_id)
}

// required uint64 ctime_log_head_id = 5;
bool Table_Tablet::has_ctime_log_head_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Table_Tablet::set_has_ctime_log_head_id() {
  _has_bits_[0] |= 0x00000010u;
}
void Table_Tablet::clear_has_ctime_log_head_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void Table_Tablet::clear_ctime_log_head_id() {
  ctime_log_head_id_ = GOOGLE_ULONGLONG(0);
  clear_has_ctime_log_head_id();
}
 ::google::protobuf::uint64 Table_Tablet::ctime_log_head_id() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Table.Tablet.ctime_log_head_id)
  return ctime_log_head_id_;
}
 void Table_Tablet::set_ctime_log_head_id(::google::protobuf::uint64 value) {
  set_has_ctime_log_head_id();
  ctime_log_head_id_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Table.Tablet.ctime_log_head_id)
}

// required uint32 ctime_log_head_offset = 6;
bool Table_Tablet::has_ctime_log_head_offset() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Table_Tablet::set_has_ctime_log_head_offset() {
  _has_bits_[0] |= 0x00000020u;
}
void Table_Tablet::clear_has_ctime_log_head_offset() {
  _has_bits_[0] &= ~0x00000020u;
}
void Table_Tablet::clear_ctime_log_head_offset() {
  ctime_log_head_offset_ = 0u;
  clear_has_ctime_log_head_offset();
}
 ::google::protobuf::uint32 Table_Tablet::ctime_log_head_offset() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Table.Tablet.ctime_log_head_offset)
  return ctime_log_head_offset_;
}
 void Table_Tablet::set_ctime_log_head_offset(::google::protobuf::uint32 value) {
  set_has_ctime_log_head_offset();
  ctime_log_head_offset_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Table.Tablet.ctime_log_head_offset)
}

// -------------------------------------------------------------------

// Table_Split

// required fixed64 server_id = 1;
bool Table_Split::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Table_Split::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Table_Split::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Table_Split::clear_server_id() {
  server_id_ = GOOGLE_ULONGLONG(0);
  clear_has_server_id();
}
 ::google::protobuf::uint64 Table_Split::server_id() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Table.Split.server_id)
  return server_id_;
}
 void Table_Split::set_server_id(::google::protobuf::uint64 value) {
  set_has_server_id();
  server_id_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Table.Split.server_id)
}

// required uint64 split_key_hash = 2;
bool Table_Split::has_split_key_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Table_Split::set_has_split_key_hash() {
  _has_bits_[0] |= 0x00000002u;
}
void Table_Split::clear_has_split_key_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
void Table_Split::clear_split_key_hash() {
  split_key_hash_ = GOOGLE_ULONGLONG(0);
  clear_has_split_key_hash();
}
 ::google::protobuf::uint64 Table_Split::split_key_hash() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Table.Split.split_key_hash)
  return split_key_hash_;
}
 void Table_Split::set_split_key_hash(::google::protobuf::uint64 value) {
  set_has_split_key_hash();
  split_key_hash_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Table.Split.split_key_hash)
}

// -------------------------------------------------------------------

// Table_Reassign

// required fixed64 server_id = 1;
bool Table_Reassign::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Table_Reassign::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Table_Reassign::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Table_Reassign::clear_server_id() {
  server_id_ = GOOGLE_ULONGLONG(0);
  clear_has_server_id();
}
 ::google::protobuf::uint64 Table_Reassign::server_id() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Table.Reassign.server_id)
  return server_id_;
}
 void Table_Reassign::set_server_id(::google::protobuf::uint64 value) {
  set_has_server_id();
  server_id_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Table.Reassign.server_id)
}

// required uint64 start_key_hash = 2;
bool Table_Reassign::has_start_key_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Table_Reassign::set_has_start_key_hash() {
  _has_bits_[0] |= 0x00000002u;
}
void Table_Reassign::clear_has_start_key_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
void Table_Reassign::clear_start_key_hash() {
  start_key_hash_ = GOOGLE_ULONGLONG(0);
  clear_has_start_key_hash();
}
 ::google::protobuf::uint64 Table_Reassign::start_key_hash() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Table.Reassign.start_key_hash)
  return start_key_hash_;
}
 void Table_Reassign::set_start_key_hash(::google::protobuf::uint64 value) {
  set_has_start_key_hash();
  start_key_hash_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Table.Reassign.start_key_hash)
}

// required uint64 end_key_hash = 3;
bool Table_Reassign::has_end_key_hash() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Table_Reassign::set_has_end_key_hash() {
  _has_bits_[0] |= 0x00000004u;
}
void Table_Reassign::clear_has_end_key_hash() {
  _has_bits_[0] &= ~0x00000004u;
}
void Table_Reassign::clear_end_key_hash() {
  end_key_hash_ = GOOGLE_ULONGLONG(0);
  clear_has_end_key_hash();
}
 ::google::protobuf::uint64 Table_Reassign::end_key_hash() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Table.Reassign.end_key_hash)
  return end_key_hash_;
}
 void Table_Reassign::set_end_key_hash(::google::protobuf::uint64 value) {
  set_has_end_key_hash();
  end_key_hash_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Table.Reassign.end_key_hash)
}

// -------------------------------------------------------------------

// Table_Index_Indexlet

// required string first_key = 1;
bool Table_Index_Indexlet::has_first_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Table_Index_Indexlet::set_has_first_key() {
  _has_bits_[0] |= 0x00000001u;
}
void Table_Index_Indexlet::clear_has_first_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void Table_Index_Indexlet::clear_first_key() {
  first_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_first_key();
}
 const ::std::string& Table_Index_Indexlet::first_key() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Table.Index.Indexlet.first_key)
  return first_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Table_Index_Indexlet::set_first_key(const ::std::string& value) {
  set_has_first_key();
  first_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Table.Index.Indexlet.first_key)
}
 void Table_Index_Indexlet::set_first_key(const char* value) {
  set_has_first_key();
  first_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RAMCloud.ProtoBuf.Table.Index.Indexlet.first_key)
}
 void Table_Index_Indexlet::set_first_key(const char* value, size_t size) {
  set_has_first_key();
  first_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RAMCloud.ProtoBuf.Table.Index.Indexlet.first_key)
}
 ::std::string* Table_Index_Indexlet::mutable_first_key() {
  set_has_first_key();
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.Table.Index.Indexlet.first_key)
  return first_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Table_Index_Indexlet::release_first_key() {
  // @@protoc_insertion_point(field_release:RAMCloud.ProtoBuf.Table.Index.Indexlet.first_key)
  clear_has_first_key();
  return first_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Table_Index_Indexlet::set_allocated_first_key(::std::string* first_key) {
  if (first_key != NULL) {
    set_has_first_key();
  } else {
    clear_has_first_key();
  }
  first_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), first_key);
  // @@protoc_insertion_point(field_set_allocated:RAMCloud.ProtoBuf.Table.Index.Indexlet.first_key)
}

// required string first_not_owned_key = 2;
bool Table_Index_Indexlet::has_first_not_owned_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Table_Index_Indexlet::set_has_first_not_owned_key() {
  _has_bits_[0] |= 0x00000002u;
}
void Table_Index_Indexlet::clear_has_first_not_owned_key() {
  _has_bits_[0] &= ~0x00000002u;
}
void Table_Index_Indexlet::clear_first_not_owned_key() {
  first_not_owned_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_first_not_owned_key();
}
 const ::std::string& Table_Index_Indexlet::first_not_owned_key() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Table.Index.Indexlet.first_not_owned_key)
  return first_not_owned_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Table_Index_Indexlet::set_first_not_owned_key(const ::std::string& value) {
  set_has_first_not_owned_key();
  first_not_owned_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Table.Index.Indexlet.first_not_owned_key)
}
 void Table_Index_Indexlet::set_first_not_owned_key(const char* value) {
  set_has_first_not_owned_key();
  first_not_owned_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RAMCloud.ProtoBuf.Table.Index.Indexlet.first_not_owned_key)
}
 void Table_Index_Indexlet::set_first_not_owned_key(const char* value, size_t size) {
  set_has_first_not_owned_key();
  first_not_owned_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RAMCloud.ProtoBuf.Table.Index.Indexlet.first_not_owned_key)
}
 ::std::string* Table_Index_Indexlet::mutable_first_not_owned_key() {
  set_has_first_not_owned_key();
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.Table.Index.Indexlet.first_not_owned_key)
  return first_not_owned_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Table_Index_Indexlet::release_first_not_owned_key() {
  // @@protoc_insertion_point(field_release:RAMCloud.ProtoBuf.Table.Index.Indexlet.first_not_owned_key)
  clear_has_first_not_owned_key();
  return first_not_owned_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Table_Index_Indexlet::set_allocated_first_not_owned_key(::std::string* first_not_owned_key) {
  if (first_not_owned_key != NULL) {
    set_has_first_not_owned_key();
  } else {
    clear_has_first_not_owned_key();
  }
  first_not_owned_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), first_not_owned_key);
  // @@protoc_insertion_point(field_set_allocated:RAMCloud.ProtoBuf.Table.Index.Indexlet.first_not_owned_key)
}

// required uint64 backing_table_id = 3;
bool Table_Index_Indexlet::has_backing_table_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Table_Index_Indexlet::set_has_backing_table_id() {
  _has_bits_[0] |= 0x00000004u;
}
void Table_Index_Indexlet::clear_has_backing_table_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void Table_Index_Indexlet::clear_backing_table_id() {
  backing_table_id_ = GOOGLE_ULONGLONG(0);
  clear_has_backing_table_id();
}
 ::google::protobuf::uint64 Table_Index_Indexlet::backing_table_id() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Table.Index.Indexlet.backing_table_id)
  return backing_table_id_;
}
 void Table_Index_Indexlet::set_backing_table_id(::google::protobuf::uint64 value) {
  set_has_backing_table_id();
  backing_table_id_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Table.Index.Indexlet.backing_table_id)
}

// required fixed64 server_id = 4;
bool Table_Index_Indexlet::has_server_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Table_Index_Indexlet::set_has_server_id() {
  _has_bits_[0] |= 0x00000008u;
}
void Table_Index_Indexlet::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void Table_Index_Indexlet::clear_server_id() {
  server_id_ = GOOGLE_ULONGLONG(0);
  clear_has_server_id();
}
 ::google::protobuf::uint64 Table_Index_Indexlet::server_id() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Table.Index.Indexlet.server_id)
  return server_id_;
}
 void Table_Index_Indexlet::set_server_id(::google::protobuf::uint64 value) {
  set_has_server_id();
  server_id_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Table.Index.Indexlet.server_id)
}

// -------------------------------------------------------------------

// Table_Index

// required uint32 index_id = 1;
bool Table_Index::has_index_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Table_Index::set_has_index_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Table_Index::clear_has_index_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Table_Index::clear_index_id() {
  index_id_ = 0u;
  clear_has_index_id();
}
 ::google::protobuf::uint32 Table_Index::index_id() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Table.Index.index_id)
  return index_id_;
}
 void Table_Index::set_index_id(::google::protobuf::uint32 value) {
  set_has_index_id();
  index_id_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Table.Index.index_id)
}

// repeated .RAMCloud.ProtoBuf.Table.Index.Indexlet indexlet = 2;
int Table_Index::indexlet_size() const {
  return indexlet_.size();
}
void Table_Index::clear_indexlet() {
  indexlet_.Clear();
}
const ::RAMCloud::ProtoBuf::Table_Index_Indexlet& Table_Index::indexlet(int index) const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Table.Index.indexlet)
  return indexlet_.Get(index);
}
::RAMCloud::ProtoBuf::Table_Index_Indexlet* Table_Index::mutable_indexlet(int index) {
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.Table.Index.indexlet)
  return indexlet_.Mutable(index);
}
::RAMCloud::ProtoBuf::Table_Index_Indexlet* Table_Index::add_indexlet() {
  // @@protoc_insertion_point(field_add:RAMCloud.ProtoBuf.Table.Index.indexlet)
  return indexlet_.Add();
}
::google::protobuf::RepeatedPtrField< ::RAMCloud::ProtoBuf::Table_Index_Indexlet >*
Table_Index::mutable_indexlet() {
  // @@protoc_insertion_point(field_mutable_list:RAMCloud.ProtoBuf.Table.Index.indexlet)
  return &indexlet_;
}
const ::google::protobuf::RepeatedPtrField< ::RAMCloud::ProtoBuf::Table_Index_Indexlet >&
Table_Index::indexlet() const {
  // @@protoc_insertion_point(field_list:RAMCloud.ProtoBuf.Table.Index.indexlet)
  return indexlet_;
}

// -------------------------------------------------------------------

// Table_ReassignIndexlet

// required fixed64 server_id = 1;
bool Table_ReassignIndexlet::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Table_ReassignIndexlet::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Table_ReassignIndexlet::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Table_ReassignIndexlet::clear_server_id() {
  server_id_ = GOOGLE_ULONGLONG(0);
  clear_has_server_id();
}
 ::google::protobuf::uint64 Table_ReassignIndexlet::server_id() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Table.ReassignIndexlet.server_id)
  return server_id_;
}
 void Table_ReassignIndexlet::set_server_id(::google::protobuf::uint64 value) {
  set_has_server_id();
  server_id_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Table.ReassignIndexlet.server_id)
}

// required uint32 index_id = 2;
bool Table_ReassignIndexlet::has_index_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Table_ReassignIndexlet::set_has_index_id() {
  _has_bits_[0] |= 0x00000002u;
}
void Table_ReassignIndexlet::clear_has_index_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void Table_ReassignIndexlet::clear_index_id() {
  index_id_ = 0u;
  clear_has_index_id();
}
 ::google::protobuf::uint32 Table_ReassignIndexlet::index_id() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Table.ReassignIndexlet.index_id)
  return index_id_;
}
 void Table_ReassignIndexlet::set_index_id(::google::protobuf::uint32 value) {
  set_has_index_id();
  index_id_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Table.ReassignIndexlet.index_id)
}

// required bytes first_key = 3;
bool Table_ReassignIndexlet::has_first_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Table_ReassignIndexlet::set_has_first_key() {
  _has_bits_[0] |= 0x00000004u;
}
void Table_ReassignIndexlet::clear_has_first_key() {
  _has_bits_[0] &= ~0x00000004u;
}
void Table_ReassignIndexlet::clear_first_key() {
  first_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_first_key();
}
 const ::std::string& Table_ReassignIndexlet::first_key() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Table.ReassignIndexlet.first_key)
  return first_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Table_ReassignIndexlet::set_first_key(const ::std::string& value) {
  set_has_first_key();
  first_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Table.ReassignIndexlet.first_key)
}
 void Table_ReassignIndexlet::set_first_key(const char* value) {
  set_has_first_key();
  first_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RAMCloud.ProtoBuf.Table.ReassignIndexlet.first_key)
}
 void Table_ReassignIndexlet::set_first_key(const void* value, size_t size) {
  set_has_first_key();
  first_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RAMCloud.ProtoBuf.Table.ReassignIndexlet.first_key)
}
 ::std::string* Table_ReassignIndexlet::mutable_first_key() {
  set_has_first_key();
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.Table.ReassignIndexlet.first_key)
  return first_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Table_ReassignIndexlet::release_first_key() {
  // @@protoc_insertion_point(field_release:RAMCloud.ProtoBuf.Table.ReassignIndexlet.first_key)
  clear_has_first_key();
  return first_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Table_ReassignIndexlet::set_allocated_first_key(::std::string* first_key) {
  if (first_key != NULL) {
    set_has_first_key();
  } else {
    clear_has_first_key();
  }
  first_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), first_key);
  // @@protoc_insertion_point(field_set_allocated:RAMCloud.ProtoBuf.Table.ReassignIndexlet.first_key)
}

// required bytes first_not_owned_key = 4;
bool Table_ReassignIndexlet::has_first_not_owned_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Table_ReassignIndexlet::set_has_first_not_owned_key() {
  _has_bits_[0] |= 0x00000008u;
}
void Table_ReassignIndexlet::clear_has_first_not_owned_key() {
  _has_bits_[0] &= ~0x00000008u;
}
void Table_ReassignIndexlet::clear_first_not_owned_key() {
  first_not_owned_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_first_not_owned_key();
}
 const ::std::string& Table_ReassignIndexlet::first_not_owned_key() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Table.ReassignIndexlet.first_not_owned_key)
  return first_not_owned_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Table_ReassignIndexlet::set_first_not_owned_key(const ::std::string& value) {
  set_has_first_not_owned_key();
  first_not_owned_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Table.ReassignIndexlet.first_not_owned_key)
}
 void Table_ReassignIndexlet::set_first_not_owned_key(const char* value) {
  set_has_first_not_owned_key();
  first_not_owned_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RAMCloud.ProtoBuf.Table.ReassignIndexlet.first_not_owned_key)
}
 void Table_ReassignIndexlet::set_first_not_owned_key(const void* value, size_t size) {
  set_has_first_not_owned_key();
  first_not_owned_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RAMCloud.ProtoBuf.Table.ReassignIndexlet.first_not_owned_key)
}
 ::std::string* Table_ReassignIndexlet::mutable_first_not_owned_key() {
  set_has_first_not_owned_key();
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.Table.ReassignIndexlet.first_not_owned_key)
  return first_not_owned_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Table_ReassignIndexlet::release_first_not_owned_key() {
  // @@protoc_insertion_point(field_release:RAMCloud.ProtoBuf.Table.ReassignIndexlet.first_not_owned_key)
  clear_has_first_not_owned_key();
  return first_not_owned_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Table_ReassignIndexlet::set_allocated_first_not_owned_key(::std::string* first_not_owned_key) {
  if (first_not_owned_key != NULL) {
    set_has_first_not_owned_key();
  } else {
    clear_has_first_not_owned_key();
  }
  first_not_owned_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), first_not_owned_key);
  // @@protoc_insertion_point(field_set_allocated:RAMCloud.ProtoBuf.Table.ReassignIndexlet.first_not_owned_key)
}

// required uint64 backing_table_id = 5;
bool Table_ReassignIndexlet::has_backing_table_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Table_ReassignIndexlet::set_has_backing_table_id() {
  _has_bits_[0] |= 0x00000010u;
}
void Table_ReassignIndexlet::clear_has_backing_table_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void Table_ReassignIndexlet::clear_backing_table_id() {
  backing_table_id_ = GOOGLE_ULONGLONG(0);
  clear_has_backing_table_id();
}
 ::google::protobuf::uint64 Table_ReassignIndexlet::backing_table_id() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Table.ReassignIndexlet.backing_table_id)
  return backing_table_id_;
}
 void Table_ReassignIndexlet::set_backing_table_id(::google::protobuf::uint64 value) {
  set_has_backing_table_id();
  backing_table_id_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Table.ReassignIndexlet.backing_table_id)
}

// -------------------------------------------------------------------

// Table

// required string name = 1;
bool Table::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Table::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Table::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Table::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& Table::name() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Table.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Table::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Table.name)
}
 void Table::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RAMCloud.ProtoBuf.Table.name)
}
 void Table::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RAMCloud.ProtoBuf.Table.name)
}
 ::std::string* Table::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.Table.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Table::release_name() {
  // @@protoc_insertion_point(field_release:RAMCloud.ProtoBuf.Table.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Table::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:RAMCloud.ProtoBuf.Table.name)
}

// required uint64 id = 2;
bool Table::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Table::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void Table::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void Table::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
 ::google::protobuf::uint64 Table::id() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Table.id)
  return id_;
}
 void Table::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Table.id)
}

// repeated .RAMCloud.ProtoBuf.Table.Tablet tablet = 3;
int Table::tablet_size() const {
  return tablet_.size();
}
void Table::clear_tablet() {
  tablet_.Clear();
}
const ::RAMCloud::ProtoBuf::Table_Tablet& Table::tablet(int index) const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Table.tablet)
  return tablet_.Get(index);
}
::RAMCloud::ProtoBuf::Table_Tablet* Table::mutable_tablet(int index) {
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.Table.tablet)
  return tablet_.Mutable(index);
}
::RAMCloud::ProtoBuf::Table_Tablet* Table::add_tablet() {
  // @@protoc_insertion_point(field_add:RAMCloud.ProtoBuf.Table.tablet)
  return tablet_.Add();
}
::google::protobuf::RepeatedPtrField< ::RAMCloud::ProtoBuf::Table_Tablet >*
Table::mutable_tablet() {
  // @@protoc_insertion_point(field_mutable_list:RAMCloud.ProtoBuf.Table.tablet)
  return &tablet_;
}
const ::google::protobuf::RepeatedPtrField< ::RAMCloud::ProtoBuf::Table_Tablet >&
Table::tablet() const {
  // @@protoc_insertion_point(field_list:RAMCloud.ProtoBuf.Table.tablet)
  return tablet_;
}

// required uint64 sequence_number = 4;
bool Table::has_sequence_number() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Table::set_has_sequence_number() {
  _has_bits_[0] |= 0x00000008u;
}
void Table::clear_has_sequence_number() {
  _has_bits_[0] &= ~0x00000008u;
}
void Table::clear_sequence_number() {
  sequence_number_ = GOOGLE_ULONGLONG(0);
  clear_has_sequence_number();
}
 ::google::protobuf::uint64 Table::sequence_number() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Table.sequence_number)
  return sequence_number_;
}
 void Table::set_sequence_number(::google::protobuf::uint64 value) {
  set_has_sequence_number();
  sequence_number_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Table.sequence_number)
}

// optional bool created = 5;
bool Table::has_created() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Table::set_has_created() {
  _has_bits_[0] |= 0x00000010u;
}
void Table::clear_has_created() {
  _has_bits_[0] &= ~0x00000010u;
}
void Table::clear_created() {
  created_ = false;
  clear_has_created();
}
 bool Table::created() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Table.created)
  return created_;
}
 void Table::set_created(bool value) {
  set_has_created();
  created_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Table.created)
}

// optional bool deleted = 6;
bool Table::has_deleted() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Table::set_has_deleted() {
  _has_bits_[0] |= 0x00000020u;
}
void Table::clear_has_deleted() {
  _has_bits_[0] &= ~0x00000020u;
}
void Table::clear_deleted() {
  deleted_ = false;
  clear_has_deleted();
}
 bool Table::deleted() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Table.deleted)
  return deleted_;
}
 void Table::set_deleted(bool value) {
  set_has_deleted();
  deleted_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Table.deleted)
}

// optional .RAMCloud.ProtoBuf.Table.Split split = 7;
bool Table::has_split() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Table::set_has_split() {
  _has_bits_[0] |= 0x00000040u;
}
void Table::clear_has_split() {
  _has_bits_[0] &= ~0x00000040u;
}
void Table::clear_split() {
  if (split_ != NULL) split_->::RAMCloud::ProtoBuf::Table_Split::Clear();
  clear_has_split();
}
const ::RAMCloud::ProtoBuf::Table_Split& Table::split() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Table.split)
  return split_ != NULL ? *split_ : *default_instance_->split_;
}
::RAMCloud::ProtoBuf::Table_Split* Table::mutable_split() {
  set_has_split();
  if (split_ == NULL) {
    split_ = new ::RAMCloud::ProtoBuf::Table_Split;
  }
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.Table.split)
  return split_;
}
::RAMCloud::ProtoBuf::Table_Split* Table::release_split() {
  // @@protoc_insertion_point(field_release:RAMCloud.ProtoBuf.Table.split)
  clear_has_split();
  ::RAMCloud::ProtoBuf::Table_Split* temp = split_;
  split_ = NULL;
  return temp;
}
void Table::set_allocated_split(::RAMCloud::ProtoBuf::Table_Split* split) {
  delete split_;
  split_ = split;
  if (split) {
    set_has_split();
  } else {
    clear_has_split();
  }
  // @@protoc_insertion_point(field_set_allocated:RAMCloud.ProtoBuf.Table.split)
}

// optional .RAMCloud.ProtoBuf.Table.Reassign reassign = 8;
bool Table::has_reassign() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Table::set_has_reassign() {
  _has_bits_[0] |= 0x00000080u;
}
void Table::clear_has_reassign() {
  _has_bits_[0] &= ~0x00000080u;
}
void Table::clear_reassign() {
  if (reassign_ != NULL) reassign_->::RAMCloud::ProtoBuf::Table_Reassign::Clear();
  clear_has_reassign();
}
const ::RAMCloud::ProtoBuf::Table_Reassign& Table::reassign() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Table.reassign)
  return reassign_ != NULL ? *reassign_ : *default_instance_->reassign_;
}
::RAMCloud::ProtoBuf::Table_Reassign* Table::mutable_reassign() {
  set_has_reassign();
  if (reassign_ == NULL) {
    reassign_ = new ::RAMCloud::ProtoBuf::Table_Reassign;
  }
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.Table.reassign)
  return reassign_;
}
::RAMCloud::ProtoBuf::Table_Reassign* Table::release_reassign() {
  // @@protoc_insertion_point(field_release:RAMCloud.ProtoBuf.Table.reassign)
  clear_has_reassign();
  ::RAMCloud::ProtoBuf::Table_Reassign* temp = reassign_;
  reassign_ = NULL;
  return temp;
}
void Table::set_allocated_reassign(::RAMCloud::ProtoBuf::Table_Reassign* reassign) {
  delete reassign_;
  reassign_ = reassign;
  if (reassign) {
    set_has_reassign();
  } else {
    clear_has_reassign();
  }
  // @@protoc_insertion_point(field_set_allocated:RAMCloud.ProtoBuf.Table.reassign)
}

// repeated .RAMCloud.ProtoBuf.Table.Index index = 9;
int Table::index_size() const {
  return index_.size();
}
void Table::clear_index() {
  index_.Clear();
}
const ::RAMCloud::ProtoBuf::Table_Index& Table::index(int index) const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Table.index)
  return index_.Get(index);
}
::RAMCloud::ProtoBuf::Table_Index* Table::mutable_index(int index) {
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.Table.index)
  return index_.Mutable(index);
}
::RAMCloud::ProtoBuf::Table_Index* Table::add_index() {
  // @@protoc_insertion_point(field_add:RAMCloud.ProtoBuf.Table.index)
  return index_.Add();
}
::google::protobuf::RepeatedPtrField< ::RAMCloud::ProtoBuf::Table_Index >*
Table::mutable_index() {
  // @@protoc_insertion_point(field_mutable_list:RAMCloud.ProtoBuf.Table.index)
  return &index_;
}
const ::google::protobuf::RepeatedPtrField< ::RAMCloud::ProtoBuf::Table_Index >&
Table::index() const {
  // @@protoc_insertion_point(field_list:RAMCloud.ProtoBuf.Table.index)
  return index_;
}

// optional .RAMCloud.ProtoBuf.Table.ReassignIndexlet reassign_indexlet = 10;
bool Table::has_reassign_indexlet() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Table::set_has_reassign_indexlet() {
  _has_bits_[0] |= 0x00000200u;
}
void Table::clear_has_reassign_indexlet() {
  _has_bits_[0] &= ~0x00000200u;
}
void Table::clear_reassign_indexlet() {
  if (reassign_indexlet_ != NULL) reassign_indexlet_->::RAMCloud::ProtoBuf::Table_ReassignIndexlet::Clear();
  clear_has_reassign_indexlet();
}
const ::RAMCloud::ProtoBuf::Table_ReassignIndexlet& Table::reassign_indexlet() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Table.reassign_indexlet)
  return reassign_indexlet_ != NULL ? *reassign_indexlet_ : *default_instance_->reassign_indexlet_;
}
::RAMCloud::ProtoBuf::Table_ReassignIndexlet* Table::mutable_reassign_indexlet() {
  set_has_reassign_indexlet();
  if (reassign_indexlet_ == NULL) {
    reassign_indexlet_ = new ::RAMCloud::ProtoBuf::Table_ReassignIndexlet;
  }
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.Table.reassign_indexlet)
  return reassign_indexlet_;
}
::RAMCloud::ProtoBuf::Table_ReassignIndexlet* Table::release_reassign_indexlet() {
  // @@protoc_insertion_point(field_release:RAMCloud.ProtoBuf.Table.reassign_indexlet)
  clear_has_reassign_indexlet();
  ::RAMCloud::ProtoBuf::Table_ReassignIndexlet* temp = reassign_indexlet_;
  reassign_indexlet_ = NULL;
  return temp;
}
void Table::set_allocated_reassign_indexlet(::RAMCloud::ProtoBuf::Table_ReassignIndexlet* reassign_indexlet) {
  delete reassign_indexlet_;
  reassign_indexlet_ = reassign_indexlet;
  if (reassign_indexlet) {
    set_has_reassign_indexlet();
  } else {
    clear_has_reassign_indexlet();
  }
  // @@protoc_insertion_point(field_set_allocated:RAMCloud.ProtoBuf.Table.reassign_indexlet)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoBuf
}  // namespace RAMCloud

// @@protoc_insertion_point(global_scope)
// RAMCloud pragma [GCCWARN=0]
