// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TableConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TableConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace RAMCloud {
namespace ProtoBuf {

namespace {

const ::google::protobuf::Descriptor* TableConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TableConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* TableConfig_Tablet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TableConfig_Tablet_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TableConfig_Tablet_State_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TableConfig_Index_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TableConfig_Index_reflection_ = NULL;
const ::google::protobuf::Descriptor* TableConfig_Index_Indexlet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TableConfig_Index_Indexlet_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_TableConfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_TableConfig_2eproto() {
  protobuf_AddDesc_TableConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TableConfig.proto");
  GOOGLE_CHECK(file != NULL);
  TableConfig_descriptor_ = file->message_type(0);
  static const int TableConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableConfig, tablet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableConfig, index_),
  };
  TableConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TableConfig_descriptor_,
      TableConfig::default_instance_,
      TableConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(TableConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableConfig, _internal_metadata_),
      -1);
  TableConfig_Tablet_descriptor_ = TableConfig_descriptor_->nested_type(0);
  static const int TableConfig_Tablet_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableConfig_Tablet, table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableConfig_Tablet, start_key_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableConfig_Tablet, end_key_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableConfig_Tablet, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableConfig_Tablet, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableConfig_Tablet, service_locator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableConfig_Tablet, user_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableConfig_Tablet, ctime_log_head_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableConfig_Tablet, ctime_log_head_offset_),
  };
  TableConfig_Tablet_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TableConfig_Tablet_descriptor_,
      TableConfig_Tablet::default_instance_,
      TableConfig_Tablet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableConfig_Tablet, _has_bits_[0]),
      -1,
      -1,
      sizeof(TableConfig_Tablet),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableConfig_Tablet, _internal_metadata_),
      -1);
  TableConfig_Tablet_State_descriptor_ = TableConfig_Tablet_descriptor_->enum_type(0);
  TableConfig_Index_descriptor_ = TableConfig_descriptor_->nested_type(1);
  static const int TableConfig_Index_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableConfig_Index, index_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableConfig_Index, index_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableConfig_Index, indexlet_),
  };
  TableConfig_Index_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TableConfig_Index_descriptor_,
      TableConfig_Index::default_instance_,
      TableConfig_Index_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableConfig_Index, _has_bits_[0]),
      -1,
      -1,
      sizeof(TableConfig_Index),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableConfig_Index, _internal_metadata_),
      -1);
  TableConfig_Index_Indexlet_descriptor_ = TableConfig_Index_descriptor_->nested_type(0);
  static const int TableConfig_Index_Indexlet_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableConfig_Index_Indexlet, start_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableConfig_Index_Indexlet, end_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableConfig_Index_Indexlet, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableConfig_Index_Indexlet, service_locator_),
  };
  TableConfig_Index_Indexlet_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TableConfig_Index_Indexlet_descriptor_,
      TableConfig_Index_Indexlet::default_instance_,
      TableConfig_Index_Indexlet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableConfig_Index_Indexlet, _has_bits_[0]),
      -1,
      -1,
      sizeof(TableConfig_Index_Indexlet),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableConfig_Index_Indexlet, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TableConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TableConfig_descriptor_, &TableConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TableConfig_Tablet_descriptor_, &TableConfig_Tablet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TableConfig_Index_descriptor_, &TableConfig_Index::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TableConfig_Index_Indexlet_descriptor_, &TableConfig_Index_Indexlet::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TableConfig_2eproto() {
  delete TableConfig::default_instance_;
  delete TableConfig_reflection_;
  delete TableConfig_Tablet::default_instance_;
  delete TableConfig_Tablet_reflection_;
  delete TableConfig_Index::default_instance_;
  delete TableConfig_Index_reflection_;
  delete TableConfig_Index_Indexlet::default_instance_;
  delete TableConfig_Index_Indexlet_reflection_;
}

void protobuf_AddDesc_TableConfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_TableConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021TableConfig.proto\022\021RAMCloud.ProtoBuf\"\353"
    "\004\n\013TableConfig\0225\n\006tablet\030\001 \003(\0132%.RAMClou"
    "d.ProtoBuf.TableConfig.Tablet\0223\n\005index\030\002"
    " \003(\0132$.RAMCloud.ProtoBuf.TableConfig.Ind"
    "ex\032\242\002\n\006Tablet\022\020\n\010table_id\030\001 \002(\004\022\026\n\016start"
    "_key_hash\030\002 \002(\004\022\024\n\014end_key_hash\030\003 \002(\004\022:\n"
    "\005state\030\004 \002(\0162+.RAMCloud.ProtoBuf.TableCo"
    "nfig.Tablet.State\022\021\n\tserver_id\030\005 \001(\006\022\027\n\017"
    "service_locator\030\006 \001(\t\022\021\n\tuser_data\030\007 \001(\006"
    "\022\031\n\021ctime_log_head_id\030\010 \002(\004\022\035\n\025ctime_log"
    "_head_offset\030\t \002(\r\"#\n\005State\022\n\n\006NORMAL\020\000\022"
    "\016\n\nRECOVERING\020\001\032\312\001\n\005Index\022\020\n\010index_id\030\001 "
    "\002(\r\022\022\n\nindex_type\030\002 \002(\r\022\?\n\010indexlet\030\003 \003("
    "\0132-.RAMCloud.ProtoBuf.TableConfig.Index."
    "Indexlet\032Z\n\010Indexlet\022\021\n\tstart_key\030\001 \002(\014\022"
    "\017\n\007end_key\030\002 \002(\014\022\021\n\tserver_id\030\003 \002(\006\022\027\n\017s"
    "ervice_locator\030\004 \002(\t", 660);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TableConfig.proto", &protobuf_RegisterTypes);
  TableConfig::default_instance_ = new TableConfig();
  TableConfig_Tablet::default_instance_ = new TableConfig_Tablet();
  TableConfig_Index::default_instance_ = new TableConfig_Index();
  TableConfig_Index_Indexlet::default_instance_ = new TableConfig_Index_Indexlet();
  TableConfig::default_instance_->InitAsDefaultInstance();
  TableConfig_Tablet::default_instance_->InitAsDefaultInstance();
  TableConfig_Index::default_instance_->InitAsDefaultInstance();
  TableConfig_Index_Indexlet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TableConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TableConfig_2eproto {
  StaticDescriptorInitializer_TableConfig_2eproto() {
    protobuf_AddDesc_TableConfig_2eproto();
  }
} static_descriptor_initializer_TableConfig_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* TableConfig_Tablet_State_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableConfig_Tablet_State_descriptor_;
}
bool TableConfig_Tablet_State_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TableConfig_Tablet_State TableConfig_Tablet::NORMAL;
const TableConfig_Tablet_State TableConfig_Tablet::RECOVERING;
const TableConfig_Tablet_State TableConfig_Tablet::State_MIN;
const TableConfig_Tablet_State TableConfig_Tablet::State_MAX;
const int TableConfig_Tablet::State_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TableConfig_Tablet::kTableIdFieldNumber;
const int TableConfig_Tablet::kStartKeyHashFieldNumber;
const int TableConfig_Tablet::kEndKeyHashFieldNumber;
const int TableConfig_Tablet::kStateFieldNumber;
const int TableConfig_Tablet::kServerIdFieldNumber;
const int TableConfig_Tablet::kServiceLocatorFieldNumber;
const int TableConfig_Tablet::kUserDataFieldNumber;
const int TableConfig_Tablet::kCtimeLogHeadIdFieldNumber;
const int TableConfig_Tablet::kCtimeLogHeadOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TableConfig_Tablet::TableConfig_Tablet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RAMCloud.ProtoBuf.TableConfig.Tablet)
}

void TableConfig_Tablet::InitAsDefaultInstance() {
}

TableConfig_Tablet::TableConfig_Tablet(const TableConfig_Tablet& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RAMCloud.ProtoBuf.TableConfig.Tablet)
}

void TableConfig_Tablet::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  table_id_ = GOOGLE_ULONGLONG(0);
  start_key_hash_ = GOOGLE_ULONGLONG(0);
  end_key_hash_ = GOOGLE_ULONGLONG(0);
  state_ = 0;
  server_id_ = GOOGLE_ULONGLONG(0);
  service_locator_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_data_ = GOOGLE_ULONGLONG(0);
  ctime_log_head_id_ = GOOGLE_ULONGLONG(0);
  ctime_log_head_offset_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TableConfig_Tablet::~TableConfig_Tablet() {
  // @@protoc_insertion_point(destructor:RAMCloud.ProtoBuf.TableConfig.Tablet)
  SharedDtor();
}

void TableConfig_Tablet::SharedDtor() {
  service_locator_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TableConfig_Tablet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableConfig_Tablet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableConfig_Tablet_descriptor_;
}

const TableConfig_Tablet& TableConfig_Tablet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TableConfig_2eproto();
  return *default_instance_;
}

TableConfig_Tablet* TableConfig_Tablet::default_instance_ = NULL;

TableConfig_Tablet* TableConfig_Tablet::New(::google::protobuf::Arena* arena) const {
  TableConfig_Tablet* n = new TableConfig_Tablet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TableConfig_Tablet::Clear() {
// @@protoc_insertion_point(message_clear_start:RAMCloud.ProtoBuf.TableConfig.Tablet)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TableConfig_Tablet, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TableConfig_Tablet*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(table_id_, server_id_);
    ZR_(user_data_, ctime_log_head_id_);
    state_ = 0;
    if (has_service_locator()) {
      service_locator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ctime_log_head_offset_ = 0u;

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TableConfig_Tablet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RAMCloud.ProtoBuf.TableConfig.Tablet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 table_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_start_key_hash;
        break;
      }

      // required uint64 start_key_hash = 2;
      case 2: {
        if (tag == 16) {
         parse_start_key_hash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_key_hash_)));
          set_has_start_key_hash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_end_key_hash;
        break;
      }

      // required uint64 end_key_hash = 3;
      case 3: {
        if (tag == 24) {
         parse_end_key_hash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_key_hash_)));
          set_has_end_key_hash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }

      // required .RAMCloud.ProtoBuf.TableConfig.Tablet.State state = 4;
      case 4: {
        if (tag == 32) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::RAMCloud::ProtoBuf::TableConfig_Tablet_State_IsValid(value)) {
            set_state(static_cast< ::RAMCloud::ProtoBuf::TableConfig_Tablet_State >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_server_id;
        break;
      }

      // optional fixed64 server_id = 5;
      case 5: {
        if (tag == 41) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_service_locator;
        break;
      }

      // optional string service_locator = 6;
      case 6: {
        if (tag == 50) {
         parse_service_locator:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_locator()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->service_locator().data(), this->service_locator().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RAMCloud.ProtoBuf.TableConfig.Tablet.service_locator");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_user_data;
        break;
      }

      // optional fixed64 user_data = 7;
      case 7: {
        if (tag == 57) {
         parse_user_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_data_)));
          set_has_user_data();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_ctime_log_head_id;
        break;
      }

      // required uint64 ctime_log_head_id = 8;
      case 8: {
        if (tag == 64) {
         parse_ctime_log_head_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ctime_log_head_id_)));
          set_has_ctime_log_head_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_ctime_log_head_offset;
        break;
      }

      // required uint32 ctime_log_head_offset = 9;
      case 9: {
        if (tag == 72) {
         parse_ctime_log_head_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ctime_log_head_offset_)));
          set_has_ctime_log_head_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RAMCloud.ProtoBuf.TableConfig.Tablet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RAMCloud.ProtoBuf.TableConfig.Tablet)
  return false;
#undef DO_
}

void TableConfig_Tablet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RAMCloud.ProtoBuf.TableConfig.Tablet)
  // required uint64 table_id = 1;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->table_id(), output);
  }

  // required uint64 start_key_hash = 2;
  if (has_start_key_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->start_key_hash(), output);
  }

  // required uint64 end_key_hash = 3;
  if (has_end_key_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->end_key_hash(), output);
  }

  // required .RAMCloud.ProtoBuf.TableConfig.Tablet.State state = 4;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->state(), output);
  }

  // optional fixed64 server_id = 5;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->server_id(), output);
  }

  // optional string service_locator = 6;
  if (has_service_locator()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_locator().data(), this->service_locator().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RAMCloud.ProtoBuf.TableConfig.Tablet.service_locator");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->service_locator(), output);
  }

  // optional fixed64 user_data = 7;
  if (has_user_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->user_data(), output);
  }

  // required uint64 ctime_log_head_id = 8;
  if (has_ctime_log_head_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->ctime_log_head_id(), output);
  }

  // required uint32 ctime_log_head_offset = 9;
  if (has_ctime_log_head_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->ctime_log_head_offset(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RAMCloud.ProtoBuf.TableConfig.Tablet)
}

::google::protobuf::uint8* TableConfig_Tablet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RAMCloud.ProtoBuf.TableConfig.Tablet)
  // required uint64 table_id = 1;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->table_id(), target);
  }

  // required uint64 start_key_hash = 2;
  if (has_start_key_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->start_key_hash(), target);
  }

  // required uint64 end_key_hash = 3;
  if (has_end_key_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->end_key_hash(), target);
  }

  // required .RAMCloud.ProtoBuf.TableConfig.Tablet.State state = 4;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->state(), target);
  }

  // optional fixed64 server_id = 5;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->server_id(), target);
  }

  // optional string service_locator = 6;
  if (has_service_locator()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_locator().data(), this->service_locator().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RAMCloud.ProtoBuf.TableConfig.Tablet.service_locator");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->service_locator(), target);
  }

  // optional fixed64 user_data = 7;
  if (has_user_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->user_data(), target);
  }

  // required uint64 ctime_log_head_id = 8;
  if (has_ctime_log_head_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->ctime_log_head_id(), target);
  }

  // required uint32 ctime_log_head_offset = 9;
  if (has_ctime_log_head_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->ctime_log_head_offset(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RAMCloud.ProtoBuf.TableConfig.Tablet)
  return target;
}

int TableConfig_Tablet::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RAMCloud.ProtoBuf.TableConfig.Tablet)
  int total_size = 0;

  if (has_table_id()) {
    // required uint64 table_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->table_id());
  }

  if (has_start_key_hash()) {
    // required uint64 start_key_hash = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->start_key_hash());
  }

  if (has_end_key_hash()) {
    // required uint64 end_key_hash = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->end_key_hash());
  }

  if (has_state()) {
    // required .RAMCloud.ProtoBuf.TableConfig.Tablet.State state = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  if (has_ctime_log_head_id()) {
    // required uint64 ctime_log_head_id = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ctime_log_head_id());
  }

  if (has_ctime_log_head_offset()) {
    // required uint32 ctime_log_head_offset = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ctime_log_head_offset());
  }

  return total_size;
}
int TableConfig_Tablet::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:RAMCloud.ProtoBuf.TableConfig.Tablet)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000018f) ^ 0x0000018f) == 0) {  // All required fields are present.
    // required uint64 table_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->table_id());

    // required uint64 start_key_hash = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->start_key_hash());

    // required uint64 end_key_hash = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->end_key_hash());

    // required .RAMCloud.ProtoBuf.TableConfig.Tablet.State state = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());

    // required uint64 ctime_log_head_id = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ctime_log_head_id());

    // required uint32 ctime_log_head_offset = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ctime_log_head_offset());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[4 / 32] & 112u) {
    // optional fixed64 server_id = 5;
    if (has_server_id()) {
      total_size += 1 + 8;
    }

    // optional string service_locator = 6;
    if (has_service_locator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_locator());
    }

    // optional fixed64 user_data = 7;
    if (has_user_data()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableConfig_Tablet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RAMCloud.ProtoBuf.TableConfig.Tablet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TableConfig_Tablet* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TableConfig_Tablet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RAMCloud.ProtoBuf.TableConfig.Tablet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RAMCloud.ProtoBuf.TableConfig.Tablet)
    MergeFrom(*source);
  }
}

void TableConfig_Tablet::MergeFrom(const TableConfig_Tablet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RAMCloud.ProtoBuf.TableConfig.Tablet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
    if (from.has_start_key_hash()) {
      set_start_key_hash(from.start_key_hash());
    }
    if (from.has_end_key_hash()) {
      set_end_key_hash(from.end_key_hash());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_service_locator()) {
      set_has_service_locator();
      service_locator_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_locator_);
    }
    if (from.has_user_data()) {
      set_user_data(from.user_data());
    }
    if (from.has_ctime_log_head_id()) {
      set_ctime_log_head_id(from.ctime_log_head_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ctime_log_head_offset()) {
      set_ctime_log_head_offset(from.ctime_log_head_offset());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TableConfig_Tablet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RAMCloud.ProtoBuf.TableConfig.Tablet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableConfig_Tablet::CopyFrom(const TableConfig_Tablet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RAMCloud.ProtoBuf.TableConfig.Tablet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableConfig_Tablet::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000018f) != 0x0000018f) return false;

  return true;
}

void TableConfig_Tablet::Swap(TableConfig_Tablet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TableConfig_Tablet::InternalSwap(TableConfig_Tablet* other) {
  std::swap(table_id_, other->table_id_);
  std::swap(start_key_hash_, other->start_key_hash_);
  std::swap(end_key_hash_, other->end_key_hash_);
  std::swap(state_, other->state_);
  std::swap(server_id_, other->server_id_);
  service_locator_.Swap(&other->service_locator_);
  std::swap(user_data_, other->user_data_);
  std::swap(ctime_log_head_id_, other->ctime_log_head_id_);
  std::swap(ctime_log_head_offset_, other->ctime_log_head_offset_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TableConfig_Tablet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TableConfig_Tablet_descriptor_;
  metadata.reflection = TableConfig_Tablet_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TableConfig_Index_Indexlet::kStartKeyFieldNumber;
const int TableConfig_Index_Indexlet::kEndKeyFieldNumber;
const int TableConfig_Index_Indexlet::kServerIdFieldNumber;
const int TableConfig_Index_Indexlet::kServiceLocatorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TableConfig_Index_Indexlet::TableConfig_Index_Indexlet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet)
}

void TableConfig_Index_Indexlet::InitAsDefaultInstance() {
}

TableConfig_Index_Indexlet::TableConfig_Index_Indexlet(const TableConfig_Index_Indexlet& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet)
}

void TableConfig_Index_Indexlet::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  start_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_id_ = GOOGLE_ULONGLONG(0);
  service_locator_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TableConfig_Index_Indexlet::~TableConfig_Index_Indexlet() {
  // @@protoc_insertion_point(destructor:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet)
  SharedDtor();
}

void TableConfig_Index_Indexlet::SharedDtor() {
  start_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_locator_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TableConfig_Index_Indexlet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableConfig_Index_Indexlet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableConfig_Index_Indexlet_descriptor_;
}

const TableConfig_Index_Indexlet& TableConfig_Index_Indexlet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TableConfig_2eproto();
  return *default_instance_;
}

TableConfig_Index_Indexlet* TableConfig_Index_Indexlet::default_instance_ = NULL;

TableConfig_Index_Indexlet* TableConfig_Index_Indexlet::New(::google::protobuf::Arena* arena) const {
  TableConfig_Index_Indexlet* n = new TableConfig_Index_Indexlet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TableConfig_Index_Indexlet::Clear() {
// @@protoc_insertion_point(message_clear_start:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_start_key()) {
      start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_end_key()) {
      end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    server_id_ = GOOGLE_ULONGLONG(0);
    if (has_service_locator()) {
      service_locator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TableConfig_Index_Indexlet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes start_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_end_key;
        break;
      }

      // required bytes end_key = 2;
      case 2: {
        if (tag == 18) {
         parse_end_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_server_id;
        break;
      }

      // required fixed64 server_id = 3;
      case 3: {
        if (tag == 25) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_service_locator;
        break;
      }

      // required string service_locator = 4;
      case 4: {
        if (tag == 34) {
         parse_service_locator:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_locator()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->service_locator().data(), this->service_locator().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RAMCloud.ProtoBuf.TableConfig.Index.Indexlet.service_locator");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet)
  return false;
#undef DO_
}

void TableConfig_Index_Indexlet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet)
  // required bytes start_key = 1;
  if (has_start_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->start_key(), output);
  }

  // required bytes end_key = 2;
  if (has_end_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->end_key(), output);
  }

  // required fixed64 server_id = 3;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->server_id(), output);
  }

  // required string service_locator = 4;
  if (has_service_locator()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_locator().data(), this->service_locator().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RAMCloud.ProtoBuf.TableConfig.Index.Indexlet.service_locator");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->service_locator(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet)
}

::google::protobuf::uint8* TableConfig_Index_Indexlet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet)
  // required bytes start_key = 1;
  if (has_start_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->start_key(), target);
  }

  // required bytes end_key = 2;
  if (has_end_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->end_key(), target);
  }

  // required fixed64 server_id = 3;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->server_id(), target);
  }

  // required string service_locator = 4;
  if (has_service_locator()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_locator().data(), this->service_locator().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RAMCloud.ProtoBuf.TableConfig.Index.Indexlet.service_locator");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->service_locator(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet)
  return target;
}

int TableConfig_Index_Indexlet::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet)
  int total_size = 0;

  if (has_start_key()) {
    // required bytes start_key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->start_key());
  }

  if (has_end_key()) {
    // required bytes end_key = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->end_key());
  }

  if (has_server_id()) {
    // required fixed64 server_id = 3;
    total_size += 1 + 8;
  }

  if (has_service_locator()) {
    // required string service_locator = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service_locator());
  }

  return total_size;
}
int TableConfig_Index_Indexlet::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required bytes start_key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->start_key());

    // required bytes end_key = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->end_key());

    // required fixed64 server_id = 3;
    total_size += 1 + 8;

    // required string service_locator = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service_locator());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableConfig_Index_Indexlet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TableConfig_Index_Indexlet* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TableConfig_Index_Indexlet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet)
    MergeFrom(*source);
  }
}

void TableConfig_Index_Indexlet::MergeFrom(const TableConfig_Index_Indexlet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_key()) {
      set_has_start_key();
      start_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_key_);
    }
    if (from.has_end_key()) {
      set_has_end_key();
      end_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_key_);
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_service_locator()) {
      set_has_service_locator();
      service_locator_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_locator_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TableConfig_Index_Indexlet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableConfig_Index_Indexlet::CopyFrom(const TableConfig_Index_Indexlet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableConfig_Index_Indexlet::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void TableConfig_Index_Indexlet::Swap(TableConfig_Index_Indexlet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TableConfig_Index_Indexlet::InternalSwap(TableConfig_Index_Indexlet* other) {
  start_key_.Swap(&other->start_key_);
  end_key_.Swap(&other->end_key_);
  std::swap(server_id_, other->server_id_);
  service_locator_.Swap(&other->service_locator_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TableConfig_Index_Indexlet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TableConfig_Index_Indexlet_descriptor_;
  metadata.reflection = TableConfig_Index_Indexlet_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TableConfig_Index::kIndexIdFieldNumber;
const int TableConfig_Index::kIndexTypeFieldNumber;
const int TableConfig_Index::kIndexletFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TableConfig_Index::TableConfig_Index()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RAMCloud.ProtoBuf.TableConfig.Index)
}

void TableConfig_Index::InitAsDefaultInstance() {
}

TableConfig_Index::TableConfig_Index(const TableConfig_Index& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RAMCloud.ProtoBuf.TableConfig.Index)
}

void TableConfig_Index::SharedCtor() {
  _cached_size_ = 0;
  index_id_ = 0u;
  index_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TableConfig_Index::~TableConfig_Index() {
  // @@protoc_insertion_point(destructor:RAMCloud.ProtoBuf.TableConfig.Index)
  SharedDtor();
}

void TableConfig_Index::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TableConfig_Index::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableConfig_Index::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableConfig_Index_descriptor_;
}

const TableConfig_Index& TableConfig_Index::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TableConfig_2eproto();
  return *default_instance_;
}

TableConfig_Index* TableConfig_Index::default_instance_ = NULL;

TableConfig_Index* TableConfig_Index::New(::google::protobuf::Arena* arena) const {
  TableConfig_Index* n = new TableConfig_Index;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TableConfig_Index::Clear() {
// @@protoc_insertion_point(message_clear_start:RAMCloud.ProtoBuf.TableConfig.Index)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TableConfig_Index, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TableConfig_Index*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(index_id_, index_type_);

#undef ZR_HELPER_
#undef ZR_

  indexlet_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TableConfig_Index::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RAMCloud.ProtoBuf.TableConfig.Index)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 index_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_id_)));
          set_has_index_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_index_type;
        break;
      }

      // required uint32 index_type = 2;
      case 2: {
        if (tag == 16) {
         parse_index_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_type_)));
          set_has_index_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_indexlet;
        break;
      }

      // repeated .RAMCloud.ProtoBuf.TableConfig.Index.Indexlet indexlet = 3;
      case 3: {
        if (tag == 26) {
         parse_indexlet:
          DO_(input->IncrementRecursionDepth());
         parse_loop_indexlet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_indexlet()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_indexlet;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RAMCloud.ProtoBuf.TableConfig.Index)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RAMCloud.ProtoBuf.TableConfig.Index)
  return false;
#undef DO_
}

void TableConfig_Index::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RAMCloud.ProtoBuf.TableConfig.Index)
  // required uint32 index_id = 1;
  if (has_index_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index_id(), output);
  }

  // required uint32 index_type = 2;
  if (has_index_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->index_type(), output);
  }

  // repeated .RAMCloud.ProtoBuf.TableConfig.Index.Indexlet indexlet = 3;
  for (unsigned int i = 0, n = this->indexlet_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->indexlet(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RAMCloud.ProtoBuf.TableConfig.Index)
}

::google::protobuf::uint8* TableConfig_Index::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RAMCloud.ProtoBuf.TableConfig.Index)
  // required uint32 index_id = 1;
  if (has_index_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index_id(), target);
  }

  // required uint32 index_type = 2;
  if (has_index_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->index_type(), target);
  }

  // repeated .RAMCloud.ProtoBuf.TableConfig.Index.Indexlet indexlet = 3;
  for (unsigned int i = 0, n = this->indexlet_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->indexlet(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RAMCloud.ProtoBuf.TableConfig.Index)
  return target;
}

int TableConfig_Index::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RAMCloud.ProtoBuf.TableConfig.Index)
  int total_size = 0;

  if (has_index_id()) {
    // required uint32 index_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->index_id());
  }

  if (has_index_type()) {
    // required uint32 index_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->index_type());
  }

  return total_size;
}
int TableConfig_Index::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:RAMCloud.ProtoBuf.TableConfig.Index)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 index_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->index_id());

    // required uint32 index_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->index_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .RAMCloud.ProtoBuf.TableConfig.Index.Indexlet indexlet = 3;
  total_size += 1 * this->indexlet_size();
  for (int i = 0; i < this->indexlet_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->indexlet(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableConfig_Index::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RAMCloud.ProtoBuf.TableConfig.Index)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TableConfig_Index* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TableConfig_Index>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RAMCloud.ProtoBuf.TableConfig.Index)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RAMCloud.ProtoBuf.TableConfig.Index)
    MergeFrom(*source);
  }
}

void TableConfig_Index::MergeFrom(const TableConfig_Index& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RAMCloud.ProtoBuf.TableConfig.Index)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  indexlet_.MergeFrom(from.indexlet_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index_id()) {
      set_index_id(from.index_id());
    }
    if (from.has_index_type()) {
      set_index_type(from.index_type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TableConfig_Index::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RAMCloud.ProtoBuf.TableConfig.Index)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableConfig_Index::CopyFrom(const TableConfig_Index& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RAMCloud.ProtoBuf.TableConfig.Index)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableConfig_Index::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->indexlet())) return false;
  return true;
}

void TableConfig_Index::Swap(TableConfig_Index* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TableConfig_Index::InternalSwap(TableConfig_Index* other) {
  std::swap(index_id_, other->index_id_);
  std::swap(index_type_, other->index_type_);
  indexlet_.UnsafeArenaSwap(&other->indexlet_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TableConfig_Index::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TableConfig_Index_descriptor_;
  metadata.reflection = TableConfig_Index_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TableConfig::kTabletFieldNumber;
const int TableConfig::kIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TableConfig::TableConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RAMCloud.ProtoBuf.TableConfig)
}

void TableConfig::InitAsDefaultInstance() {
}

TableConfig::TableConfig(const TableConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RAMCloud.ProtoBuf.TableConfig)
}

void TableConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TableConfig::~TableConfig() {
  // @@protoc_insertion_point(destructor:RAMCloud.ProtoBuf.TableConfig)
  SharedDtor();
}

void TableConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TableConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableConfig_descriptor_;
}

const TableConfig& TableConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TableConfig_2eproto();
  return *default_instance_;
}

TableConfig* TableConfig::default_instance_ = NULL;

TableConfig* TableConfig::New(::google::protobuf::Arena* arena) const {
  TableConfig* n = new TableConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TableConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:RAMCloud.ProtoBuf.TableConfig)
  tablet_.Clear();
  index_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TableConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RAMCloud.ProtoBuf.TableConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RAMCloud.ProtoBuf.TableConfig.Tablet tablet = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_tablet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_tablet()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_tablet;
        if (input->ExpectTag(18)) goto parse_loop_index;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .RAMCloud.ProtoBuf.TableConfig.Index index = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_index;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RAMCloud.ProtoBuf.TableConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RAMCloud.ProtoBuf.TableConfig)
  return false;
#undef DO_
}

void TableConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RAMCloud.ProtoBuf.TableConfig)
  // repeated .RAMCloud.ProtoBuf.TableConfig.Tablet tablet = 1;
  for (unsigned int i = 0, n = this->tablet_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tablet(i), output);
  }

  // repeated .RAMCloud.ProtoBuf.TableConfig.Index index = 2;
  for (unsigned int i = 0, n = this->index_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->index(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RAMCloud.ProtoBuf.TableConfig)
}

::google::protobuf::uint8* TableConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RAMCloud.ProtoBuf.TableConfig)
  // repeated .RAMCloud.ProtoBuf.TableConfig.Tablet tablet = 1;
  for (unsigned int i = 0, n = this->tablet_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->tablet(i), false, target);
  }

  // repeated .RAMCloud.ProtoBuf.TableConfig.Index index = 2;
  for (unsigned int i = 0, n = this->index_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->index(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RAMCloud.ProtoBuf.TableConfig)
  return target;
}

int TableConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:RAMCloud.ProtoBuf.TableConfig)
  int total_size = 0;

  // repeated .RAMCloud.ProtoBuf.TableConfig.Tablet tablet = 1;
  total_size += 1 * this->tablet_size();
  for (int i = 0; i < this->tablet_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tablet(i));
  }

  // repeated .RAMCloud.ProtoBuf.TableConfig.Index index = 2;
  total_size += 1 * this->index_size();
  for (int i = 0; i < this->index_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->index(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RAMCloud.ProtoBuf.TableConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TableConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TableConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RAMCloud.ProtoBuf.TableConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RAMCloud.ProtoBuf.TableConfig)
    MergeFrom(*source);
  }
}

void TableConfig::MergeFrom(const TableConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RAMCloud.ProtoBuf.TableConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  tablet_.MergeFrom(from.tablet_);
  index_.MergeFrom(from.index_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TableConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RAMCloud.ProtoBuf.TableConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableConfig::CopyFrom(const TableConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RAMCloud.ProtoBuf.TableConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableConfig::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->tablet())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->index())) return false;
  return true;
}

void TableConfig::Swap(TableConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TableConfig::InternalSwap(TableConfig* other) {
  tablet_.UnsafeArenaSwap(&other->tablet_);
  index_.UnsafeArenaSwap(&other->index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TableConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TableConfig_descriptor_;
  metadata.reflection = TableConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TableConfig_Tablet

// required uint64 table_id = 1;
bool TableConfig_Tablet::has_table_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TableConfig_Tablet::set_has_table_id() {
  _has_bits_[0] |= 0x00000001u;
}
void TableConfig_Tablet::clear_has_table_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void TableConfig_Tablet::clear_table_id() {
  table_id_ = GOOGLE_ULONGLONG(0);
  clear_has_table_id();
}
 ::google::protobuf::uint64 TableConfig_Tablet::table_id() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.TableConfig.Tablet.table_id)
  return table_id_;
}
 void TableConfig_Tablet::set_table_id(::google::protobuf::uint64 value) {
  set_has_table_id();
  table_id_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.TableConfig.Tablet.table_id)
}

// required uint64 start_key_hash = 2;
bool TableConfig_Tablet::has_start_key_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TableConfig_Tablet::set_has_start_key_hash() {
  _has_bits_[0] |= 0x00000002u;
}
void TableConfig_Tablet::clear_has_start_key_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
void TableConfig_Tablet::clear_start_key_hash() {
  start_key_hash_ = GOOGLE_ULONGLONG(0);
  clear_has_start_key_hash();
}
 ::google::protobuf::uint64 TableConfig_Tablet::start_key_hash() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.TableConfig.Tablet.start_key_hash)
  return start_key_hash_;
}
 void TableConfig_Tablet::set_start_key_hash(::google::protobuf::uint64 value) {
  set_has_start_key_hash();
  start_key_hash_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.TableConfig.Tablet.start_key_hash)
}

// required uint64 end_key_hash = 3;
bool TableConfig_Tablet::has_end_key_hash() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TableConfig_Tablet::set_has_end_key_hash() {
  _has_bits_[0] |= 0x00000004u;
}
void TableConfig_Tablet::clear_has_end_key_hash() {
  _has_bits_[0] &= ~0x00000004u;
}
void TableConfig_Tablet::clear_end_key_hash() {
  end_key_hash_ = GOOGLE_ULONGLONG(0);
  clear_has_end_key_hash();
}
 ::google::protobuf::uint64 TableConfig_Tablet::end_key_hash() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.TableConfig.Tablet.end_key_hash)
  return end_key_hash_;
}
 void TableConfig_Tablet::set_end_key_hash(::google::protobuf::uint64 value) {
  set_has_end_key_hash();
  end_key_hash_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.TableConfig.Tablet.end_key_hash)
}

// required .RAMCloud.ProtoBuf.TableConfig.Tablet.State state = 4;
bool TableConfig_Tablet::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TableConfig_Tablet::set_has_state() {
  _has_bits_[0] |= 0x00000008u;
}
void TableConfig_Tablet::clear_has_state() {
  _has_bits_[0] &= ~0x00000008u;
}
void TableConfig_Tablet::clear_state() {
  state_ = 0;
  clear_has_state();
}
 ::RAMCloud::ProtoBuf::TableConfig_Tablet_State TableConfig_Tablet::state() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.TableConfig.Tablet.state)
  return static_cast< ::RAMCloud::ProtoBuf::TableConfig_Tablet_State >(state_);
}
 void TableConfig_Tablet::set_state(::RAMCloud::ProtoBuf::TableConfig_Tablet_State value) {
  assert(::RAMCloud::ProtoBuf::TableConfig_Tablet_State_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.TableConfig.Tablet.state)
}

// optional fixed64 server_id = 5;
bool TableConfig_Tablet::has_server_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TableConfig_Tablet::set_has_server_id() {
  _has_bits_[0] |= 0x00000010u;
}
void TableConfig_Tablet::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void TableConfig_Tablet::clear_server_id() {
  server_id_ = GOOGLE_ULONGLONG(0);
  clear_has_server_id();
}
 ::google::protobuf::uint64 TableConfig_Tablet::server_id() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.TableConfig.Tablet.server_id)
  return server_id_;
}
 void TableConfig_Tablet::set_server_id(::google::protobuf::uint64 value) {
  set_has_server_id();
  server_id_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.TableConfig.Tablet.server_id)
}

// optional string service_locator = 6;
bool TableConfig_Tablet::has_service_locator() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TableConfig_Tablet::set_has_service_locator() {
  _has_bits_[0] |= 0x00000020u;
}
void TableConfig_Tablet::clear_has_service_locator() {
  _has_bits_[0] &= ~0x00000020u;
}
void TableConfig_Tablet::clear_service_locator() {
  service_locator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_service_locator();
}
 const ::std::string& TableConfig_Tablet::service_locator() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.TableConfig.Tablet.service_locator)
  return service_locator_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TableConfig_Tablet::set_service_locator(const ::std::string& value) {
  set_has_service_locator();
  service_locator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.TableConfig.Tablet.service_locator)
}
 void TableConfig_Tablet::set_service_locator(const char* value) {
  set_has_service_locator();
  service_locator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RAMCloud.ProtoBuf.TableConfig.Tablet.service_locator)
}
 void TableConfig_Tablet::set_service_locator(const char* value, size_t size) {
  set_has_service_locator();
  service_locator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RAMCloud.ProtoBuf.TableConfig.Tablet.service_locator)
}
 ::std::string* TableConfig_Tablet::mutable_service_locator() {
  set_has_service_locator();
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.TableConfig.Tablet.service_locator)
  return service_locator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TableConfig_Tablet::release_service_locator() {
  // @@protoc_insertion_point(field_release:RAMCloud.ProtoBuf.TableConfig.Tablet.service_locator)
  clear_has_service_locator();
  return service_locator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TableConfig_Tablet::set_allocated_service_locator(::std::string* service_locator) {
  if (service_locator != NULL) {
    set_has_service_locator();
  } else {
    clear_has_service_locator();
  }
  service_locator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_locator);
  // @@protoc_insertion_point(field_set_allocated:RAMCloud.ProtoBuf.TableConfig.Tablet.service_locator)
}

// optional fixed64 user_data = 7;
bool TableConfig_Tablet::has_user_data() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void TableConfig_Tablet::set_has_user_data() {
  _has_bits_[0] |= 0x00000040u;
}
void TableConfig_Tablet::clear_has_user_data() {
  _has_bits_[0] &= ~0x00000040u;
}
void TableConfig_Tablet::clear_user_data() {
  user_data_ = GOOGLE_ULONGLONG(0);
  clear_has_user_data();
}
 ::google::protobuf::uint64 TableConfig_Tablet::user_data() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.TableConfig.Tablet.user_data)
  return user_data_;
}
 void TableConfig_Tablet::set_user_data(::google::protobuf::uint64 value) {
  set_has_user_data();
  user_data_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.TableConfig.Tablet.user_data)
}

// required uint64 ctime_log_head_id = 8;
bool TableConfig_Tablet::has_ctime_log_head_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void TableConfig_Tablet::set_has_ctime_log_head_id() {
  _has_bits_[0] |= 0x00000080u;
}
void TableConfig_Tablet::clear_has_ctime_log_head_id() {
  _has_bits_[0] &= ~0x00000080u;
}
void TableConfig_Tablet::clear_ctime_log_head_id() {
  ctime_log_head_id_ = GOOGLE_ULONGLONG(0);
  clear_has_ctime_log_head_id();
}
 ::google::protobuf::uint64 TableConfig_Tablet::ctime_log_head_id() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.TableConfig.Tablet.ctime_log_head_id)
  return ctime_log_head_id_;
}
 void TableConfig_Tablet::set_ctime_log_head_id(::google::protobuf::uint64 value) {
  set_has_ctime_log_head_id();
  ctime_log_head_id_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.TableConfig.Tablet.ctime_log_head_id)
}

// required uint32 ctime_log_head_offset = 9;
bool TableConfig_Tablet::has_ctime_log_head_offset() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void TableConfig_Tablet::set_has_ctime_log_head_offset() {
  _has_bits_[0] |= 0x00000100u;
}
void TableConfig_Tablet::clear_has_ctime_log_head_offset() {
  _has_bits_[0] &= ~0x00000100u;
}
void TableConfig_Tablet::clear_ctime_log_head_offset() {
  ctime_log_head_offset_ = 0u;
  clear_has_ctime_log_head_offset();
}
 ::google::protobuf::uint32 TableConfig_Tablet::ctime_log_head_offset() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.TableConfig.Tablet.ctime_log_head_offset)
  return ctime_log_head_offset_;
}
 void TableConfig_Tablet::set_ctime_log_head_offset(::google::protobuf::uint32 value) {
  set_has_ctime_log_head_offset();
  ctime_log_head_offset_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.TableConfig.Tablet.ctime_log_head_offset)
}

// -------------------------------------------------------------------

// TableConfig_Index_Indexlet

// required bytes start_key = 1;
bool TableConfig_Index_Indexlet::has_start_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TableConfig_Index_Indexlet::set_has_start_key() {
  _has_bits_[0] |= 0x00000001u;
}
void TableConfig_Index_Indexlet::clear_has_start_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void TableConfig_Index_Indexlet::clear_start_key() {
  start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_start_key();
}
 const ::std::string& TableConfig_Index_Indexlet::start_key() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet.start_key)
  return start_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TableConfig_Index_Indexlet::set_start_key(const ::std::string& value) {
  set_has_start_key();
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet.start_key)
}
 void TableConfig_Index_Indexlet::set_start_key(const char* value) {
  set_has_start_key();
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet.start_key)
}
 void TableConfig_Index_Indexlet::set_start_key(const void* value, size_t size) {
  set_has_start_key();
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet.start_key)
}
 ::std::string* TableConfig_Index_Indexlet::mutable_start_key() {
  set_has_start_key();
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet.start_key)
  return start_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TableConfig_Index_Indexlet::release_start_key() {
  // @@protoc_insertion_point(field_release:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet.start_key)
  clear_has_start_key();
  return start_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TableConfig_Index_Indexlet::set_allocated_start_key(::std::string* start_key) {
  if (start_key != NULL) {
    set_has_start_key();
  } else {
    clear_has_start_key();
  }
  start_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_key);
  // @@protoc_insertion_point(field_set_allocated:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet.start_key)
}

// required bytes end_key = 2;
bool TableConfig_Index_Indexlet::has_end_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TableConfig_Index_Indexlet::set_has_end_key() {
  _has_bits_[0] |= 0x00000002u;
}
void TableConfig_Index_Indexlet::clear_has_end_key() {
  _has_bits_[0] &= ~0x00000002u;
}
void TableConfig_Index_Indexlet::clear_end_key() {
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_end_key();
}
 const ::std::string& TableConfig_Index_Indexlet::end_key() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet.end_key)
  return end_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TableConfig_Index_Indexlet::set_end_key(const ::std::string& value) {
  set_has_end_key();
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet.end_key)
}
 void TableConfig_Index_Indexlet::set_end_key(const char* value) {
  set_has_end_key();
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet.end_key)
}
 void TableConfig_Index_Indexlet::set_end_key(const void* value, size_t size) {
  set_has_end_key();
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet.end_key)
}
 ::std::string* TableConfig_Index_Indexlet::mutable_end_key() {
  set_has_end_key();
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet.end_key)
  return end_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TableConfig_Index_Indexlet::release_end_key() {
  // @@protoc_insertion_point(field_release:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet.end_key)
  clear_has_end_key();
  return end_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TableConfig_Index_Indexlet::set_allocated_end_key(::std::string* end_key) {
  if (end_key != NULL) {
    set_has_end_key();
  } else {
    clear_has_end_key();
  }
  end_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_key);
  // @@protoc_insertion_point(field_set_allocated:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet.end_key)
}

// required fixed64 server_id = 3;
bool TableConfig_Index_Indexlet::has_server_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TableConfig_Index_Indexlet::set_has_server_id() {
  _has_bits_[0] |= 0x00000004u;
}
void TableConfig_Index_Indexlet::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void TableConfig_Index_Indexlet::clear_server_id() {
  server_id_ = GOOGLE_ULONGLONG(0);
  clear_has_server_id();
}
 ::google::protobuf::uint64 TableConfig_Index_Indexlet::server_id() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet.server_id)
  return server_id_;
}
 void TableConfig_Index_Indexlet::set_server_id(::google::protobuf::uint64 value) {
  set_has_server_id();
  server_id_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet.server_id)
}

// required string service_locator = 4;
bool TableConfig_Index_Indexlet::has_service_locator() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TableConfig_Index_Indexlet::set_has_service_locator() {
  _has_bits_[0] |= 0x00000008u;
}
void TableConfig_Index_Indexlet::clear_has_service_locator() {
  _has_bits_[0] &= ~0x00000008u;
}
void TableConfig_Index_Indexlet::clear_service_locator() {
  service_locator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_service_locator();
}
 const ::std::string& TableConfig_Index_Indexlet::service_locator() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet.service_locator)
  return service_locator_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TableConfig_Index_Indexlet::set_service_locator(const ::std::string& value) {
  set_has_service_locator();
  service_locator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet.service_locator)
}
 void TableConfig_Index_Indexlet::set_service_locator(const char* value) {
  set_has_service_locator();
  service_locator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet.service_locator)
}
 void TableConfig_Index_Indexlet::set_service_locator(const char* value, size_t size) {
  set_has_service_locator();
  service_locator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet.service_locator)
}
 ::std::string* TableConfig_Index_Indexlet::mutable_service_locator() {
  set_has_service_locator();
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet.service_locator)
  return service_locator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TableConfig_Index_Indexlet::release_service_locator() {
  // @@protoc_insertion_point(field_release:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet.service_locator)
  clear_has_service_locator();
  return service_locator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TableConfig_Index_Indexlet::set_allocated_service_locator(::std::string* service_locator) {
  if (service_locator != NULL) {
    set_has_service_locator();
  } else {
    clear_has_service_locator();
  }
  service_locator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_locator);
  // @@protoc_insertion_point(field_set_allocated:RAMCloud.ProtoBuf.TableConfig.Index.Indexlet.service_locator)
}

// -------------------------------------------------------------------

// TableConfig_Index

// required uint32 index_id = 1;
bool TableConfig_Index::has_index_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TableConfig_Index::set_has_index_id() {
  _has_bits_[0] |= 0x00000001u;
}
void TableConfig_Index::clear_has_index_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void TableConfig_Index::clear_index_id() {
  index_id_ = 0u;
  clear_has_index_id();
}
 ::google::protobuf::uint32 TableConfig_Index::index_id() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.TableConfig.Index.index_id)
  return index_id_;
}
 void TableConfig_Index::set_index_id(::google::protobuf::uint32 value) {
  set_has_index_id();
  index_id_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.TableConfig.Index.index_id)
}

// required uint32 index_type = 2;
bool TableConfig_Index::has_index_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TableConfig_Index::set_has_index_type() {
  _has_bits_[0] |= 0x00000002u;
}
void TableConfig_Index::clear_has_index_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void TableConfig_Index::clear_index_type() {
  index_type_ = 0u;
  clear_has_index_type();
}
 ::google::protobuf::uint32 TableConfig_Index::index_type() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.TableConfig.Index.index_type)
  return index_type_;
}
 void TableConfig_Index::set_index_type(::google::protobuf::uint32 value) {
  set_has_index_type();
  index_type_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.TableConfig.Index.index_type)
}

// repeated .RAMCloud.ProtoBuf.TableConfig.Index.Indexlet indexlet = 3;
int TableConfig_Index::indexlet_size() const {
  return indexlet_.size();
}
void TableConfig_Index::clear_indexlet() {
  indexlet_.Clear();
}
const ::RAMCloud::ProtoBuf::TableConfig_Index_Indexlet& TableConfig_Index::indexlet(int index) const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.TableConfig.Index.indexlet)
  return indexlet_.Get(index);
}
::RAMCloud::ProtoBuf::TableConfig_Index_Indexlet* TableConfig_Index::mutable_indexlet(int index) {
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.TableConfig.Index.indexlet)
  return indexlet_.Mutable(index);
}
::RAMCloud::ProtoBuf::TableConfig_Index_Indexlet* TableConfig_Index::add_indexlet() {
  // @@protoc_insertion_point(field_add:RAMCloud.ProtoBuf.TableConfig.Index.indexlet)
  return indexlet_.Add();
}
::google::protobuf::RepeatedPtrField< ::RAMCloud::ProtoBuf::TableConfig_Index_Indexlet >*
TableConfig_Index::mutable_indexlet() {
  // @@protoc_insertion_point(field_mutable_list:RAMCloud.ProtoBuf.TableConfig.Index.indexlet)
  return &indexlet_;
}
const ::google::protobuf::RepeatedPtrField< ::RAMCloud::ProtoBuf::TableConfig_Index_Indexlet >&
TableConfig_Index::indexlet() const {
  // @@protoc_insertion_point(field_list:RAMCloud.ProtoBuf.TableConfig.Index.indexlet)
  return indexlet_;
}

// -------------------------------------------------------------------

// TableConfig

// repeated .RAMCloud.ProtoBuf.TableConfig.Tablet tablet = 1;
int TableConfig::tablet_size() const {
  return tablet_.size();
}
void TableConfig::clear_tablet() {
  tablet_.Clear();
}
const ::RAMCloud::ProtoBuf::TableConfig_Tablet& TableConfig::tablet(int index) const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.TableConfig.tablet)
  return tablet_.Get(index);
}
::RAMCloud::ProtoBuf::TableConfig_Tablet* TableConfig::mutable_tablet(int index) {
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.TableConfig.tablet)
  return tablet_.Mutable(index);
}
::RAMCloud::ProtoBuf::TableConfig_Tablet* TableConfig::add_tablet() {
  // @@protoc_insertion_point(field_add:RAMCloud.ProtoBuf.TableConfig.tablet)
  return tablet_.Add();
}
::google::protobuf::RepeatedPtrField< ::RAMCloud::ProtoBuf::TableConfig_Tablet >*
TableConfig::mutable_tablet() {
  // @@protoc_insertion_point(field_mutable_list:RAMCloud.ProtoBuf.TableConfig.tablet)
  return &tablet_;
}
const ::google::protobuf::RepeatedPtrField< ::RAMCloud::ProtoBuf::TableConfig_Tablet >&
TableConfig::tablet() const {
  // @@protoc_insertion_point(field_list:RAMCloud.ProtoBuf.TableConfig.tablet)
  return tablet_;
}

// repeated .RAMCloud.ProtoBuf.TableConfig.Index index = 2;
int TableConfig::index_size() const {
  return index_.size();
}
void TableConfig::clear_index() {
  index_.Clear();
}
const ::RAMCloud::ProtoBuf::TableConfig_Index& TableConfig::index(int index) const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.TableConfig.index)
  return index_.Get(index);
}
::RAMCloud::ProtoBuf::TableConfig_Index* TableConfig::mutable_index(int index) {
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.TableConfig.index)
  return index_.Mutable(index);
}
::RAMCloud::ProtoBuf::TableConfig_Index* TableConfig::add_index() {
  // @@protoc_insertion_point(field_add:RAMCloud.ProtoBuf.TableConfig.index)
  return index_.Add();
}
::google::protobuf::RepeatedPtrField< ::RAMCloud::ProtoBuf::TableConfig_Index >*
TableConfig::mutable_index() {
  // @@protoc_insertion_point(field_mutable_list:RAMCloud.ProtoBuf.TableConfig.index)
  return &index_;
}
const ::google::protobuf::RepeatedPtrField< ::RAMCloud::ProtoBuf::TableConfig_Index >&
TableConfig::index() const {
  // @@protoc_insertion_point(field_list:RAMCloud.ProtoBuf.TableConfig.index)
  return index_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoBuf
}  // namespace RAMCloud

// @@protoc_insertion_point(global_scope)
// RAMCloud pragma [GCCWARN=0]
