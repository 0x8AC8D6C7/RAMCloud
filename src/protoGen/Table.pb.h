// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Table.proto

#ifndef PROTOBUF_Table_2eproto__INCLUDED
#define PROTOBUF_Table_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace RAMCloud {
namespace ProtoBuf {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_Table_2eproto();
void protobuf_AssignDesc_Table_2eproto();
void protobuf_ShutdownFile_Table_2eproto();

class Table;
class Table_Index;
class Table_Index_Indexlet;
class Table_Reassign;
class Table_ReassignIndexlet;
class Table_Split;
class Table_Tablet;

enum Table_Tablet_State {
  Table_Tablet_State_NORMAL = 0,
  Table_Tablet_State_RECOVERING = 1,
  Table_Tablet_State_BOGUS = 2
};
bool Table_Tablet_State_IsValid(int value);
const Table_Tablet_State Table_Tablet_State_State_MIN = Table_Tablet_State_NORMAL;
const Table_Tablet_State Table_Tablet_State_State_MAX = Table_Tablet_State_BOGUS;
const int Table_Tablet_State_State_ARRAYSIZE = Table_Tablet_State_State_MAX + 1;

const ::google::protobuf::EnumDescriptor* Table_Tablet_State_descriptor();
inline const ::std::string& Table_Tablet_State_Name(Table_Tablet_State value) {
  return ::google::protobuf::internal::NameOfEnum(
    Table_Tablet_State_descriptor(), value);
}
inline bool Table_Tablet_State_Parse(
    const ::std::string& name, Table_Tablet_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Table_Tablet_State>(
    Table_Tablet_State_descriptor(), name, value);
}
// ===================================================================

class Table_Tablet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RAMCloud.ProtoBuf.Table.Tablet) */ {
 public:
  Table_Tablet();
  virtual ~Table_Tablet();

  Table_Tablet(const Table_Tablet& from);

  inline Table_Tablet& operator=(const Table_Tablet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Table_Tablet& default_instance();

  void Swap(Table_Tablet* other);

  // implements Message ----------------------------------------------

  inline Table_Tablet* New() const { return New(NULL); }

  Table_Tablet* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Table_Tablet& from);
  void MergeFrom(const Table_Tablet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Table_Tablet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Table_Tablet_State State;
  static const State NORMAL =
    Table_Tablet_State_NORMAL;
  static const State RECOVERING =
    Table_Tablet_State_RECOVERING;
  static const State BOGUS =
    Table_Tablet_State_BOGUS;
  static inline bool State_IsValid(int value) {
    return Table_Tablet_State_IsValid(value);
  }
  static const State State_MIN =
    Table_Tablet_State_State_MIN;
  static const State State_MAX =
    Table_Tablet_State_State_MAX;
  static const int State_ARRAYSIZE =
    Table_Tablet_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  State_descriptor() {
    return Table_Tablet_State_descriptor();
  }
  static inline const ::std::string& State_Name(State value) {
    return Table_Tablet_State_Name(value);
  }
  static inline bool State_Parse(const ::std::string& name,
      State* value) {
    return Table_Tablet_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint64 start_key_hash = 1;
  bool has_start_key_hash() const;
  void clear_start_key_hash();
  static const int kStartKeyHashFieldNumber = 1;
  ::google::protobuf::uint64 start_key_hash() const;
  void set_start_key_hash(::google::protobuf::uint64 value);

  // required uint64 end_key_hash = 2;
  bool has_end_key_hash() const;
  void clear_end_key_hash();
  static const int kEndKeyHashFieldNumber = 2;
  ::google::protobuf::uint64 end_key_hash() const;
  void set_end_key_hash(::google::protobuf::uint64 value);

  // required .RAMCloud.ProtoBuf.Table.Tablet.State state = 3;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 3;
  ::RAMCloud::ProtoBuf::Table_Tablet_State state() const;
  void set_state(::RAMCloud::ProtoBuf::Table_Tablet_State value);

  // required fixed64 server_id = 4;
  bool has_server_id() const;
  void clear_server_id();
  static const int kServerIdFieldNumber = 4;
  ::google::protobuf::uint64 server_id() const;
  void set_server_id(::google::protobuf::uint64 value);

  // required uint64 ctime_log_head_id = 5;
  bool has_ctime_log_head_id() const;
  void clear_ctime_log_head_id();
  static const int kCtimeLogHeadIdFieldNumber = 5;
  ::google::protobuf::uint64 ctime_log_head_id() const;
  void set_ctime_log_head_id(::google::protobuf::uint64 value);

  // required uint32 ctime_log_head_offset = 6;
  bool has_ctime_log_head_offset() const;
  void clear_ctime_log_head_offset();
  static const int kCtimeLogHeadOffsetFieldNumber = 6;
  ::google::protobuf::uint32 ctime_log_head_offset() const;
  void set_ctime_log_head_offset(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:RAMCloud.ProtoBuf.Table.Tablet)
 private:
  inline void set_has_start_key_hash();
  inline void clear_has_start_key_hash();
  inline void set_has_end_key_hash();
  inline void clear_has_end_key_hash();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_ctime_log_head_id();
  inline void clear_has_ctime_log_head_id();
  inline void set_has_ctime_log_head_offset();
  inline void clear_has_ctime_log_head_offset();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 start_key_hash_;
  ::google::protobuf::uint64 end_key_hash_;
  ::google::protobuf::uint64 server_id_;
  int state_;
  ::google::protobuf::uint32 ctime_log_head_offset_;
  ::google::protobuf::uint64 ctime_log_head_id_;
  friend void  protobuf_AddDesc_Table_2eproto();
  friend void protobuf_AssignDesc_Table_2eproto();
  friend void protobuf_ShutdownFile_Table_2eproto();

  void InitAsDefaultInstance();
  static Table_Tablet* default_instance_;
};
// -------------------------------------------------------------------

class Table_Split : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RAMCloud.ProtoBuf.Table.Split) */ {
 public:
  Table_Split();
  virtual ~Table_Split();

  Table_Split(const Table_Split& from);

  inline Table_Split& operator=(const Table_Split& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Table_Split& default_instance();

  void Swap(Table_Split* other);

  // implements Message ----------------------------------------------

  inline Table_Split* New() const { return New(NULL); }

  Table_Split* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Table_Split& from);
  void MergeFrom(const Table_Split& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Table_Split* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 server_id = 1;
  bool has_server_id() const;
  void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  ::google::protobuf::uint64 server_id() const;
  void set_server_id(::google::protobuf::uint64 value);

  // required uint64 split_key_hash = 2;
  bool has_split_key_hash() const;
  void clear_split_key_hash();
  static const int kSplitKeyHashFieldNumber = 2;
  ::google::protobuf::uint64 split_key_hash() const;
  void set_split_key_hash(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:RAMCloud.ProtoBuf.Table.Split)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_split_key_hash();
  inline void clear_has_split_key_hash();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 server_id_;
  ::google::protobuf::uint64 split_key_hash_;
  friend void  protobuf_AddDesc_Table_2eproto();
  friend void protobuf_AssignDesc_Table_2eproto();
  friend void protobuf_ShutdownFile_Table_2eproto();

  void InitAsDefaultInstance();
  static Table_Split* default_instance_;
};
// -------------------------------------------------------------------

class Table_Reassign : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RAMCloud.ProtoBuf.Table.Reassign) */ {
 public:
  Table_Reassign();
  virtual ~Table_Reassign();

  Table_Reassign(const Table_Reassign& from);

  inline Table_Reassign& operator=(const Table_Reassign& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Table_Reassign& default_instance();

  void Swap(Table_Reassign* other);

  // implements Message ----------------------------------------------

  inline Table_Reassign* New() const { return New(NULL); }

  Table_Reassign* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Table_Reassign& from);
  void MergeFrom(const Table_Reassign& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Table_Reassign* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 server_id = 1;
  bool has_server_id() const;
  void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  ::google::protobuf::uint64 server_id() const;
  void set_server_id(::google::protobuf::uint64 value);

  // required uint64 start_key_hash = 2;
  bool has_start_key_hash() const;
  void clear_start_key_hash();
  static const int kStartKeyHashFieldNumber = 2;
  ::google::protobuf::uint64 start_key_hash() const;
  void set_start_key_hash(::google::protobuf::uint64 value);

  // required uint64 end_key_hash = 3;
  bool has_end_key_hash() const;
  void clear_end_key_hash();
  static const int kEndKeyHashFieldNumber = 3;
  ::google::protobuf::uint64 end_key_hash() const;
  void set_end_key_hash(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:RAMCloud.ProtoBuf.Table.Reassign)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_start_key_hash();
  inline void clear_has_start_key_hash();
  inline void set_has_end_key_hash();
  inline void clear_has_end_key_hash();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 server_id_;
  ::google::protobuf::uint64 start_key_hash_;
  ::google::protobuf::uint64 end_key_hash_;
  friend void  protobuf_AddDesc_Table_2eproto();
  friend void protobuf_AssignDesc_Table_2eproto();
  friend void protobuf_ShutdownFile_Table_2eproto();

  void InitAsDefaultInstance();
  static Table_Reassign* default_instance_;
};
// -------------------------------------------------------------------

class Table_Index_Indexlet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RAMCloud.ProtoBuf.Table.Index.Indexlet) */ {
 public:
  Table_Index_Indexlet();
  virtual ~Table_Index_Indexlet();

  Table_Index_Indexlet(const Table_Index_Indexlet& from);

  inline Table_Index_Indexlet& operator=(const Table_Index_Indexlet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Table_Index_Indexlet& default_instance();

  void Swap(Table_Index_Indexlet* other);

  // implements Message ----------------------------------------------

  inline Table_Index_Indexlet* New() const { return New(NULL); }

  Table_Index_Indexlet* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Table_Index_Indexlet& from);
  void MergeFrom(const Table_Index_Indexlet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Table_Index_Indexlet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string first_key = 1;
  bool has_first_key() const;
  void clear_first_key();
  static const int kFirstKeyFieldNumber = 1;
  const ::std::string& first_key() const;
  void set_first_key(const ::std::string& value);
  void set_first_key(const char* value);
  void set_first_key(const char* value, size_t size);
  ::std::string* mutable_first_key();
  ::std::string* release_first_key();
  void set_allocated_first_key(::std::string* first_key);

  // required string first_not_owned_key = 2;
  bool has_first_not_owned_key() const;
  void clear_first_not_owned_key();
  static const int kFirstNotOwnedKeyFieldNumber = 2;
  const ::std::string& first_not_owned_key() const;
  void set_first_not_owned_key(const ::std::string& value);
  void set_first_not_owned_key(const char* value);
  void set_first_not_owned_key(const char* value, size_t size);
  ::std::string* mutable_first_not_owned_key();
  ::std::string* release_first_not_owned_key();
  void set_allocated_first_not_owned_key(::std::string* first_not_owned_key);

  // required uint64 backing_table_id = 3;
  bool has_backing_table_id() const;
  void clear_backing_table_id();
  static const int kBackingTableIdFieldNumber = 3;
  ::google::protobuf::uint64 backing_table_id() const;
  void set_backing_table_id(::google::protobuf::uint64 value);

  // required fixed64 server_id = 4;
  bool has_server_id() const;
  void clear_server_id();
  static const int kServerIdFieldNumber = 4;
  ::google::protobuf::uint64 server_id() const;
  void set_server_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:RAMCloud.ProtoBuf.Table.Index.Indexlet)
 private:
  inline void set_has_first_key();
  inline void clear_has_first_key();
  inline void set_has_first_not_owned_key();
  inline void clear_has_first_not_owned_key();
  inline void set_has_backing_table_id();
  inline void clear_has_backing_table_id();
  inline void set_has_server_id();
  inline void clear_has_server_id();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr first_key_;
  ::google::protobuf::internal::ArenaStringPtr first_not_owned_key_;
  ::google::protobuf::uint64 backing_table_id_;
  ::google::protobuf::uint64 server_id_;
  friend void  protobuf_AddDesc_Table_2eproto();
  friend void protobuf_AssignDesc_Table_2eproto();
  friend void protobuf_ShutdownFile_Table_2eproto();

  void InitAsDefaultInstance();
  static Table_Index_Indexlet* default_instance_;
};
// -------------------------------------------------------------------

class Table_Index : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RAMCloud.ProtoBuf.Table.Index) */ {
 public:
  Table_Index();
  virtual ~Table_Index();

  Table_Index(const Table_Index& from);

  inline Table_Index& operator=(const Table_Index& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Table_Index& default_instance();

  void Swap(Table_Index* other);

  // implements Message ----------------------------------------------

  inline Table_Index* New() const { return New(NULL); }

  Table_Index* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Table_Index& from);
  void MergeFrom(const Table_Index& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Table_Index* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Table_Index_Indexlet Indexlet;

  // accessors -------------------------------------------------------

  // required uint32 index_id = 1;
  bool has_index_id() const;
  void clear_index_id();
  static const int kIndexIdFieldNumber = 1;
  ::google::protobuf::uint32 index_id() const;
  void set_index_id(::google::protobuf::uint32 value);

  // repeated .RAMCloud.ProtoBuf.Table.Index.Indexlet indexlet = 2;
  int indexlet_size() const;
  void clear_indexlet();
  static const int kIndexletFieldNumber = 2;
  const ::RAMCloud::ProtoBuf::Table_Index_Indexlet& indexlet(int index) const;
  ::RAMCloud::ProtoBuf::Table_Index_Indexlet* mutable_indexlet(int index);
  ::RAMCloud::ProtoBuf::Table_Index_Indexlet* add_indexlet();
  ::google::protobuf::RepeatedPtrField< ::RAMCloud::ProtoBuf::Table_Index_Indexlet >*
      mutable_indexlet();
  const ::google::protobuf::RepeatedPtrField< ::RAMCloud::ProtoBuf::Table_Index_Indexlet >&
      indexlet() const;

  // @@protoc_insertion_point(class_scope:RAMCloud.ProtoBuf.Table.Index)
 private:
  inline void set_has_index_id();
  inline void clear_has_index_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::RAMCloud::ProtoBuf::Table_Index_Indexlet > indexlet_;
  ::google::protobuf::uint32 index_id_;
  friend void  protobuf_AddDesc_Table_2eproto();
  friend void protobuf_AssignDesc_Table_2eproto();
  friend void protobuf_ShutdownFile_Table_2eproto();

  void InitAsDefaultInstance();
  static Table_Index* default_instance_;
};
// -------------------------------------------------------------------

class Table_ReassignIndexlet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RAMCloud.ProtoBuf.Table.ReassignIndexlet) */ {
 public:
  Table_ReassignIndexlet();
  virtual ~Table_ReassignIndexlet();

  Table_ReassignIndexlet(const Table_ReassignIndexlet& from);

  inline Table_ReassignIndexlet& operator=(const Table_ReassignIndexlet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Table_ReassignIndexlet& default_instance();

  void Swap(Table_ReassignIndexlet* other);

  // implements Message ----------------------------------------------

  inline Table_ReassignIndexlet* New() const { return New(NULL); }

  Table_ReassignIndexlet* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Table_ReassignIndexlet& from);
  void MergeFrom(const Table_ReassignIndexlet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Table_ReassignIndexlet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 server_id = 1;
  bool has_server_id() const;
  void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  ::google::protobuf::uint64 server_id() const;
  void set_server_id(::google::protobuf::uint64 value);

  // required uint32 index_id = 2;
  bool has_index_id() const;
  void clear_index_id();
  static const int kIndexIdFieldNumber = 2;
  ::google::protobuf::uint32 index_id() const;
  void set_index_id(::google::protobuf::uint32 value);

  // required bytes first_key = 3;
  bool has_first_key() const;
  void clear_first_key();
  static const int kFirstKeyFieldNumber = 3;
  const ::std::string& first_key() const;
  void set_first_key(const ::std::string& value);
  void set_first_key(const char* value);
  void set_first_key(const void* value, size_t size);
  ::std::string* mutable_first_key();
  ::std::string* release_first_key();
  void set_allocated_first_key(::std::string* first_key);

  // required bytes first_not_owned_key = 4;
  bool has_first_not_owned_key() const;
  void clear_first_not_owned_key();
  static const int kFirstNotOwnedKeyFieldNumber = 4;
  const ::std::string& first_not_owned_key() const;
  void set_first_not_owned_key(const ::std::string& value);
  void set_first_not_owned_key(const char* value);
  void set_first_not_owned_key(const void* value, size_t size);
  ::std::string* mutable_first_not_owned_key();
  ::std::string* release_first_not_owned_key();
  void set_allocated_first_not_owned_key(::std::string* first_not_owned_key);

  // required uint64 backing_table_id = 5;
  bool has_backing_table_id() const;
  void clear_backing_table_id();
  static const int kBackingTableIdFieldNumber = 5;
  ::google::protobuf::uint64 backing_table_id() const;
  void set_backing_table_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:RAMCloud.ProtoBuf.Table.ReassignIndexlet)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_index_id();
  inline void clear_has_index_id();
  inline void set_has_first_key();
  inline void clear_has_first_key();
  inline void set_has_first_not_owned_key();
  inline void clear_has_first_not_owned_key();
  inline void set_has_backing_table_id();
  inline void clear_has_backing_table_id();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 server_id_;
  ::google::protobuf::internal::ArenaStringPtr first_key_;
  ::google::protobuf::internal::ArenaStringPtr first_not_owned_key_;
  ::google::protobuf::uint64 backing_table_id_;
  ::google::protobuf::uint32 index_id_;
  friend void  protobuf_AddDesc_Table_2eproto();
  friend void protobuf_AssignDesc_Table_2eproto();
  friend void protobuf_ShutdownFile_Table_2eproto();

  void InitAsDefaultInstance();
  static Table_ReassignIndexlet* default_instance_;
};
// -------------------------------------------------------------------

class Table : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RAMCloud.ProtoBuf.Table) */ {
 public:
  Table();
  virtual ~Table();

  Table(const Table& from);

  inline Table& operator=(const Table& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Table& default_instance();

  void Swap(Table* other);

  // implements Message ----------------------------------------------

  inline Table* New() const { return New(NULL); }

  Table* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Table& from);
  void MergeFrom(const Table& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Table* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Table_Tablet Tablet;
  typedef Table_Split Split;
  typedef Table_Reassign Reassign;
  typedef Table_Index Index;
  typedef Table_ReassignIndexlet ReassignIndexlet;

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required uint64 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // repeated .RAMCloud.ProtoBuf.Table.Tablet tablet = 3;
  int tablet_size() const;
  void clear_tablet();
  static const int kTabletFieldNumber = 3;
  const ::RAMCloud::ProtoBuf::Table_Tablet& tablet(int index) const;
  ::RAMCloud::ProtoBuf::Table_Tablet* mutable_tablet(int index);
  ::RAMCloud::ProtoBuf::Table_Tablet* add_tablet();
  ::google::protobuf::RepeatedPtrField< ::RAMCloud::ProtoBuf::Table_Tablet >*
      mutable_tablet();
  const ::google::protobuf::RepeatedPtrField< ::RAMCloud::ProtoBuf::Table_Tablet >&
      tablet() const;

  // required uint64 sequence_number = 4;
  bool has_sequence_number() const;
  void clear_sequence_number();
  static const int kSequenceNumberFieldNumber = 4;
  ::google::protobuf::uint64 sequence_number() const;
  void set_sequence_number(::google::protobuf::uint64 value);

  // optional bool created = 5;
  bool has_created() const;
  void clear_created();
  static const int kCreatedFieldNumber = 5;
  bool created() const;
  void set_created(bool value);

  // optional bool deleted = 6;
  bool has_deleted() const;
  void clear_deleted();
  static const int kDeletedFieldNumber = 6;
  bool deleted() const;
  void set_deleted(bool value);

  // optional .RAMCloud.ProtoBuf.Table.Split split = 7;
  bool has_split() const;
  void clear_split();
  static const int kSplitFieldNumber = 7;
  const ::RAMCloud::ProtoBuf::Table_Split& split() const;
  ::RAMCloud::ProtoBuf::Table_Split* mutable_split();
  ::RAMCloud::ProtoBuf::Table_Split* release_split();
  void set_allocated_split(::RAMCloud::ProtoBuf::Table_Split* split);

  // optional .RAMCloud.ProtoBuf.Table.Reassign reassign = 8;
  bool has_reassign() const;
  void clear_reassign();
  static const int kReassignFieldNumber = 8;
  const ::RAMCloud::ProtoBuf::Table_Reassign& reassign() const;
  ::RAMCloud::ProtoBuf::Table_Reassign* mutable_reassign();
  ::RAMCloud::ProtoBuf::Table_Reassign* release_reassign();
  void set_allocated_reassign(::RAMCloud::ProtoBuf::Table_Reassign* reassign);

  // repeated .RAMCloud.ProtoBuf.Table.Index index = 9;
  int index_size() const;
  void clear_index();
  static const int kIndexFieldNumber = 9;
  const ::RAMCloud::ProtoBuf::Table_Index& index(int index) const;
  ::RAMCloud::ProtoBuf::Table_Index* mutable_index(int index);
  ::RAMCloud::ProtoBuf::Table_Index* add_index();
  ::google::protobuf::RepeatedPtrField< ::RAMCloud::ProtoBuf::Table_Index >*
      mutable_index();
  const ::google::protobuf::RepeatedPtrField< ::RAMCloud::ProtoBuf::Table_Index >&
      index() const;

  // optional .RAMCloud.ProtoBuf.Table.ReassignIndexlet reassign_indexlet = 10;
  bool has_reassign_indexlet() const;
  void clear_reassign_indexlet();
  static const int kReassignIndexletFieldNumber = 10;
  const ::RAMCloud::ProtoBuf::Table_ReassignIndexlet& reassign_indexlet() const;
  ::RAMCloud::ProtoBuf::Table_ReassignIndexlet* mutable_reassign_indexlet();
  ::RAMCloud::ProtoBuf::Table_ReassignIndexlet* release_reassign_indexlet();
  void set_allocated_reassign_indexlet(::RAMCloud::ProtoBuf::Table_ReassignIndexlet* reassign_indexlet);

  // @@protoc_insertion_point(class_scope:RAMCloud.ProtoBuf.Table)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_sequence_number();
  inline void clear_has_sequence_number();
  inline void set_has_created();
  inline void clear_has_created();
  inline void set_has_deleted();
  inline void clear_has_deleted();
  inline void set_has_split();
  inline void clear_has_split();
  inline void set_has_reassign();
  inline void clear_has_reassign();
  inline void set_has_reassign_indexlet();
  inline void clear_has_reassign_indexlet();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::RepeatedPtrField< ::RAMCloud::ProtoBuf::Table_Tablet > tablet_;
  ::google::protobuf::uint64 sequence_number_;
  ::RAMCloud::ProtoBuf::Table_Split* split_;
  ::RAMCloud::ProtoBuf::Table_Reassign* reassign_;
  ::google::protobuf::RepeatedPtrField< ::RAMCloud::ProtoBuf::Table_Index > index_;
  ::RAMCloud::ProtoBuf::Table_ReassignIndexlet* reassign_indexlet_;
  bool created_;
  bool deleted_;
  friend void  protobuf_AddDesc_Table_2eproto();
  friend void protobuf_AssignDesc_Table_2eproto();
  friend void protobuf_ShutdownFile_Table_2eproto();

  void InitAsDefaultInstance();
  static Table* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Table_Tablet

// required uint64 start_key_hash = 1;
inline bool Table_Tablet::has_start_key_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Table_Tablet::set_has_start_key_hash() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Table_Tablet::clear_has_start_key_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Table_Tablet::clear_start_key_hash() {
  start_key_hash_ = GOOGLE_ULONGLONG(0);
  clear_has_start_key_hash();
}
inline ::google::protobuf::uint64 Table_Tablet::start_key_hash() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Table.Tablet.start_key_hash)
  return start_key_hash_;
}
inline void Table_Tablet::set_start_key_hash(::google::protobuf::uint64 value) {
  set_has_start_key_hash();
  start_key_hash_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Table.Tablet.start_key_hash)
}

// required uint64 end_key_hash = 2;
inline bool Table_Tablet::has_end_key_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Table_Tablet::set_has_end_key_hash() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Table_Tablet::clear_has_end_key_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Table_Tablet::clear_end_key_hash() {
  end_key_hash_ = GOOGLE_ULONGLONG(0);
  clear_has_end_key_hash();
}
inline ::google::protobuf::uint64 Table_Tablet::end_key_hash() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Table.Tablet.end_key_hash)
  return end_key_hash_;
}
inline void Table_Tablet::set_end_key_hash(::google::protobuf::uint64 value) {
  set_has_end_key_hash();
  end_key_hash_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Table.Tablet.end_key_hash)
}

// required .RAMCloud.ProtoBuf.Table.Tablet.State state = 3;
inline bool Table_Tablet::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Table_Tablet::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Table_Tablet::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Table_Tablet::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::RAMCloud::ProtoBuf::Table_Tablet_State Table_Tablet::state() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Table.Tablet.state)
  return static_cast< ::RAMCloud::ProtoBuf::Table_Tablet_State >(state_);
}
inline void Table_Tablet::set_state(::RAMCloud::ProtoBuf::Table_Tablet_State value) {
  assert(::RAMCloud::ProtoBuf::Table_Tablet_State_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Table.Tablet.state)
}

// required fixed64 server_id = 4;
inline bool Table_Tablet::has_server_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Table_Tablet::set_has_server_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Table_Tablet::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Table_Tablet::clear_server_id() {
  server_id_ = GOOGLE_ULONGLONG(0);
  clear_has_server_id();
}
inline ::google::protobuf::uint64 Table_Tablet::server_id() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Table.Tablet.server_id)
  return server_id_;
}
inline void Table_Tablet::set_server_id(::google::protobuf::uint64 value) {
  set_has_server_id();
  server_id_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Table.Tablet.server_id)
}

// required uint64 ctime_log_head_id = 5;
inline bool Table_Tablet::has_ctime_log_head_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Table_Tablet::set_has_ctime_log_head_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Table_Tablet::clear_has_ctime_log_head_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Table_Tablet::clear_ctime_log_head_id() {
  ctime_log_head_id_ = GOOGLE_ULONGLONG(0);
  clear_has_ctime_log_head_id();
}
inline ::google::protobuf::uint64 Table_Tablet::ctime_log_head_id() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Table.Tablet.ctime_log_head_id)
  return ctime_log_head_id_;
}
inline void Table_Tablet::set_ctime_log_head_id(::google::protobuf::uint64 value) {
  set_has_ctime_log_head_id();
  ctime_log_head_id_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Table.Tablet.ctime_log_head_id)
}

// required uint32 ctime_log_head_offset = 6;
inline bool Table_Tablet::has_ctime_log_head_offset() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Table_Tablet::set_has_ctime_log_head_offset() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Table_Tablet::clear_has_ctime_log_head_offset() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Table_Tablet::clear_ctime_log_head_offset() {
  ctime_log_head_offset_ = 0u;
  clear_has_ctime_log_head_offset();
}
inline ::google::protobuf::uint32 Table_Tablet::ctime_log_head_offset() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Table.Tablet.ctime_log_head_offset)
  return ctime_log_head_offset_;
}
inline void Table_Tablet::set_ctime_log_head_offset(::google::protobuf::uint32 value) {
  set_has_ctime_log_head_offset();
  ctime_log_head_offset_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Table.Tablet.ctime_log_head_offset)
}

// -------------------------------------------------------------------

// Table_Split

// required fixed64 server_id = 1;
inline bool Table_Split::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Table_Split::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Table_Split::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Table_Split::clear_server_id() {
  server_id_ = GOOGLE_ULONGLONG(0);
  clear_has_server_id();
}
inline ::google::protobuf::uint64 Table_Split::server_id() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Table.Split.server_id)
  return server_id_;
}
inline void Table_Split::set_server_id(::google::protobuf::uint64 value) {
  set_has_server_id();
  server_id_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Table.Split.server_id)
}

// required uint64 split_key_hash = 2;
inline bool Table_Split::has_split_key_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Table_Split::set_has_split_key_hash() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Table_Split::clear_has_split_key_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Table_Split::clear_split_key_hash() {
  split_key_hash_ = GOOGLE_ULONGLONG(0);
  clear_has_split_key_hash();
}
inline ::google::protobuf::uint64 Table_Split::split_key_hash() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Table.Split.split_key_hash)
  return split_key_hash_;
}
inline void Table_Split::set_split_key_hash(::google::protobuf::uint64 value) {
  set_has_split_key_hash();
  split_key_hash_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Table.Split.split_key_hash)
}

// -------------------------------------------------------------------

// Table_Reassign

// required fixed64 server_id = 1;
inline bool Table_Reassign::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Table_Reassign::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Table_Reassign::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Table_Reassign::clear_server_id() {
  server_id_ = GOOGLE_ULONGLONG(0);
  clear_has_server_id();
}
inline ::google::protobuf::uint64 Table_Reassign::server_id() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Table.Reassign.server_id)
  return server_id_;
}
inline void Table_Reassign::set_server_id(::google::protobuf::uint64 value) {
  set_has_server_id();
  server_id_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Table.Reassign.server_id)
}

// required uint64 start_key_hash = 2;
inline bool Table_Reassign::has_start_key_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Table_Reassign::set_has_start_key_hash() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Table_Reassign::clear_has_start_key_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Table_Reassign::clear_start_key_hash() {
  start_key_hash_ = GOOGLE_ULONGLONG(0);
  clear_has_start_key_hash();
}
inline ::google::protobuf::uint64 Table_Reassign::start_key_hash() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Table.Reassign.start_key_hash)
  return start_key_hash_;
}
inline void Table_Reassign::set_start_key_hash(::google::protobuf::uint64 value) {
  set_has_start_key_hash();
  start_key_hash_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Table.Reassign.start_key_hash)
}

// required uint64 end_key_hash = 3;
inline bool Table_Reassign::has_end_key_hash() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Table_Reassign::set_has_end_key_hash() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Table_Reassign::clear_has_end_key_hash() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Table_Reassign::clear_end_key_hash() {
  end_key_hash_ = GOOGLE_ULONGLONG(0);
  clear_has_end_key_hash();
}
inline ::google::protobuf::uint64 Table_Reassign::end_key_hash() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Table.Reassign.end_key_hash)
  return end_key_hash_;
}
inline void Table_Reassign::set_end_key_hash(::google::protobuf::uint64 value) {
  set_has_end_key_hash();
  end_key_hash_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Table.Reassign.end_key_hash)
}

// -------------------------------------------------------------------

// Table_Index_Indexlet

// required string first_key = 1;
inline bool Table_Index_Indexlet::has_first_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Table_Index_Indexlet::set_has_first_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Table_Index_Indexlet::clear_has_first_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Table_Index_Indexlet::clear_first_key() {
  first_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_first_key();
}
inline const ::std::string& Table_Index_Indexlet::first_key() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Table.Index.Indexlet.first_key)
  return first_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Table_Index_Indexlet::set_first_key(const ::std::string& value) {
  set_has_first_key();
  first_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Table.Index.Indexlet.first_key)
}
inline void Table_Index_Indexlet::set_first_key(const char* value) {
  set_has_first_key();
  first_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RAMCloud.ProtoBuf.Table.Index.Indexlet.first_key)
}
inline void Table_Index_Indexlet::set_first_key(const char* value, size_t size) {
  set_has_first_key();
  first_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RAMCloud.ProtoBuf.Table.Index.Indexlet.first_key)
}
inline ::std::string* Table_Index_Indexlet::mutable_first_key() {
  set_has_first_key();
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.Table.Index.Indexlet.first_key)
  return first_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Table_Index_Indexlet::release_first_key() {
  // @@protoc_insertion_point(field_release:RAMCloud.ProtoBuf.Table.Index.Indexlet.first_key)
  clear_has_first_key();
  return first_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Table_Index_Indexlet::set_allocated_first_key(::std::string* first_key) {
  if (first_key != NULL) {
    set_has_first_key();
  } else {
    clear_has_first_key();
  }
  first_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), first_key);
  // @@protoc_insertion_point(field_set_allocated:RAMCloud.ProtoBuf.Table.Index.Indexlet.first_key)
}

// required string first_not_owned_key = 2;
inline bool Table_Index_Indexlet::has_first_not_owned_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Table_Index_Indexlet::set_has_first_not_owned_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Table_Index_Indexlet::clear_has_first_not_owned_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Table_Index_Indexlet::clear_first_not_owned_key() {
  first_not_owned_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_first_not_owned_key();
}
inline const ::std::string& Table_Index_Indexlet::first_not_owned_key() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Table.Index.Indexlet.first_not_owned_key)
  return first_not_owned_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Table_Index_Indexlet::set_first_not_owned_key(const ::std::string& value) {
  set_has_first_not_owned_key();
  first_not_owned_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Table.Index.Indexlet.first_not_owned_key)
}
inline void Table_Index_Indexlet::set_first_not_owned_key(const char* value) {
  set_has_first_not_owned_key();
  first_not_owned_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RAMCloud.ProtoBuf.Table.Index.Indexlet.first_not_owned_key)
}
inline void Table_Index_Indexlet::set_first_not_owned_key(const char* value, size_t size) {
  set_has_first_not_owned_key();
  first_not_owned_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RAMCloud.ProtoBuf.Table.Index.Indexlet.first_not_owned_key)
}
inline ::std::string* Table_Index_Indexlet::mutable_first_not_owned_key() {
  set_has_first_not_owned_key();
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.Table.Index.Indexlet.first_not_owned_key)
  return first_not_owned_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Table_Index_Indexlet::release_first_not_owned_key() {
  // @@protoc_insertion_point(field_release:RAMCloud.ProtoBuf.Table.Index.Indexlet.first_not_owned_key)
  clear_has_first_not_owned_key();
  return first_not_owned_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Table_Index_Indexlet::set_allocated_first_not_owned_key(::std::string* first_not_owned_key) {
  if (first_not_owned_key != NULL) {
    set_has_first_not_owned_key();
  } else {
    clear_has_first_not_owned_key();
  }
  first_not_owned_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), first_not_owned_key);
  // @@protoc_insertion_point(field_set_allocated:RAMCloud.ProtoBuf.Table.Index.Indexlet.first_not_owned_key)
}

// required uint64 backing_table_id = 3;
inline bool Table_Index_Indexlet::has_backing_table_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Table_Index_Indexlet::set_has_backing_table_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Table_Index_Indexlet::clear_has_backing_table_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Table_Index_Indexlet::clear_backing_table_id() {
  backing_table_id_ = GOOGLE_ULONGLONG(0);
  clear_has_backing_table_id();
}
inline ::google::protobuf::uint64 Table_Index_Indexlet::backing_table_id() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Table.Index.Indexlet.backing_table_id)
  return backing_table_id_;
}
inline void Table_Index_Indexlet::set_backing_table_id(::google::protobuf::uint64 value) {
  set_has_backing_table_id();
  backing_table_id_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Table.Index.Indexlet.backing_table_id)
}

// required fixed64 server_id = 4;
inline bool Table_Index_Indexlet::has_server_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Table_Index_Indexlet::set_has_server_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Table_Index_Indexlet::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Table_Index_Indexlet::clear_server_id() {
  server_id_ = GOOGLE_ULONGLONG(0);
  clear_has_server_id();
}
inline ::google::protobuf::uint64 Table_Index_Indexlet::server_id() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Table.Index.Indexlet.server_id)
  return server_id_;
}
inline void Table_Index_Indexlet::set_server_id(::google::protobuf::uint64 value) {
  set_has_server_id();
  server_id_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Table.Index.Indexlet.server_id)
}

// -------------------------------------------------------------------

// Table_Index

// required uint32 index_id = 1;
inline bool Table_Index::has_index_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Table_Index::set_has_index_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Table_Index::clear_has_index_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Table_Index::clear_index_id() {
  index_id_ = 0u;
  clear_has_index_id();
}
inline ::google::protobuf::uint32 Table_Index::index_id() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Table.Index.index_id)
  return index_id_;
}
inline void Table_Index::set_index_id(::google::protobuf::uint32 value) {
  set_has_index_id();
  index_id_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Table.Index.index_id)
}

// repeated .RAMCloud.ProtoBuf.Table.Index.Indexlet indexlet = 2;
inline int Table_Index::indexlet_size() const {
  return indexlet_.size();
}
inline void Table_Index::clear_indexlet() {
  indexlet_.Clear();
}
inline const ::RAMCloud::ProtoBuf::Table_Index_Indexlet& Table_Index::indexlet(int index) const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Table.Index.indexlet)
  return indexlet_.Get(index);
}
inline ::RAMCloud::ProtoBuf::Table_Index_Indexlet* Table_Index::mutable_indexlet(int index) {
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.Table.Index.indexlet)
  return indexlet_.Mutable(index);
}
inline ::RAMCloud::ProtoBuf::Table_Index_Indexlet* Table_Index::add_indexlet() {
  // @@protoc_insertion_point(field_add:RAMCloud.ProtoBuf.Table.Index.indexlet)
  return indexlet_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::RAMCloud::ProtoBuf::Table_Index_Indexlet >*
Table_Index::mutable_indexlet() {
  // @@protoc_insertion_point(field_mutable_list:RAMCloud.ProtoBuf.Table.Index.indexlet)
  return &indexlet_;
}
inline const ::google::protobuf::RepeatedPtrField< ::RAMCloud::ProtoBuf::Table_Index_Indexlet >&
Table_Index::indexlet() const {
  // @@protoc_insertion_point(field_list:RAMCloud.ProtoBuf.Table.Index.indexlet)
  return indexlet_;
}

// -------------------------------------------------------------------

// Table_ReassignIndexlet

// required fixed64 server_id = 1;
inline bool Table_ReassignIndexlet::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Table_ReassignIndexlet::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Table_ReassignIndexlet::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Table_ReassignIndexlet::clear_server_id() {
  server_id_ = GOOGLE_ULONGLONG(0);
  clear_has_server_id();
}
inline ::google::protobuf::uint64 Table_ReassignIndexlet::server_id() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Table.ReassignIndexlet.server_id)
  return server_id_;
}
inline void Table_ReassignIndexlet::set_server_id(::google::protobuf::uint64 value) {
  set_has_server_id();
  server_id_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Table.ReassignIndexlet.server_id)
}

// required uint32 index_id = 2;
inline bool Table_ReassignIndexlet::has_index_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Table_ReassignIndexlet::set_has_index_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Table_ReassignIndexlet::clear_has_index_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Table_ReassignIndexlet::clear_index_id() {
  index_id_ = 0u;
  clear_has_index_id();
}
inline ::google::protobuf::uint32 Table_ReassignIndexlet::index_id() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Table.ReassignIndexlet.index_id)
  return index_id_;
}
inline void Table_ReassignIndexlet::set_index_id(::google::protobuf::uint32 value) {
  set_has_index_id();
  index_id_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Table.ReassignIndexlet.index_id)
}

// required bytes first_key = 3;
inline bool Table_ReassignIndexlet::has_first_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Table_ReassignIndexlet::set_has_first_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Table_ReassignIndexlet::clear_has_first_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Table_ReassignIndexlet::clear_first_key() {
  first_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_first_key();
}
inline const ::std::string& Table_ReassignIndexlet::first_key() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Table.ReassignIndexlet.first_key)
  return first_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Table_ReassignIndexlet::set_first_key(const ::std::string& value) {
  set_has_first_key();
  first_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Table.ReassignIndexlet.first_key)
}
inline void Table_ReassignIndexlet::set_first_key(const char* value) {
  set_has_first_key();
  first_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RAMCloud.ProtoBuf.Table.ReassignIndexlet.first_key)
}
inline void Table_ReassignIndexlet::set_first_key(const void* value, size_t size) {
  set_has_first_key();
  first_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RAMCloud.ProtoBuf.Table.ReassignIndexlet.first_key)
}
inline ::std::string* Table_ReassignIndexlet::mutable_first_key() {
  set_has_first_key();
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.Table.ReassignIndexlet.first_key)
  return first_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Table_ReassignIndexlet::release_first_key() {
  // @@protoc_insertion_point(field_release:RAMCloud.ProtoBuf.Table.ReassignIndexlet.first_key)
  clear_has_first_key();
  return first_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Table_ReassignIndexlet::set_allocated_first_key(::std::string* first_key) {
  if (first_key != NULL) {
    set_has_first_key();
  } else {
    clear_has_first_key();
  }
  first_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), first_key);
  // @@protoc_insertion_point(field_set_allocated:RAMCloud.ProtoBuf.Table.ReassignIndexlet.first_key)
}

// required bytes first_not_owned_key = 4;
inline bool Table_ReassignIndexlet::has_first_not_owned_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Table_ReassignIndexlet::set_has_first_not_owned_key() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Table_ReassignIndexlet::clear_has_first_not_owned_key() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Table_ReassignIndexlet::clear_first_not_owned_key() {
  first_not_owned_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_first_not_owned_key();
}
inline const ::std::string& Table_ReassignIndexlet::first_not_owned_key() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Table.ReassignIndexlet.first_not_owned_key)
  return first_not_owned_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Table_ReassignIndexlet::set_first_not_owned_key(const ::std::string& value) {
  set_has_first_not_owned_key();
  first_not_owned_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Table.ReassignIndexlet.first_not_owned_key)
}
inline void Table_ReassignIndexlet::set_first_not_owned_key(const char* value) {
  set_has_first_not_owned_key();
  first_not_owned_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RAMCloud.ProtoBuf.Table.ReassignIndexlet.first_not_owned_key)
}
inline void Table_ReassignIndexlet::set_first_not_owned_key(const void* value, size_t size) {
  set_has_first_not_owned_key();
  first_not_owned_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RAMCloud.ProtoBuf.Table.ReassignIndexlet.first_not_owned_key)
}
inline ::std::string* Table_ReassignIndexlet::mutable_first_not_owned_key() {
  set_has_first_not_owned_key();
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.Table.ReassignIndexlet.first_not_owned_key)
  return first_not_owned_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Table_ReassignIndexlet::release_first_not_owned_key() {
  // @@protoc_insertion_point(field_release:RAMCloud.ProtoBuf.Table.ReassignIndexlet.first_not_owned_key)
  clear_has_first_not_owned_key();
  return first_not_owned_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Table_ReassignIndexlet::set_allocated_first_not_owned_key(::std::string* first_not_owned_key) {
  if (first_not_owned_key != NULL) {
    set_has_first_not_owned_key();
  } else {
    clear_has_first_not_owned_key();
  }
  first_not_owned_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), first_not_owned_key);
  // @@protoc_insertion_point(field_set_allocated:RAMCloud.ProtoBuf.Table.ReassignIndexlet.first_not_owned_key)
}

// required uint64 backing_table_id = 5;
inline bool Table_ReassignIndexlet::has_backing_table_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Table_ReassignIndexlet::set_has_backing_table_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Table_ReassignIndexlet::clear_has_backing_table_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Table_ReassignIndexlet::clear_backing_table_id() {
  backing_table_id_ = GOOGLE_ULONGLONG(0);
  clear_has_backing_table_id();
}
inline ::google::protobuf::uint64 Table_ReassignIndexlet::backing_table_id() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Table.ReassignIndexlet.backing_table_id)
  return backing_table_id_;
}
inline void Table_ReassignIndexlet::set_backing_table_id(::google::protobuf::uint64 value) {
  set_has_backing_table_id();
  backing_table_id_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Table.ReassignIndexlet.backing_table_id)
}

// -------------------------------------------------------------------

// Table

// required string name = 1;
inline bool Table::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Table::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Table::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Table::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Table::name() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Table.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Table::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Table.name)
}
inline void Table::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RAMCloud.ProtoBuf.Table.name)
}
inline void Table::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RAMCloud.ProtoBuf.Table.name)
}
inline ::std::string* Table::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.Table.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Table::release_name() {
  // @@protoc_insertion_point(field_release:RAMCloud.ProtoBuf.Table.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Table::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:RAMCloud.ProtoBuf.Table.name)
}

// required uint64 id = 2;
inline bool Table::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Table::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Table::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Table::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 Table::id() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Table.id)
  return id_;
}
inline void Table::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Table.id)
}

// repeated .RAMCloud.ProtoBuf.Table.Tablet tablet = 3;
inline int Table::tablet_size() const {
  return tablet_.size();
}
inline void Table::clear_tablet() {
  tablet_.Clear();
}
inline const ::RAMCloud::ProtoBuf::Table_Tablet& Table::tablet(int index) const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Table.tablet)
  return tablet_.Get(index);
}
inline ::RAMCloud::ProtoBuf::Table_Tablet* Table::mutable_tablet(int index) {
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.Table.tablet)
  return tablet_.Mutable(index);
}
inline ::RAMCloud::ProtoBuf::Table_Tablet* Table::add_tablet() {
  // @@protoc_insertion_point(field_add:RAMCloud.ProtoBuf.Table.tablet)
  return tablet_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::RAMCloud::ProtoBuf::Table_Tablet >*
Table::mutable_tablet() {
  // @@protoc_insertion_point(field_mutable_list:RAMCloud.ProtoBuf.Table.tablet)
  return &tablet_;
}
inline const ::google::protobuf::RepeatedPtrField< ::RAMCloud::ProtoBuf::Table_Tablet >&
Table::tablet() const {
  // @@protoc_insertion_point(field_list:RAMCloud.ProtoBuf.Table.tablet)
  return tablet_;
}

// required uint64 sequence_number = 4;
inline bool Table::has_sequence_number() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Table::set_has_sequence_number() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Table::clear_has_sequence_number() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Table::clear_sequence_number() {
  sequence_number_ = GOOGLE_ULONGLONG(0);
  clear_has_sequence_number();
}
inline ::google::protobuf::uint64 Table::sequence_number() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Table.sequence_number)
  return sequence_number_;
}
inline void Table::set_sequence_number(::google::protobuf::uint64 value) {
  set_has_sequence_number();
  sequence_number_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Table.sequence_number)
}

// optional bool created = 5;
inline bool Table::has_created() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Table::set_has_created() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Table::clear_has_created() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Table::clear_created() {
  created_ = false;
  clear_has_created();
}
inline bool Table::created() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Table.created)
  return created_;
}
inline void Table::set_created(bool value) {
  set_has_created();
  created_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Table.created)
}

// optional bool deleted = 6;
inline bool Table::has_deleted() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Table::set_has_deleted() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Table::clear_has_deleted() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Table::clear_deleted() {
  deleted_ = false;
  clear_has_deleted();
}
inline bool Table::deleted() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Table.deleted)
  return deleted_;
}
inline void Table::set_deleted(bool value) {
  set_has_deleted();
  deleted_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Table.deleted)
}

// optional .RAMCloud.ProtoBuf.Table.Split split = 7;
inline bool Table::has_split() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Table::set_has_split() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Table::clear_has_split() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Table::clear_split() {
  if (split_ != NULL) split_->::RAMCloud::ProtoBuf::Table_Split::Clear();
  clear_has_split();
}
inline const ::RAMCloud::ProtoBuf::Table_Split& Table::split() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Table.split)
  return split_ != NULL ? *split_ : *default_instance_->split_;
}
inline ::RAMCloud::ProtoBuf::Table_Split* Table::mutable_split() {
  set_has_split();
  if (split_ == NULL) {
    split_ = new ::RAMCloud::ProtoBuf::Table_Split;
  }
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.Table.split)
  return split_;
}
inline ::RAMCloud::ProtoBuf::Table_Split* Table::release_split() {
  // @@protoc_insertion_point(field_release:RAMCloud.ProtoBuf.Table.split)
  clear_has_split();
  ::RAMCloud::ProtoBuf::Table_Split* temp = split_;
  split_ = NULL;
  return temp;
}
inline void Table::set_allocated_split(::RAMCloud::ProtoBuf::Table_Split* split) {
  delete split_;
  split_ = split;
  if (split) {
    set_has_split();
  } else {
    clear_has_split();
  }
  // @@protoc_insertion_point(field_set_allocated:RAMCloud.ProtoBuf.Table.split)
}

// optional .RAMCloud.ProtoBuf.Table.Reassign reassign = 8;
inline bool Table::has_reassign() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Table::set_has_reassign() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Table::clear_has_reassign() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Table::clear_reassign() {
  if (reassign_ != NULL) reassign_->::RAMCloud::ProtoBuf::Table_Reassign::Clear();
  clear_has_reassign();
}
inline const ::RAMCloud::ProtoBuf::Table_Reassign& Table::reassign() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Table.reassign)
  return reassign_ != NULL ? *reassign_ : *default_instance_->reassign_;
}
inline ::RAMCloud::ProtoBuf::Table_Reassign* Table::mutable_reassign() {
  set_has_reassign();
  if (reassign_ == NULL) {
    reassign_ = new ::RAMCloud::ProtoBuf::Table_Reassign;
  }
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.Table.reassign)
  return reassign_;
}
inline ::RAMCloud::ProtoBuf::Table_Reassign* Table::release_reassign() {
  // @@protoc_insertion_point(field_release:RAMCloud.ProtoBuf.Table.reassign)
  clear_has_reassign();
  ::RAMCloud::ProtoBuf::Table_Reassign* temp = reassign_;
  reassign_ = NULL;
  return temp;
}
inline void Table::set_allocated_reassign(::RAMCloud::ProtoBuf::Table_Reassign* reassign) {
  delete reassign_;
  reassign_ = reassign;
  if (reassign) {
    set_has_reassign();
  } else {
    clear_has_reassign();
  }
  // @@protoc_insertion_point(field_set_allocated:RAMCloud.ProtoBuf.Table.reassign)
}

// repeated .RAMCloud.ProtoBuf.Table.Index index = 9;
inline int Table::index_size() const {
  return index_.size();
}
inline void Table::clear_index() {
  index_.Clear();
}
inline const ::RAMCloud::ProtoBuf::Table_Index& Table::index(int index) const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Table.index)
  return index_.Get(index);
}
inline ::RAMCloud::ProtoBuf::Table_Index* Table::mutable_index(int index) {
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.Table.index)
  return index_.Mutable(index);
}
inline ::RAMCloud::ProtoBuf::Table_Index* Table::add_index() {
  // @@protoc_insertion_point(field_add:RAMCloud.ProtoBuf.Table.index)
  return index_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::RAMCloud::ProtoBuf::Table_Index >*
Table::mutable_index() {
  // @@protoc_insertion_point(field_mutable_list:RAMCloud.ProtoBuf.Table.index)
  return &index_;
}
inline const ::google::protobuf::RepeatedPtrField< ::RAMCloud::ProtoBuf::Table_Index >&
Table::index() const {
  // @@protoc_insertion_point(field_list:RAMCloud.ProtoBuf.Table.index)
  return index_;
}

// optional .RAMCloud.ProtoBuf.Table.ReassignIndexlet reassign_indexlet = 10;
inline bool Table::has_reassign_indexlet() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Table::set_has_reassign_indexlet() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Table::clear_has_reassign_indexlet() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Table::clear_reassign_indexlet() {
  if (reassign_indexlet_ != NULL) reassign_indexlet_->::RAMCloud::ProtoBuf::Table_ReassignIndexlet::Clear();
  clear_has_reassign_indexlet();
}
inline const ::RAMCloud::ProtoBuf::Table_ReassignIndexlet& Table::reassign_indexlet() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Table.reassign_indexlet)
  return reassign_indexlet_ != NULL ? *reassign_indexlet_ : *default_instance_->reassign_indexlet_;
}
inline ::RAMCloud::ProtoBuf::Table_ReassignIndexlet* Table::mutable_reassign_indexlet() {
  set_has_reassign_indexlet();
  if (reassign_indexlet_ == NULL) {
    reassign_indexlet_ = new ::RAMCloud::ProtoBuf::Table_ReassignIndexlet;
  }
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.Table.reassign_indexlet)
  return reassign_indexlet_;
}
inline ::RAMCloud::ProtoBuf::Table_ReassignIndexlet* Table::release_reassign_indexlet() {
  // @@protoc_insertion_point(field_release:RAMCloud.ProtoBuf.Table.reassign_indexlet)
  clear_has_reassign_indexlet();
  ::RAMCloud::ProtoBuf::Table_ReassignIndexlet* temp = reassign_indexlet_;
  reassign_indexlet_ = NULL;
  return temp;
}
inline void Table::set_allocated_reassign_indexlet(::RAMCloud::ProtoBuf::Table_ReassignIndexlet* reassign_indexlet) {
  delete reassign_indexlet_;
  reassign_indexlet_ = reassign_indexlet;
  if (reassign_indexlet) {
    set_has_reassign_indexlet();
  } else {
    clear_has_reassign_indexlet();
  }
  // @@protoc_insertion_point(field_set_allocated:RAMCloud.ProtoBuf.Table.reassign_indexlet)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoBuf
}  // namespace RAMCloud

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::RAMCloud::ProtoBuf::Table_Tablet_State> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RAMCloud::ProtoBuf::Table_Tablet_State>() {
  return ::RAMCloud::ProtoBuf::Table_Tablet_State_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Table_2eproto__INCLUDED
// RAMCloud pragma [GCCWARN=0]
