// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LogMetrics.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "LogMetrics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace RAMCloud {
namespace ProtoBuf {

namespace {

const ::google::protobuf::Descriptor* LogMetrics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogMetrics_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogMetrics_CleanerMetrics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogMetrics_CleanerMetrics_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogMetrics_CleanerMetrics_InMemoryMetrics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogMetrics_CleanerMetrics_InMemoryMetrics_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogMetrics_CleanerMetrics_OnDiskMetrics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogMetrics_CleanerMetrics_OnDiskMetrics_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogMetrics_CleanerMetrics_ThreadMetrics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogMetrics_CleanerMetrics_ThreadMetrics_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogMetrics_SegletMetrics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogMetrics_SegletMetrics_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogMetrics_SegmentMetrics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogMetrics_SegmentMetrics_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_LogMetrics_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_LogMetrics_2eproto() {
  protobuf_AddDesc_LogMetrics_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "LogMetrics.proto");
  GOOGLE_CHECK(file != NULL);
  LogMetrics_descriptor_ = file->message_type(0);
  static const int LogMetrics_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics, ticks_per_second_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics, total_sync_calls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics, total_sync_ticks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics, total_append_calls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics, total_append_ticks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics, total_no_space_ticks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics, total_bytes_appended_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics, total_metadata_bytes_appended_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics, cleaner_metrics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics, seglet_metrics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics, segment_metrics_),
  };
  LogMetrics_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LogMetrics_descriptor_,
      LogMetrics::default_instance_,
      LogMetrics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics, _has_bits_[0]),
      -1,
      -1,
      sizeof(LogMetrics),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics, _internal_metadata_),
      -1);
  LogMetrics_CleanerMetrics_descriptor_ = LogMetrics_descriptor_->nested_type(0);
  static const int LogMetrics_CleanerMetrics_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics, poll_usec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics, max_cleanable_memory_utilization_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics, live_segments_per_disk_pass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics, survivor_segments_to_reserve_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics, min_memory_utilization_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics, min_disk_utilization_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics, do_work_ticks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics, do_work_sleep_ticks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics, in_memory_metrics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics, on_disk_metrics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics, thread_metrics_),
  };
  LogMetrics_CleanerMetrics_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LogMetrics_CleanerMetrics_descriptor_,
      LogMetrics_CleanerMetrics::default_instance_,
      LogMetrics_CleanerMetrics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics, _has_bits_[0]),
      -1,
      -1,
      sizeof(LogMetrics_CleanerMetrics),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics, _internal_metadata_),
      -1);
  LogMetrics_CleanerMetrics_InMemoryMetrics_descriptor_ = LogMetrics_CleanerMetrics_descriptor_->nested_type(0);
  static const int LogMetrics_CleanerMetrics_InMemoryMetrics_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics_InMemoryMetrics, total_relocation_callbacks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics_InMemoryMetrics, total_relocation_appends_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics_InMemoryMetrics, total_bytes_freed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics_InMemoryMetrics, total_bytes_in_compacted_segments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics_InMemoryMetrics, total_bytes_appended_to_survivors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics_InMemoryMetrics, total_segments_compacted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics_InMemoryMetrics, total_empty_segments_compacted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics_InMemoryMetrics, total_entries_scanned_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics_InMemoryMetrics, total_live_entries_scanned_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics_InMemoryMetrics, total_scanned_entry_lengths_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics_InMemoryMetrics, total_live_scanned_entry_lengths_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics_InMemoryMetrics, total_ticks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics_InMemoryMetrics, get_segment_to_compact_ticks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics_InMemoryMetrics, wait_for_free_survivor_ticks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics_InMemoryMetrics, relocation_callback_ticks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics_InMemoryMetrics, relocation_append_ticks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics_InMemoryMetrics, compaction_complete_ticks_),
  };
  LogMetrics_CleanerMetrics_InMemoryMetrics_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LogMetrics_CleanerMetrics_InMemoryMetrics_descriptor_,
      LogMetrics_CleanerMetrics_InMemoryMetrics::default_instance_,
      LogMetrics_CleanerMetrics_InMemoryMetrics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics_InMemoryMetrics, _has_bits_[0]),
      -1,
      -1,
      sizeof(LogMetrics_CleanerMetrics_InMemoryMetrics),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics_InMemoryMetrics, _internal_metadata_),
      -1);
  LogMetrics_CleanerMetrics_OnDiskMetrics_descriptor_ = LogMetrics_CleanerMetrics_descriptor_->nested_type(1);
  static const int LogMetrics_CleanerMetrics_OnDiskMetrics_offsets_[32] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics_OnDiskMetrics, total_bytes_appended_to_survivors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics_OnDiskMetrics, total_memory_bytes_freed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics_OnDiskMetrics, total_disk_bytes_freed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics_OnDiskMetrics, total_memory_bytes_in_cleaned_segments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics_OnDiskMetrics, total_disk_bytes_in_cleaned_segments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics_OnDiskMetrics, total_relocation_callbacks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics_OnDiskMetrics, total_relocation_appends_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics_OnDiskMetrics, total_segments_cleaned_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics_OnDiskMetrics, total_empty_segments_cleaned_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics_OnDiskMetrics, total_survivors_created_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics_OnDiskMetrics, total_runs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics_OnDiskMetrics, total_low_disk_space_runs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics_OnDiskMetrics, memory_utilization_at_start_sum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics_OnDiskMetrics, total_entries_scanned_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics_OnDiskMetrics, total_live_entries_scanned_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics_OnDiskMetrics, total_scanned_entry_lengths_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics_OnDiskMetrics, total_live_scanned_entry_lengths_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics_OnDiskMetrics, total_ticks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics_OnDiskMetrics, get_segments_to_clean_ticks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics_OnDiskMetrics, cost_benefit_sort_ticks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics_OnDiskMetrics, get_sorted_entries_ticks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics_OnDiskMetrics, timestamp_sort_ticks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics_OnDiskMetrics, relocate_live_entries_ticks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics_OnDiskMetrics, wait_for_free_survivors_ticks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics_OnDiskMetrics, cleaning_complete_ticks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics_OnDiskMetrics, relocation_callback_ticks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics_OnDiskMetrics, relocation_append_ticks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics_OnDiskMetrics, close_survivor_ticks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics_OnDiskMetrics, survivor_sync_ticks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics_OnDiskMetrics, cleaned_segment_memory_histogram_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics_OnDiskMetrics, cleaned_segment_disk_histogram_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics_OnDiskMetrics, all_segments_disk_histogram_),
  };
  LogMetrics_CleanerMetrics_OnDiskMetrics_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LogMetrics_CleanerMetrics_OnDiskMetrics_descriptor_,
      LogMetrics_CleanerMetrics_OnDiskMetrics::default_instance_,
      LogMetrics_CleanerMetrics_OnDiskMetrics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics_OnDiskMetrics, _has_bits_[0]),
      -1,
      -1,
      sizeof(LogMetrics_CleanerMetrics_OnDiskMetrics),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics_OnDiskMetrics, _internal_metadata_),
      -1);
  LogMetrics_CleanerMetrics_ThreadMetrics_descriptor_ = LogMetrics_CleanerMetrics_descriptor_->nested_type(2);
  static const int LogMetrics_CleanerMetrics_ThreadMetrics_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics_ThreadMetrics, active_ticks_),
  };
  LogMetrics_CleanerMetrics_ThreadMetrics_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LogMetrics_CleanerMetrics_ThreadMetrics_descriptor_,
      LogMetrics_CleanerMetrics_ThreadMetrics::default_instance_,
      LogMetrics_CleanerMetrics_ThreadMetrics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics_ThreadMetrics, _has_bits_[0]),
      -1,
      -1,
      sizeof(LogMetrics_CleanerMetrics_ThreadMetrics),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_CleanerMetrics_ThreadMetrics, _internal_metadata_),
      -1);
  LogMetrics_SegletMetrics_descriptor_ = LogMetrics_descriptor_->nested_type(1);
  static const int LogMetrics_SegletMetrics_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_SegletMetrics, total_seglets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_SegletMetrics, total_usable_seglets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_SegletMetrics, emergency_head_pool_reserve_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_SegletMetrics, emergency_head_pool_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_SegletMetrics, cleaner_pool_reserve_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_SegletMetrics, cleaner_pool_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_SegletMetrics, default_pool_count_),
  };
  LogMetrics_SegletMetrics_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LogMetrics_SegletMetrics_descriptor_,
      LogMetrics_SegletMetrics::default_instance_,
      LogMetrics_SegletMetrics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_SegletMetrics, _has_bits_[0]),
      -1,
      -1,
      sizeof(LogMetrics_SegletMetrics),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_SegletMetrics, _internal_metadata_),
      -1);
  LogMetrics_SegmentMetrics_descriptor_ = LogMetrics_descriptor_->nested_type(2);
  static const int LogMetrics_SegmentMetrics_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_SegmentMetrics, segments_on_disk_histogram_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_SegmentMetrics, current_segments_on_disk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_SegmentMetrics, total_entry_counts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_SegmentMetrics, total_entry_lengths_),
  };
  LogMetrics_SegmentMetrics_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LogMetrics_SegmentMetrics_descriptor_,
      LogMetrics_SegmentMetrics::default_instance_,
      LogMetrics_SegmentMetrics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_SegmentMetrics, _has_bits_[0]),
      -1,
      -1,
      sizeof(LogMetrics_SegmentMetrics),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetrics_SegmentMetrics, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_LogMetrics_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LogMetrics_descriptor_, &LogMetrics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LogMetrics_CleanerMetrics_descriptor_, &LogMetrics_CleanerMetrics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LogMetrics_CleanerMetrics_InMemoryMetrics_descriptor_, &LogMetrics_CleanerMetrics_InMemoryMetrics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LogMetrics_CleanerMetrics_OnDiskMetrics_descriptor_, &LogMetrics_CleanerMetrics_OnDiskMetrics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LogMetrics_CleanerMetrics_ThreadMetrics_descriptor_, &LogMetrics_CleanerMetrics_ThreadMetrics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LogMetrics_SegletMetrics_descriptor_, &LogMetrics_SegletMetrics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LogMetrics_SegmentMetrics_descriptor_, &LogMetrics_SegmentMetrics::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_LogMetrics_2eproto() {
  delete LogMetrics::default_instance_;
  delete LogMetrics_reflection_;
  delete LogMetrics_CleanerMetrics::default_instance_;
  delete LogMetrics_CleanerMetrics_reflection_;
  delete LogMetrics_CleanerMetrics_InMemoryMetrics::default_instance_;
  delete LogMetrics_CleanerMetrics_InMemoryMetrics_reflection_;
  delete LogMetrics_CleanerMetrics_OnDiskMetrics::default_instance_;
  delete LogMetrics_CleanerMetrics_OnDiskMetrics_reflection_;
  delete LogMetrics_CleanerMetrics_ThreadMetrics::default_instance_;
  delete LogMetrics_CleanerMetrics_ThreadMetrics_reflection_;
  delete LogMetrics_SegletMetrics::default_instance_;
  delete LogMetrics_SegletMetrics_reflection_;
  delete LogMetrics_SegmentMetrics::default_instance_;
  delete LogMetrics_SegmentMetrics_reflection_;
}

void protobuf_AddDesc_LogMetrics_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_LogMetrics_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::RAMCloud::ProtoBuf::protobuf_AddDesc_Histogram_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020LogMetrics.proto\022\021RAMCloud.ProtoBuf\032\017H"
    "istogram.proto\"\326\031\n\nLogMetrics\022\030\n\020ticks_p"
    "er_second\030\001 \002(\001\022\030\n\020total_sync_calls\030\002 \002("
    "\006\022\030\n\020total_sync_ticks\030\003 \002(\006\022\032\n\022total_app"
    "end_calls\030\004 \002(\006\022\032\n\022total_append_ticks\030\005 "
    "\002(\006\022\034\n\024total_no_space_ticks\030\006 \002(\006\022\034\n\024tot"
    "al_bytes_appended\030\007 \002(\006\022%\n\035total_metadat"
    "a_bytes_appended\030\010 \002(\006\022E\n\017cleaner_metric"
    "s\030\t \002(\0132,.RAMCloud.ProtoBuf.LogMetrics.C"
    "leanerMetrics\022C\n\016seglet_metrics\030\n \002(\0132+."
    "RAMCloud.ProtoBuf.LogMetrics.SegletMetri"
    "cs\022E\n\017segment_metrics\030\013 \002(\0132,.RAMCloud.P"
    "rotoBuf.LogMetrics.SegmentMetrics\032\366\022\n\016Cl"
    "eanerMetrics\022\021\n\tpoll_usec\030\001 \002(\007\022(\n max_c"
    "leanable_memory_utilization\030\002 \002(\007\022#\n\033liv"
    "e_segments_per_disk_pass\030\003 \002(\007\022$\n\034surviv"
    "or_segments_to_reserve\030\004 \002(\007\022\036\n\026min_memo"
    "ry_utilization\030\005 \002(\007\022\034\n\024min_disk_utiliza"
    "tion\030\006 \002(\007\022\025\n\rdo_work_ticks\030\007 \002(\006\022\033\n\023do_"
    "work_sleep_ticks\030\010 \002(\006\022W\n\021in_memory_metr"
    "ics\030\t \002(\0132<.RAMCloud.ProtoBuf.LogMetrics"
    ".CleanerMetrics.InMemoryMetrics\022S\n\017on_di"
    "sk_metrics\030\n \002(\0132:.RAMCloud.ProtoBuf.Log"
    "Metrics.CleanerMetrics.OnDiskMetrics\022R\n\016"
    "thread_metrics\030\013 \002(\0132:.RAMCloud.ProtoBuf"
    ".LogMetrics.CleanerMetrics.ThreadMetrics"
    "\032\354\004\n\017InMemoryMetrics\022\"\n\032total_relocation"
    "_callbacks\030\001 \002(\006\022 \n\030total_relocation_app"
    "ends\030\002 \002(\006\022\031\n\021total_bytes_freed\030\003 \002(\006\022)\n"
    "!total_bytes_in_compacted_segments\030\004 \002(\006"
    "\022)\n!total_bytes_appended_to_survivors\030\005 "
    "\002(\006\022 \n\030total_segments_compacted\030\006 \002(\006\022&\n"
    "\036total_empty_segments_compacted\030\007 \002(\006\022\035\n"
    "\025total_entries_scanned\030\010 \003(\006\022\"\n\032total_li"
    "ve_entries_scanned\030\t \003(\006\022#\n\033total_scanne"
    "d_entry_lengths\030\n \003(\006\022(\n total_live_scan"
    "ned_entry_lengths\030\013 \003(\006\022\023\n\013total_ticks\030\014"
    " \002(\006\022$\n\034get_segment_to_compact_ticks\030\r \002"
    "(\006\022$\n\034wait_for_free_survivor_ticks\030\016 \002(\006"
    "\022!\n\031relocation_callback_ticks\030\017 \002(\006\022\037\n\027r"
    "elocation_append_ticks\030\020 \002(\006\022!\n\031compacti"
    "on_complete_ticks\030\021 \002(\006\032\321\t\n\rOnDiskMetric"
    "s\022)\n!total_bytes_appended_to_survivors\030\001"
    " \002(\006\022 \n\030total_memory_bytes_freed\030\002 \002(\006\022\036"
    "\n\026total_disk_bytes_freed\030\003 \002(\006\022.\n&total_"
    "memory_bytes_in_cleaned_segments\030\004 \002(\006\022,"
    "\n$total_disk_bytes_in_cleaned_segments\030\005"
    " \002(\006\022\"\n\032total_relocation_callbacks\030\006 \002(\006"
    "\022 \n\030total_relocation_appends\030\007 \002(\006\022\036\n\026to"
    "tal_segments_cleaned\030\010 \002(\006\022$\n\034total_empt"
    "y_segments_cleaned\030\t \002(\006\022\037\n\027total_surviv"
    "ors_created\030\n \002(\006\022\022\n\ntotal_runs\030\013 \002(\006\022!\n"
    "\031total_low_disk_space_runs\030\014 \002(\006\022\'\n\037memo"
    "ry_utilization_at_start_sum\030\r \002(\006\022\035\n\025tot"
    "al_entries_scanned\030\016 \003(\006\022\"\n\032total_live_e"
    "ntries_scanned\030\017 \003(\006\022#\n\033total_scanned_en"
    "try_lengths\030\020 \003(\006\022(\n total_live_scanned_"
    "entry_lengths\030\021 \003(\006\022\023\n\013total_ticks\030\022 \002(\006"
    "\022#\n\033get_segments_to_clean_ticks\030\023 \002(\006\022\037\n"
    "\027cost_benefit_sort_ticks\030\024 \002(\006\022 \n\030get_so"
    "rted_entries_ticks\030\025 \002(\006\022\034\n\024timestamp_so"
    "rt_ticks\030\026 \002(\006\022#\n\033relocate_live_entries_"
    "ticks\030\027 \002(\006\022%\n\035wait_for_free_survivors_t"
    "icks\030\030 \002(\006\022\037\n\027cleaning_complete_ticks\030\031 "
    "\002(\006\022!\n\031relocation_callback_ticks\030\032 \002(\006\022\037"
    "\n\027relocation_append_ticks\030\033 \002(\006\022\034\n\024close"
    "_survivor_ticks\030\034 \002(\006\022\033\n\023survivor_sync_t"
    "icks\030\035 \002(\006\022F\n cleaned_segment_memory_his"
    "togram\030\036 \002(\0132\034.RAMCloud.ProtoBuf.Histogr"
    "am\022D\n\036cleaned_segment_disk_histogram\030\037 \002"
    "(\0132\034.RAMCloud.ProtoBuf.Histogram\022A\n\033all_"
    "segments_disk_histogram\030  \002(\0132\034.RAMCloud"
    ".ProtoBuf.Histogram\032%\n\rThreadMetrics\022\024\n\014"
    "active_ticks\030\001 \003(\006\032\342\001\n\rSegletMetrics\022\025\n\r"
    "total_seglets\030\001 \002(\006\022\034\n\024total_usable_segl"
    "ets\030\002 \002(\006\022#\n\033emergency_head_pool_reserve"
    "\030\003 \002(\006\022!\n\031emergency_head_pool_count\030\004 \002("
    "\006\022\034\n\024cleaner_pool_reserve\030\005 \002(\006\022\032\n\022clean"
    "er_pool_count\030\006 \002(\006\022\032\n\022default_pool_coun"
    "t\030\007 \002(\006\032\255\001\n\016SegmentMetrics\022@\n\032segments_o"
    "n_disk_histogram\030\001 \002(\0132\034.RAMCloud.ProtoB"
    "uf.Histogram\022 \n\030current_segments_on_disk"
    "\030\002 \002(\006\022\032\n\022total_entry_counts\030\003 \003(\006\022\033\n\023to"
    "tal_entry_lengths\030\004 \003(\006", 3343);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "LogMetrics.proto", &protobuf_RegisterTypes);
  LogMetrics::default_instance_ = new LogMetrics();
  LogMetrics_CleanerMetrics::default_instance_ = new LogMetrics_CleanerMetrics();
  LogMetrics_CleanerMetrics_InMemoryMetrics::default_instance_ = new LogMetrics_CleanerMetrics_InMemoryMetrics();
  LogMetrics_CleanerMetrics_OnDiskMetrics::default_instance_ = new LogMetrics_CleanerMetrics_OnDiskMetrics();
  LogMetrics_CleanerMetrics_ThreadMetrics::default_instance_ = new LogMetrics_CleanerMetrics_ThreadMetrics();
  LogMetrics_SegletMetrics::default_instance_ = new LogMetrics_SegletMetrics();
  LogMetrics_SegmentMetrics::default_instance_ = new LogMetrics_SegmentMetrics();
  LogMetrics::default_instance_->InitAsDefaultInstance();
  LogMetrics_CleanerMetrics::default_instance_->InitAsDefaultInstance();
  LogMetrics_CleanerMetrics_InMemoryMetrics::default_instance_->InitAsDefaultInstance();
  LogMetrics_CleanerMetrics_OnDiskMetrics::default_instance_->InitAsDefaultInstance();
  LogMetrics_CleanerMetrics_ThreadMetrics::default_instance_->InitAsDefaultInstance();
  LogMetrics_SegletMetrics::default_instance_->InitAsDefaultInstance();
  LogMetrics_SegmentMetrics::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_LogMetrics_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_LogMetrics_2eproto {
  StaticDescriptorInitializer_LogMetrics_2eproto() {
    protobuf_AddDesc_LogMetrics_2eproto();
  }
} static_descriptor_initializer_LogMetrics_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogMetrics_CleanerMetrics_InMemoryMetrics::kTotalRelocationCallbacksFieldNumber;
const int LogMetrics_CleanerMetrics_InMemoryMetrics::kTotalRelocationAppendsFieldNumber;
const int LogMetrics_CleanerMetrics_InMemoryMetrics::kTotalBytesFreedFieldNumber;
const int LogMetrics_CleanerMetrics_InMemoryMetrics::kTotalBytesInCompactedSegmentsFieldNumber;
const int LogMetrics_CleanerMetrics_InMemoryMetrics::kTotalBytesAppendedToSurvivorsFieldNumber;
const int LogMetrics_CleanerMetrics_InMemoryMetrics::kTotalSegmentsCompactedFieldNumber;
const int LogMetrics_CleanerMetrics_InMemoryMetrics::kTotalEmptySegmentsCompactedFieldNumber;
const int LogMetrics_CleanerMetrics_InMemoryMetrics::kTotalEntriesScannedFieldNumber;
const int LogMetrics_CleanerMetrics_InMemoryMetrics::kTotalLiveEntriesScannedFieldNumber;
const int LogMetrics_CleanerMetrics_InMemoryMetrics::kTotalScannedEntryLengthsFieldNumber;
const int LogMetrics_CleanerMetrics_InMemoryMetrics::kTotalLiveScannedEntryLengthsFieldNumber;
const int LogMetrics_CleanerMetrics_InMemoryMetrics::kTotalTicksFieldNumber;
const int LogMetrics_CleanerMetrics_InMemoryMetrics::kGetSegmentToCompactTicksFieldNumber;
const int LogMetrics_CleanerMetrics_InMemoryMetrics::kWaitForFreeSurvivorTicksFieldNumber;
const int LogMetrics_CleanerMetrics_InMemoryMetrics::kRelocationCallbackTicksFieldNumber;
const int LogMetrics_CleanerMetrics_InMemoryMetrics::kRelocationAppendTicksFieldNumber;
const int LogMetrics_CleanerMetrics_InMemoryMetrics::kCompactionCompleteTicksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogMetrics_CleanerMetrics_InMemoryMetrics::LogMetrics_CleanerMetrics_InMemoryMetrics()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics)
}

void LogMetrics_CleanerMetrics_InMemoryMetrics::InitAsDefaultInstance() {
}

LogMetrics_CleanerMetrics_InMemoryMetrics::LogMetrics_CleanerMetrics_InMemoryMetrics(const LogMetrics_CleanerMetrics_InMemoryMetrics& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics)
}

void LogMetrics_CleanerMetrics_InMemoryMetrics::SharedCtor() {
  _cached_size_ = 0;
  total_relocation_callbacks_ = GOOGLE_ULONGLONG(0);
  total_relocation_appends_ = GOOGLE_ULONGLONG(0);
  total_bytes_freed_ = GOOGLE_ULONGLONG(0);
  total_bytes_in_compacted_segments_ = GOOGLE_ULONGLONG(0);
  total_bytes_appended_to_survivors_ = GOOGLE_ULONGLONG(0);
  total_segments_compacted_ = GOOGLE_ULONGLONG(0);
  total_empty_segments_compacted_ = GOOGLE_ULONGLONG(0);
  total_ticks_ = GOOGLE_ULONGLONG(0);
  get_segment_to_compact_ticks_ = GOOGLE_ULONGLONG(0);
  wait_for_free_survivor_ticks_ = GOOGLE_ULONGLONG(0);
  relocation_callback_ticks_ = GOOGLE_ULONGLONG(0);
  relocation_append_ticks_ = GOOGLE_ULONGLONG(0);
  compaction_complete_ticks_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogMetrics_CleanerMetrics_InMemoryMetrics::~LogMetrics_CleanerMetrics_InMemoryMetrics() {
  // @@protoc_insertion_point(destructor:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics)
  SharedDtor();
}

void LogMetrics_CleanerMetrics_InMemoryMetrics::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogMetrics_CleanerMetrics_InMemoryMetrics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogMetrics_CleanerMetrics_InMemoryMetrics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogMetrics_CleanerMetrics_InMemoryMetrics_descriptor_;
}

const LogMetrics_CleanerMetrics_InMemoryMetrics& LogMetrics_CleanerMetrics_InMemoryMetrics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogMetrics_2eproto();
  return *default_instance_;
}

LogMetrics_CleanerMetrics_InMemoryMetrics* LogMetrics_CleanerMetrics_InMemoryMetrics::default_instance_ = NULL;

LogMetrics_CleanerMetrics_InMemoryMetrics* LogMetrics_CleanerMetrics_InMemoryMetrics::New(::google::protobuf::Arena* arena) const {
  LogMetrics_CleanerMetrics_InMemoryMetrics* n = new LogMetrics_CleanerMetrics_InMemoryMetrics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogMetrics_CleanerMetrics_InMemoryMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LogMetrics_CleanerMetrics_InMemoryMetrics, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LogMetrics_CleanerMetrics_InMemoryMetrics*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(total_relocation_callbacks_, total_empty_segments_compacted_);
  }
  if (_has_bits_[8 / 32] & 63488u) {
    ZR_(total_ticks_, relocation_append_ticks_);
  }
  compaction_complete_ticks_ = GOOGLE_ULONGLONG(0);

#undef ZR_HELPER_
#undef ZR_

  total_entries_scanned_.Clear();
  total_live_entries_scanned_.Clear();
  total_scanned_entry_lengths_.Clear();
  total_live_scanned_entry_lengths_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LogMetrics_CleanerMetrics_InMemoryMetrics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 total_relocation_callbacks = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &total_relocation_callbacks_)));
          set_has_total_relocation_callbacks();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_total_relocation_appends;
        break;
      }

      // required fixed64 total_relocation_appends = 2;
      case 2: {
        if (tag == 17) {
         parse_total_relocation_appends:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &total_relocation_appends_)));
          set_has_total_relocation_appends();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_total_bytes_freed;
        break;
      }

      // required fixed64 total_bytes_freed = 3;
      case 3: {
        if (tag == 25) {
         parse_total_bytes_freed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &total_bytes_freed_)));
          set_has_total_bytes_freed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_total_bytes_in_compacted_segments;
        break;
      }

      // required fixed64 total_bytes_in_compacted_segments = 4;
      case 4: {
        if (tag == 33) {
         parse_total_bytes_in_compacted_segments:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &total_bytes_in_compacted_segments_)));
          set_has_total_bytes_in_compacted_segments();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_total_bytes_appended_to_survivors;
        break;
      }

      // required fixed64 total_bytes_appended_to_survivors = 5;
      case 5: {
        if (tag == 41) {
         parse_total_bytes_appended_to_survivors:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &total_bytes_appended_to_survivors_)));
          set_has_total_bytes_appended_to_survivors();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_total_segments_compacted;
        break;
      }

      // required fixed64 total_segments_compacted = 6;
      case 6: {
        if (tag == 49) {
         parse_total_segments_compacted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &total_segments_compacted_)));
          set_has_total_segments_compacted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_total_empty_segments_compacted;
        break;
      }

      // required fixed64 total_empty_segments_compacted = 7;
      case 7: {
        if (tag == 57) {
         parse_total_empty_segments_compacted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &total_empty_segments_compacted_)));
          set_has_total_empty_segments_compacted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_total_entries_scanned;
        break;
      }

      // repeated fixed64 total_entries_scanned = 8;
      case 8: {
        if (tag == 65) {
         parse_total_entries_scanned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 65, input, this->mutable_total_entries_scanned())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_total_entries_scanned())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_total_entries_scanned;
        if (input->ExpectTag(73)) goto parse_total_live_entries_scanned;
        break;
      }

      // repeated fixed64 total_live_entries_scanned = 9;
      case 9: {
        if (tag == 73) {
         parse_total_live_entries_scanned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 73, input, this->mutable_total_live_entries_scanned())));
        } else if (tag == 74) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_total_live_entries_scanned())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_total_live_entries_scanned;
        if (input->ExpectTag(81)) goto parse_total_scanned_entry_lengths;
        break;
      }

      // repeated fixed64 total_scanned_entry_lengths = 10;
      case 10: {
        if (tag == 81) {
         parse_total_scanned_entry_lengths:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 81, input, this->mutable_total_scanned_entry_lengths())));
        } else if (tag == 82) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_total_scanned_entry_lengths())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_total_scanned_entry_lengths;
        if (input->ExpectTag(89)) goto parse_total_live_scanned_entry_lengths;
        break;
      }

      // repeated fixed64 total_live_scanned_entry_lengths = 11;
      case 11: {
        if (tag == 89) {
         parse_total_live_scanned_entry_lengths:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 89, input, this->mutable_total_live_scanned_entry_lengths())));
        } else if (tag == 90) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_total_live_scanned_entry_lengths())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_total_live_scanned_entry_lengths;
        if (input->ExpectTag(97)) goto parse_total_ticks;
        break;
      }

      // required fixed64 total_ticks = 12;
      case 12: {
        if (tag == 97) {
         parse_total_ticks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &total_ticks_)));
          set_has_total_ticks();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_get_segment_to_compact_ticks;
        break;
      }

      // required fixed64 get_segment_to_compact_ticks = 13;
      case 13: {
        if (tag == 105) {
         parse_get_segment_to_compact_ticks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &get_segment_to_compact_ticks_)));
          set_has_get_segment_to_compact_ticks();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_wait_for_free_survivor_ticks;
        break;
      }

      // required fixed64 wait_for_free_survivor_ticks = 14;
      case 14: {
        if (tag == 113) {
         parse_wait_for_free_survivor_ticks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &wait_for_free_survivor_ticks_)));
          set_has_wait_for_free_survivor_ticks();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_relocation_callback_ticks;
        break;
      }

      // required fixed64 relocation_callback_ticks = 15;
      case 15: {
        if (tag == 121) {
         parse_relocation_callback_ticks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &relocation_callback_ticks_)));
          set_has_relocation_callback_ticks();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_relocation_append_ticks;
        break;
      }

      // required fixed64 relocation_append_ticks = 16;
      case 16: {
        if (tag == 129) {
         parse_relocation_append_ticks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &relocation_append_ticks_)));
          set_has_relocation_append_ticks();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(137)) goto parse_compaction_complete_ticks;
        break;
      }

      // required fixed64 compaction_complete_ticks = 17;
      case 17: {
        if (tag == 137) {
         parse_compaction_complete_ticks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &compaction_complete_ticks_)));
          set_has_compaction_complete_ticks();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics)
  return false;
#undef DO_
}

void LogMetrics_CleanerMetrics_InMemoryMetrics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics)
  // required fixed64 total_relocation_callbacks = 1;
  if (has_total_relocation_callbacks()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->total_relocation_callbacks(), output);
  }

  // required fixed64 total_relocation_appends = 2;
  if (has_total_relocation_appends()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->total_relocation_appends(), output);
  }

  // required fixed64 total_bytes_freed = 3;
  if (has_total_bytes_freed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->total_bytes_freed(), output);
  }

  // required fixed64 total_bytes_in_compacted_segments = 4;
  if (has_total_bytes_in_compacted_segments()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->total_bytes_in_compacted_segments(), output);
  }

  // required fixed64 total_bytes_appended_to_survivors = 5;
  if (has_total_bytes_appended_to_survivors()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->total_bytes_appended_to_survivors(), output);
  }

  // required fixed64 total_segments_compacted = 6;
  if (has_total_segments_compacted()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->total_segments_compacted(), output);
  }

  // required fixed64 total_empty_segments_compacted = 7;
  if (has_total_empty_segments_compacted()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->total_empty_segments_compacted(), output);
  }

  // repeated fixed64 total_entries_scanned = 8;
  for (int i = 0; i < this->total_entries_scanned_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      8, this->total_entries_scanned(i), output);
  }

  // repeated fixed64 total_live_entries_scanned = 9;
  for (int i = 0; i < this->total_live_entries_scanned_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      9, this->total_live_entries_scanned(i), output);
  }

  // repeated fixed64 total_scanned_entry_lengths = 10;
  for (int i = 0; i < this->total_scanned_entry_lengths_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      10, this->total_scanned_entry_lengths(i), output);
  }

  // repeated fixed64 total_live_scanned_entry_lengths = 11;
  for (int i = 0; i < this->total_live_scanned_entry_lengths_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      11, this->total_live_scanned_entry_lengths(i), output);
  }

  // required fixed64 total_ticks = 12;
  if (has_total_ticks()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(12, this->total_ticks(), output);
  }

  // required fixed64 get_segment_to_compact_ticks = 13;
  if (has_get_segment_to_compact_ticks()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(13, this->get_segment_to_compact_ticks(), output);
  }

  // required fixed64 wait_for_free_survivor_ticks = 14;
  if (has_wait_for_free_survivor_ticks()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(14, this->wait_for_free_survivor_ticks(), output);
  }

  // required fixed64 relocation_callback_ticks = 15;
  if (has_relocation_callback_ticks()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(15, this->relocation_callback_ticks(), output);
  }

  // required fixed64 relocation_append_ticks = 16;
  if (has_relocation_append_ticks()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(16, this->relocation_append_ticks(), output);
  }

  // required fixed64 compaction_complete_ticks = 17;
  if (has_compaction_complete_ticks()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(17, this->compaction_complete_ticks(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics)
}

::google::protobuf::uint8* LogMetrics_CleanerMetrics_InMemoryMetrics::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics)
  // required fixed64 total_relocation_callbacks = 1;
  if (has_total_relocation_callbacks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->total_relocation_callbacks(), target);
  }

  // required fixed64 total_relocation_appends = 2;
  if (has_total_relocation_appends()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->total_relocation_appends(), target);
  }

  // required fixed64 total_bytes_freed = 3;
  if (has_total_bytes_freed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->total_bytes_freed(), target);
  }

  // required fixed64 total_bytes_in_compacted_segments = 4;
  if (has_total_bytes_in_compacted_segments()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->total_bytes_in_compacted_segments(), target);
  }

  // required fixed64 total_bytes_appended_to_survivors = 5;
  if (has_total_bytes_appended_to_survivors()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->total_bytes_appended_to_survivors(), target);
  }

  // required fixed64 total_segments_compacted = 6;
  if (has_total_segments_compacted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->total_segments_compacted(), target);
  }

  // required fixed64 total_empty_segments_compacted = 7;
  if (has_total_empty_segments_compacted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->total_empty_segments_compacted(), target);
  }

  // repeated fixed64 total_entries_scanned = 8;
  for (int i = 0; i < this->total_entries_scanned_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(8, this->total_entries_scanned(i), target);
  }

  // repeated fixed64 total_live_entries_scanned = 9;
  for (int i = 0; i < this->total_live_entries_scanned_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(9, this->total_live_entries_scanned(i), target);
  }

  // repeated fixed64 total_scanned_entry_lengths = 10;
  for (int i = 0; i < this->total_scanned_entry_lengths_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(10, this->total_scanned_entry_lengths(i), target);
  }

  // repeated fixed64 total_live_scanned_entry_lengths = 11;
  for (int i = 0; i < this->total_live_scanned_entry_lengths_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(11, this->total_live_scanned_entry_lengths(i), target);
  }

  // required fixed64 total_ticks = 12;
  if (has_total_ticks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(12, this->total_ticks(), target);
  }

  // required fixed64 get_segment_to_compact_ticks = 13;
  if (has_get_segment_to_compact_ticks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(13, this->get_segment_to_compact_ticks(), target);
  }

  // required fixed64 wait_for_free_survivor_ticks = 14;
  if (has_wait_for_free_survivor_ticks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(14, this->wait_for_free_survivor_ticks(), target);
  }

  // required fixed64 relocation_callback_ticks = 15;
  if (has_relocation_callback_ticks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(15, this->relocation_callback_ticks(), target);
  }

  // required fixed64 relocation_append_ticks = 16;
  if (has_relocation_append_ticks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(16, this->relocation_append_ticks(), target);
  }

  // required fixed64 compaction_complete_ticks = 17;
  if (has_compaction_complete_ticks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(17, this->compaction_complete_ticks(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics)
  return target;
}

int LogMetrics_CleanerMetrics_InMemoryMetrics::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics)
  int total_size = 0;

  if (has_total_relocation_callbacks()) {
    // required fixed64 total_relocation_callbacks = 1;
    total_size += 1 + 8;
  }

  if (has_total_relocation_appends()) {
    // required fixed64 total_relocation_appends = 2;
    total_size += 1 + 8;
  }

  if (has_total_bytes_freed()) {
    // required fixed64 total_bytes_freed = 3;
    total_size += 1 + 8;
  }

  if (has_total_bytes_in_compacted_segments()) {
    // required fixed64 total_bytes_in_compacted_segments = 4;
    total_size += 1 + 8;
  }

  if (has_total_bytes_appended_to_survivors()) {
    // required fixed64 total_bytes_appended_to_survivors = 5;
    total_size += 1 + 8;
  }

  if (has_total_segments_compacted()) {
    // required fixed64 total_segments_compacted = 6;
    total_size += 1 + 8;
  }

  if (has_total_empty_segments_compacted()) {
    // required fixed64 total_empty_segments_compacted = 7;
    total_size += 1 + 8;
  }

  if (has_total_ticks()) {
    // required fixed64 total_ticks = 12;
    total_size += 1 + 8;
  }

  if (has_get_segment_to_compact_ticks()) {
    // required fixed64 get_segment_to_compact_ticks = 13;
    total_size += 1 + 8;
  }

  if (has_wait_for_free_survivor_ticks()) {
    // required fixed64 wait_for_free_survivor_ticks = 14;
    total_size += 1 + 8;
  }

  if (has_relocation_callback_ticks()) {
    // required fixed64 relocation_callback_ticks = 15;
    total_size += 1 + 8;
  }

  if (has_relocation_append_ticks()) {
    // required fixed64 relocation_append_ticks = 16;
    total_size += 2 + 8;
  }

  if (has_compaction_complete_ticks()) {
    // required fixed64 compaction_complete_ticks = 17;
    total_size += 2 + 8;
  }

  return total_size;
}
int LogMetrics_CleanerMetrics_InMemoryMetrics::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0001f87f) ^ 0x0001f87f) == 0) {  // All required fields are present.
    // required fixed64 total_relocation_callbacks = 1;
    total_size += 1 + 8;

    // required fixed64 total_relocation_appends = 2;
    total_size += 1 + 8;

    // required fixed64 total_bytes_freed = 3;
    total_size += 1 + 8;

    // required fixed64 total_bytes_in_compacted_segments = 4;
    total_size += 1 + 8;

    // required fixed64 total_bytes_appended_to_survivors = 5;
    total_size += 1 + 8;

    // required fixed64 total_segments_compacted = 6;
    total_size += 1 + 8;

    // required fixed64 total_empty_segments_compacted = 7;
    total_size += 1 + 8;

    // required fixed64 total_ticks = 12;
    total_size += 1 + 8;

    // required fixed64 get_segment_to_compact_ticks = 13;
    total_size += 1 + 8;

    // required fixed64 wait_for_free_survivor_ticks = 14;
    total_size += 1 + 8;

    // required fixed64 relocation_callback_ticks = 15;
    total_size += 1 + 8;

    // required fixed64 relocation_append_ticks = 16;
    total_size += 2 + 8;

    // required fixed64 compaction_complete_ticks = 17;
    total_size += 2 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated fixed64 total_entries_scanned = 8;
  {
    int data_size = 0;
    data_size = 8 * this->total_entries_scanned_size();
    total_size += 1 * this->total_entries_scanned_size() + data_size;
  }

  // repeated fixed64 total_live_entries_scanned = 9;
  {
    int data_size = 0;
    data_size = 8 * this->total_live_entries_scanned_size();
    total_size += 1 * this->total_live_entries_scanned_size() + data_size;
  }

  // repeated fixed64 total_scanned_entry_lengths = 10;
  {
    int data_size = 0;
    data_size = 8 * this->total_scanned_entry_lengths_size();
    total_size += 1 * this->total_scanned_entry_lengths_size() + data_size;
  }

  // repeated fixed64 total_live_scanned_entry_lengths = 11;
  {
    int data_size = 0;
    data_size = 8 * this->total_live_scanned_entry_lengths_size();
    total_size += 1 * this->total_live_scanned_entry_lengths_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogMetrics_CleanerMetrics_InMemoryMetrics::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LogMetrics_CleanerMetrics_InMemoryMetrics* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LogMetrics_CleanerMetrics_InMemoryMetrics>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics)
    MergeFrom(*source);
  }
}

void LogMetrics_CleanerMetrics_InMemoryMetrics::MergeFrom(const LogMetrics_CleanerMetrics_InMemoryMetrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  total_entries_scanned_.MergeFrom(from.total_entries_scanned_);
  total_live_entries_scanned_.MergeFrom(from.total_live_entries_scanned_);
  total_scanned_entry_lengths_.MergeFrom(from.total_scanned_entry_lengths_);
  total_live_scanned_entry_lengths_.MergeFrom(from.total_live_scanned_entry_lengths_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total_relocation_callbacks()) {
      set_total_relocation_callbacks(from.total_relocation_callbacks());
    }
    if (from.has_total_relocation_appends()) {
      set_total_relocation_appends(from.total_relocation_appends());
    }
    if (from.has_total_bytes_freed()) {
      set_total_bytes_freed(from.total_bytes_freed());
    }
    if (from.has_total_bytes_in_compacted_segments()) {
      set_total_bytes_in_compacted_segments(from.total_bytes_in_compacted_segments());
    }
    if (from.has_total_bytes_appended_to_survivors()) {
      set_total_bytes_appended_to_survivors(from.total_bytes_appended_to_survivors());
    }
    if (from.has_total_segments_compacted()) {
      set_total_segments_compacted(from.total_segments_compacted());
    }
    if (from.has_total_empty_segments_compacted()) {
      set_total_empty_segments_compacted(from.total_empty_segments_compacted());
    }
  }
  if (from._has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    if (from.has_total_ticks()) {
      set_total_ticks(from.total_ticks());
    }
    if (from.has_get_segment_to_compact_ticks()) {
      set_get_segment_to_compact_ticks(from.get_segment_to_compact_ticks());
    }
    if (from.has_wait_for_free_survivor_ticks()) {
      set_wait_for_free_survivor_ticks(from.wait_for_free_survivor_ticks());
    }
    if (from.has_relocation_callback_ticks()) {
      set_relocation_callback_ticks(from.relocation_callback_ticks());
    }
    if (from.has_relocation_append_ticks()) {
      set_relocation_append_ticks(from.relocation_append_ticks());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_compaction_complete_ticks()) {
      set_compaction_complete_ticks(from.compaction_complete_ticks());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LogMetrics_CleanerMetrics_InMemoryMetrics::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogMetrics_CleanerMetrics_InMemoryMetrics::CopyFrom(const LogMetrics_CleanerMetrics_InMemoryMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogMetrics_CleanerMetrics_InMemoryMetrics::IsInitialized() const {
  if ((_has_bits_[0] & 0x0001f87f) != 0x0001f87f) return false;

  return true;
}

void LogMetrics_CleanerMetrics_InMemoryMetrics::Swap(LogMetrics_CleanerMetrics_InMemoryMetrics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogMetrics_CleanerMetrics_InMemoryMetrics::InternalSwap(LogMetrics_CleanerMetrics_InMemoryMetrics* other) {
  std::swap(total_relocation_callbacks_, other->total_relocation_callbacks_);
  std::swap(total_relocation_appends_, other->total_relocation_appends_);
  std::swap(total_bytes_freed_, other->total_bytes_freed_);
  std::swap(total_bytes_in_compacted_segments_, other->total_bytes_in_compacted_segments_);
  std::swap(total_bytes_appended_to_survivors_, other->total_bytes_appended_to_survivors_);
  std::swap(total_segments_compacted_, other->total_segments_compacted_);
  std::swap(total_empty_segments_compacted_, other->total_empty_segments_compacted_);
  total_entries_scanned_.UnsafeArenaSwap(&other->total_entries_scanned_);
  total_live_entries_scanned_.UnsafeArenaSwap(&other->total_live_entries_scanned_);
  total_scanned_entry_lengths_.UnsafeArenaSwap(&other->total_scanned_entry_lengths_);
  total_live_scanned_entry_lengths_.UnsafeArenaSwap(&other->total_live_scanned_entry_lengths_);
  std::swap(total_ticks_, other->total_ticks_);
  std::swap(get_segment_to_compact_ticks_, other->get_segment_to_compact_ticks_);
  std::swap(wait_for_free_survivor_ticks_, other->wait_for_free_survivor_ticks_);
  std::swap(relocation_callback_ticks_, other->relocation_callback_ticks_);
  std::swap(relocation_append_ticks_, other->relocation_append_ticks_);
  std::swap(compaction_complete_ticks_, other->compaction_complete_ticks_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogMetrics_CleanerMetrics_InMemoryMetrics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogMetrics_CleanerMetrics_InMemoryMetrics_descriptor_;
  metadata.reflection = LogMetrics_CleanerMetrics_InMemoryMetrics_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogMetrics_CleanerMetrics_OnDiskMetrics::kTotalBytesAppendedToSurvivorsFieldNumber;
const int LogMetrics_CleanerMetrics_OnDiskMetrics::kTotalMemoryBytesFreedFieldNumber;
const int LogMetrics_CleanerMetrics_OnDiskMetrics::kTotalDiskBytesFreedFieldNumber;
const int LogMetrics_CleanerMetrics_OnDiskMetrics::kTotalMemoryBytesInCleanedSegmentsFieldNumber;
const int LogMetrics_CleanerMetrics_OnDiskMetrics::kTotalDiskBytesInCleanedSegmentsFieldNumber;
const int LogMetrics_CleanerMetrics_OnDiskMetrics::kTotalRelocationCallbacksFieldNumber;
const int LogMetrics_CleanerMetrics_OnDiskMetrics::kTotalRelocationAppendsFieldNumber;
const int LogMetrics_CleanerMetrics_OnDiskMetrics::kTotalSegmentsCleanedFieldNumber;
const int LogMetrics_CleanerMetrics_OnDiskMetrics::kTotalEmptySegmentsCleanedFieldNumber;
const int LogMetrics_CleanerMetrics_OnDiskMetrics::kTotalSurvivorsCreatedFieldNumber;
const int LogMetrics_CleanerMetrics_OnDiskMetrics::kTotalRunsFieldNumber;
const int LogMetrics_CleanerMetrics_OnDiskMetrics::kTotalLowDiskSpaceRunsFieldNumber;
const int LogMetrics_CleanerMetrics_OnDiskMetrics::kMemoryUtilizationAtStartSumFieldNumber;
const int LogMetrics_CleanerMetrics_OnDiskMetrics::kTotalEntriesScannedFieldNumber;
const int LogMetrics_CleanerMetrics_OnDiskMetrics::kTotalLiveEntriesScannedFieldNumber;
const int LogMetrics_CleanerMetrics_OnDiskMetrics::kTotalScannedEntryLengthsFieldNumber;
const int LogMetrics_CleanerMetrics_OnDiskMetrics::kTotalLiveScannedEntryLengthsFieldNumber;
const int LogMetrics_CleanerMetrics_OnDiskMetrics::kTotalTicksFieldNumber;
const int LogMetrics_CleanerMetrics_OnDiskMetrics::kGetSegmentsToCleanTicksFieldNumber;
const int LogMetrics_CleanerMetrics_OnDiskMetrics::kCostBenefitSortTicksFieldNumber;
const int LogMetrics_CleanerMetrics_OnDiskMetrics::kGetSortedEntriesTicksFieldNumber;
const int LogMetrics_CleanerMetrics_OnDiskMetrics::kTimestampSortTicksFieldNumber;
const int LogMetrics_CleanerMetrics_OnDiskMetrics::kRelocateLiveEntriesTicksFieldNumber;
const int LogMetrics_CleanerMetrics_OnDiskMetrics::kWaitForFreeSurvivorsTicksFieldNumber;
const int LogMetrics_CleanerMetrics_OnDiskMetrics::kCleaningCompleteTicksFieldNumber;
const int LogMetrics_CleanerMetrics_OnDiskMetrics::kRelocationCallbackTicksFieldNumber;
const int LogMetrics_CleanerMetrics_OnDiskMetrics::kRelocationAppendTicksFieldNumber;
const int LogMetrics_CleanerMetrics_OnDiskMetrics::kCloseSurvivorTicksFieldNumber;
const int LogMetrics_CleanerMetrics_OnDiskMetrics::kSurvivorSyncTicksFieldNumber;
const int LogMetrics_CleanerMetrics_OnDiskMetrics::kCleanedSegmentMemoryHistogramFieldNumber;
const int LogMetrics_CleanerMetrics_OnDiskMetrics::kCleanedSegmentDiskHistogramFieldNumber;
const int LogMetrics_CleanerMetrics_OnDiskMetrics::kAllSegmentsDiskHistogramFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogMetrics_CleanerMetrics_OnDiskMetrics::LogMetrics_CleanerMetrics_OnDiskMetrics()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics)
}

void LogMetrics_CleanerMetrics_OnDiskMetrics::InitAsDefaultInstance() {
  cleaned_segment_memory_histogram_ = const_cast< ::RAMCloud::ProtoBuf::Histogram*>(&::RAMCloud::ProtoBuf::Histogram::default_instance());
  cleaned_segment_disk_histogram_ = const_cast< ::RAMCloud::ProtoBuf::Histogram*>(&::RAMCloud::ProtoBuf::Histogram::default_instance());
  all_segments_disk_histogram_ = const_cast< ::RAMCloud::ProtoBuf::Histogram*>(&::RAMCloud::ProtoBuf::Histogram::default_instance());
}

LogMetrics_CleanerMetrics_OnDiskMetrics::LogMetrics_CleanerMetrics_OnDiskMetrics(const LogMetrics_CleanerMetrics_OnDiskMetrics& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics)
}

void LogMetrics_CleanerMetrics_OnDiskMetrics::SharedCtor() {
  _cached_size_ = 0;
  total_bytes_appended_to_survivors_ = GOOGLE_ULONGLONG(0);
  total_memory_bytes_freed_ = GOOGLE_ULONGLONG(0);
  total_disk_bytes_freed_ = GOOGLE_ULONGLONG(0);
  total_memory_bytes_in_cleaned_segments_ = GOOGLE_ULONGLONG(0);
  total_disk_bytes_in_cleaned_segments_ = GOOGLE_ULONGLONG(0);
  total_relocation_callbacks_ = GOOGLE_ULONGLONG(0);
  total_relocation_appends_ = GOOGLE_ULONGLONG(0);
  total_segments_cleaned_ = GOOGLE_ULONGLONG(0);
  total_empty_segments_cleaned_ = GOOGLE_ULONGLONG(0);
  total_survivors_created_ = GOOGLE_ULONGLONG(0);
  total_runs_ = GOOGLE_ULONGLONG(0);
  total_low_disk_space_runs_ = GOOGLE_ULONGLONG(0);
  memory_utilization_at_start_sum_ = GOOGLE_ULONGLONG(0);
  total_ticks_ = GOOGLE_ULONGLONG(0);
  get_segments_to_clean_ticks_ = GOOGLE_ULONGLONG(0);
  cost_benefit_sort_ticks_ = GOOGLE_ULONGLONG(0);
  get_sorted_entries_ticks_ = GOOGLE_ULONGLONG(0);
  timestamp_sort_ticks_ = GOOGLE_ULONGLONG(0);
  relocate_live_entries_ticks_ = GOOGLE_ULONGLONG(0);
  wait_for_free_survivors_ticks_ = GOOGLE_ULONGLONG(0);
  cleaning_complete_ticks_ = GOOGLE_ULONGLONG(0);
  relocation_callback_ticks_ = GOOGLE_ULONGLONG(0);
  relocation_append_ticks_ = GOOGLE_ULONGLONG(0);
  close_survivor_ticks_ = GOOGLE_ULONGLONG(0);
  survivor_sync_ticks_ = GOOGLE_ULONGLONG(0);
  cleaned_segment_memory_histogram_ = NULL;
  cleaned_segment_disk_histogram_ = NULL;
  all_segments_disk_histogram_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogMetrics_CleanerMetrics_OnDiskMetrics::~LogMetrics_CleanerMetrics_OnDiskMetrics() {
  // @@protoc_insertion_point(destructor:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics)
  SharedDtor();
}

void LogMetrics_CleanerMetrics_OnDiskMetrics::SharedDtor() {
  if (this != default_instance_) {
    delete cleaned_segment_memory_histogram_;
    delete cleaned_segment_disk_histogram_;
    delete all_segments_disk_histogram_;
  }
}

void LogMetrics_CleanerMetrics_OnDiskMetrics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogMetrics_CleanerMetrics_OnDiskMetrics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogMetrics_CleanerMetrics_OnDiskMetrics_descriptor_;
}

const LogMetrics_CleanerMetrics_OnDiskMetrics& LogMetrics_CleanerMetrics_OnDiskMetrics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogMetrics_2eproto();
  return *default_instance_;
}

LogMetrics_CleanerMetrics_OnDiskMetrics* LogMetrics_CleanerMetrics_OnDiskMetrics::default_instance_ = NULL;

LogMetrics_CleanerMetrics_OnDiskMetrics* LogMetrics_CleanerMetrics_OnDiskMetrics::New(::google::protobuf::Arena* arena) const {
  LogMetrics_CleanerMetrics_OnDiskMetrics* n = new LogMetrics_CleanerMetrics_OnDiskMetrics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogMetrics_CleanerMetrics_OnDiskMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LogMetrics_CleanerMetrics_OnDiskMetrics, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LogMetrics_CleanerMetrics_OnDiskMetrics*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(total_bytes_appended_to_survivors_, total_segments_cleaned_);
  }
  if (_has_bits_[8 / 32] & 7936u) {
    ZR_(total_empty_segments_cleaned_, memory_utilization_at_start_sum_);
  }
  if (_has_bits_[16 / 32] & 16646144u) {
    ZR_(total_ticks_, wait_for_free_survivors_ticks_);
  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    ZR_(cleaning_complete_ticks_, survivor_sync_ticks_);
    if (has_cleaned_segment_memory_histogram()) {
      if (cleaned_segment_memory_histogram_ != NULL) cleaned_segment_memory_histogram_->::RAMCloud::ProtoBuf::Histogram::Clear();
    }
    if (has_cleaned_segment_disk_histogram()) {
      if (cleaned_segment_disk_histogram_ != NULL) cleaned_segment_disk_histogram_->::RAMCloud::ProtoBuf::Histogram::Clear();
    }
    if (has_all_segments_disk_histogram()) {
      if (all_segments_disk_histogram_ != NULL) all_segments_disk_histogram_->::RAMCloud::ProtoBuf::Histogram::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  total_entries_scanned_.Clear();
  total_live_entries_scanned_.Clear();
  total_scanned_entry_lengths_.Clear();
  total_live_scanned_entry_lengths_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LogMetrics_CleanerMetrics_OnDiskMetrics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 total_bytes_appended_to_survivors = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &total_bytes_appended_to_survivors_)));
          set_has_total_bytes_appended_to_survivors();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_total_memory_bytes_freed;
        break;
      }

      // required fixed64 total_memory_bytes_freed = 2;
      case 2: {
        if (tag == 17) {
         parse_total_memory_bytes_freed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &total_memory_bytes_freed_)));
          set_has_total_memory_bytes_freed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_total_disk_bytes_freed;
        break;
      }

      // required fixed64 total_disk_bytes_freed = 3;
      case 3: {
        if (tag == 25) {
         parse_total_disk_bytes_freed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &total_disk_bytes_freed_)));
          set_has_total_disk_bytes_freed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_total_memory_bytes_in_cleaned_segments;
        break;
      }

      // required fixed64 total_memory_bytes_in_cleaned_segments = 4;
      case 4: {
        if (tag == 33) {
         parse_total_memory_bytes_in_cleaned_segments:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &total_memory_bytes_in_cleaned_segments_)));
          set_has_total_memory_bytes_in_cleaned_segments();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_total_disk_bytes_in_cleaned_segments;
        break;
      }

      // required fixed64 total_disk_bytes_in_cleaned_segments = 5;
      case 5: {
        if (tag == 41) {
         parse_total_disk_bytes_in_cleaned_segments:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &total_disk_bytes_in_cleaned_segments_)));
          set_has_total_disk_bytes_in_cleaned_segments();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_total_relocation_callbacks;
        break;
      }

      // required fixed64 total_relocation_callbacks = 6;
      case 6: {
        if (tag == 49) {
         parse_total_relocation_callbacks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &total_relocation_callbacks_)));
          set_has_total_relocation_callbacks();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_total_relocation_appends;
        break;
      }

      // required fixed64 total_relocation_appends = 7;
      case 7: {
        if (tag == 57) {
         parse_total_relocation_appends:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &total_relocation_appends_)));
          set_has_total_relocation_appends();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_total_segments_cleaned;
        break;
      }

      // required fixed64 total_segments_cleaned = 8;
      case 8: {
        if (tag == 65) {
         parse_total_segments_cleaned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &total_segments_cleaned_)));
          set_has_total_segments_cleaned();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_total_empty_segments_cleaned;
        break;
      }

      // required fixed64 total_empty_segments_cleaned = 9;
      case 9: {
        if (tag == 73) {
         parse_total_empty_segments_cleaned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &total_empty_segments_cleaned_)));
          set_has_total_empty_segments_cleaned();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_total_survivors_created;
        break;
      }

      // required fixed64 total_survivors_created = 10;
      case 10: {
        if (tag == 81) {
         parse_total_survivors_created:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &total_survivors_created_)));
          set_has_total_survivors_created();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_total_runs;
        break;
      }

      // required fixed64 total_runs = 11;
      case 11: {
        if (tag == 89) {
         parse_total_runs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &total_runs_)));
          set_has_total_runs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_total_low_disk_space_runs;
        break;
      }

      // required fixed64 total_low_disk_space_runs = 12;
      case 12: {
        if (tag == 97) {
         parse_total_low_disk_space_runs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &total_low_disk_space_runs_)));
          set_has_total_low_disk_space_runs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_memory_utilization_at_start_sum;
        break;
      }

      // required fixed64 memory_utilization_at_start_sum = 13;
      case 13: {
        if (tag == 105) {
         parse_memory_utilization_at_start_sum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &memory_utilization_at_start_sum_)));
          set_has_memory_utilization_at_start_sum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_total_entries_scanned;
        break;
      }

      // repeated fixed64 total_entries_scanned = 14;
      case 14: {
        if (tag == 113) {
         parse_total_entries_scanned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 113, input, this->mutable_total_entries_scanned())));
        } else if (tag == 114) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_total_entries_scanned())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_total_entries_scanned;
        if (input->ExpectTag(121)) goto parse_total_live_entries_scanned;
        break;
      }

      // repeated fixed64 total_live_entries_scanned = 15;
      case 15: {
        if (tag == 121) {
         parse_total_live_entries_scanned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 121, input, this->mutable_total_live_entries_scanned())));
        } else if (tag == 122) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_total_live_entries_scanned())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_total_live_entries_scanned;
        if (input->ExpectTag(129)) goto parse_total_scanned_entry_lengths;
        break;
      }

      // repeated fixed64 total_scanned_entry_lengths = 16;
      case 16: {
        if (tag == 129) {
         parse_total_scanned_entry_lengths:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 2, 129, input, this->mutable_total_scanned_entry_lengths())));
        } else if (tag == 130) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_total_scanned_entry_lengths())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_total_scanned_entry_lengths;
        if (input->ExpectTag(137)) goto parse_total_live_scanned_entry_lengths;
        break;
      }

      // repeated fixed64 total_live_scanned_entry_lengths = 17;
      case 17: {
        if (tag == 137) {
         parse_total_live_scanned_entry_lengths:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 2, 137, input, this->mutable_total_live_scanned_entry_lengths())));
        } else if (tag == 138) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_total_live_scanned_entry_lengths())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(137)) goto parse_total_live_scanned_entry_lengths;
        if (input->ExpectTag(145)) goto parse_total_ticks;
        break;
      }

      // required fixed64 total_ticks = 18;
      case 18: {
        if (tag == 145) {
         parse_total_ticks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &total_ticks_)));
          set_has_total_ticks();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(153)) goto parse_get_segments_to_clean_ticks;
        break;
      }

      // required fixed64 get_segments_to_clean_ticks = 19;
      case 19: {
        if (tag == 153) {
         parse_get_segments_to_clean_ticks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &get_segments_to_clean_ticks_)));
          set_has_get_segments_to_clean_ticks();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(161)) goto parse_cost_benefit_sort_ticks;
        break;
      }

      // required fixed64 cost_benefit_sort_ticks = 20;
      case 20: {
        if (tag == 161) {
         parse_cost_benefit_sort_ticks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &cost_benefit_sort_ticks_)));
          set_has_cost_benefit_sort_ticks();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(169)) goto parse_get_sorted_entries_ticks;
        break;
      }

      // required fixed64 get_sorted_entries_ticks = 21;
      case 21: {
        if (tag == 169) {
         parse_get_sorted_entries_ticks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &get_sorted_entries_ticks_)));
          set_has_get_sorted_entries_ticks();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(177)) goto parse_timestamp_sort_ticks;
        break;
      }

      // required fixed64 timestamp_sort_ticks = 22;
      case 22: {
        if (tag == 177) {
         parse_timestamp_sort_ticks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &timestamp_sort_ticks_)));
          set_has_timestamp_sort_ticks();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(185)) goto parse_relocate_live_entries_ticks;
        break;
      }

      // required fixed64 relocate_live_entries_ticks = 23;
      case 23: {
        if (tag == 185) {
         parse_relocate_live_entries_ticks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &relocate_live_entries_ticks_)));
          set_has_relocate_live_entries_ticks();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(193)) goto parse_wait_for_free_survivors_ticks;
        break;
      }

      // required fixed64 wait_for_free_survivors_ticks = 24;
      case 24: {
        if (tag == 193) {
         parse_wait_for_free_survivors_ticks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &wait_for_free_survivors_ticks_)));
          set_has_wait_for_free_survivors_ticks();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(201)) goto parse_cleaning_complete_ticks;
        break;
      }

      // required fixed64 cleaning_complete_ticks = 25;
      case 25: {
        if (tag == 201) {
         parse_cleaning_complete_ticks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &cleaning_complete_ticks_)));
          set_has_cleaning_complete_ticks();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(209)) goto parse_relocation_callback_ticks;
        break;
      }

      // required fixed64 relocation_callback_ticks = 26;
      case 26: {
        if (tag == 209) {
         parse_relocation_callback_ticks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &relocation_callback_ticks_)));
          set_has_relocation_callback_ticks();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(217)) goto parse_relocation_append_ticks;
        break;
      }

      // required fixed64 relocation_append_ticks = 27;
      case 27: {
        if (tag == 217) {
         parse_relocation_append_ticks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &relocation_append_ticks_)));
          set_has_relocation_append_ticks();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(225)) goto parse_close_survivor_ticks;
        break;
      }

      // required fixed64 close_survivor_ticks = 28;
      case 28: {
        if (tag == 225) {
         parse_close_survivor_ticks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &close_survivor_ticks_)));
          set_has_close_survivor_ticks();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(233)) goto parse_survivor_sync_ticks;
        break;
      }

      // required fixed64 survivor_sync_ticks = 29;
      case 29: {
        if (tag == 233) {
         parse_survivor_sync_ticks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &survivor_sync_ticks_)));
          set_has_survivor_sync_ticks();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_cleaned_segment_memory_histogram;
        break;
      }

      // required .RAMCloud.ProtoBuf.Histogram cleaned_segment_memory_histogram = 30;
      case 30: {
        if (tag == 242) {
         parse_cleaned_segment_memory_histogram:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cleaned_segment_memory_histogram()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(250)) goto parse_cleaned_segment_disk_histogram;
        break;
      }

      // required .RAMCloud.ProtoBuf.Histogram cleaned_segment_disk_histogram = 31;
      case 31: {
        if (tag == 250) {
         parse_cleaned_segment_disk_histogram:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cleaned_segment_disk_histogram()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse_all_segments_disk_histogram;
        break;
      }

      // required .RAMCloud.ProtoBuf.Histogram all_segments_disk_histogram = 32;
      case 32: {
        if (tag == 258) {
         parse_all_segments_disk_histogram:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_all_segments_disk_histogram()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics)
  return false;
#undef DO_
}

void LogMetrics_CleanerMetrics_OnDiskMetrics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics)
  // required fixed64 total_bytes_appended_to_survivors = 1;
  if (has_total_bytes_appended_to_survivors()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->total_bytes_appended_to_survivors(), output);
  }

  // required fixed64 total_memory_bytes_freed = 2;
  if (has_total_memory_bytes_freed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->total_memory_bytes_freed(), output);
  }

  // required fixed64 total_disk_bytes_freed = 3;
  if (has_total_disk_bytes_freed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->total_disk_bytes_freed(), output);
  }

  // required fixed64 total_memory_bytes_in_cleaned_segments = 4;
  if (has_total_memory_bytes_in_cleaned_segments()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->total_memory_bytes_in_cleaned_segments(), output);
  }

  // required fixed64 total_disk_bytes_in_cleaned_segments = 5;
  if (has_total_disk_bytes_in_cleaned_segments()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->total_disk_bytes_in_cleaned_segments(), output);
  }

  // required fixed64 total_relocation_callbacks = 6;
  if (has_total_relocation_callbacks()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->total_relocation_callbacks(), output);
  }

  // required fixed64 total_relocation_appends = 7;
  if (has_total_relocation_appends()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->total_relocation_appends(), output);
  }

  // required fixed64 total_segments_cleaned = 8;
  if (has_total_segments_cleaned()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(8, this->total_segments_cleaned(), output);
  }

  // required fixed64 total_empty_segments_cleaned = 9;
  if (has_total_empty_segments_cleaned()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(9, this->total_empty_segments_cleaned(), output);
  }

  // required fixed64 total_survivors_created = 10;
  if (has_total_survivors_created()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(10, this->total_survivors_created(), output);
  }

  // required fixed64 total_runs = 11;
  if (has_total_runs()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(11, this->total_runs(), output);
  }

  // required fixed64 total_low_disk_space_runs = 12;
  if (has_total_low_disk_space_runs()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(12, this->total_low_disk_space_runs(), output);
  }

  // required fixed64 memory_utilization_at_start_sum = 13;
  if (has_memory_utilization_at_start_sum()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(13, this->memory_utilization_at_start_sum(), output);
  }

  // repeated fixed64 total_entries_scanned = 14;
  for (int i = 0; i < this->total_entries_scanned_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      14, this->total_entries_scanned(i), output);
  }

  // repeated fixed64 total_live_entries_scanned = 15;
  for (int i = 0; i < this->total_live_entries_scanned_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      15, this->total_live_entries_scanned(i), output);
  }

  // repeated fixed64 total_scanned_entry_lengths = 16;
  for (int i = 0; i < this->total_scanned_entry_lengths_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      16, this->total_scanned_entry_lengths(i), output);
  }

  // repeated fixed64 total_live_scanned_entry_lengths = 17;
  for (int i = 0; i < this->total_live_scanned_entry_lengths_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      17, this->total_live_scanned_entry_lengths(i), output);
  }

  // required fixed64 total_ticks = 18;
  if (has_total_ticks()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(18, this->total_ticks(), output);
  }

  // required fixed64 get_segments_to_clean_ticks = 19;
  if (has_get_segments_to_clean_ticks()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(19, this->get_segments_to_clean_ticks(), output);
  }

  // required fixed64 cost_benefit_sort_ticks = 20;
  if (has_cost_benefit_sort_ticks()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(20, this->cost_benefit_sort_ticks(), output);
  }

  // required fixed64 get_sorted_entries_ticks = 21;
  if (has_get_sorted_entries_ticks()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(21, this->get_sorted_entries_ticks(), output);
  }

  // required fixed64 timestamp_sort_ticks = 22;
  if (has_timestamp_sort_ticks()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(22, this->timestamp_sort_ticks(), output);
  }

  // required fixed64 relocate_live_entries_ticks = 23;
  if (has_relocate_live_entries_ticks()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(23, this->relocate_live_entries_ticks(), output);
  }

  // required fixed64 wait_for_free_survivors_ticks = 24;
  if (has_wait_for_free_survivors_ticks()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(24, this->wait_for_free_survivors_ticks(), output);
  }

  // required fixed64 cleaning_complete_ticks = 25;
  if (has_cleaning_complete_ticks()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(25, this->cleaning_complete_ticks(), output);
  }

  // required fixed64 relocation_callback_ticks = 26;
  if (has_relocation_callback_ticks()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(26, this->relocation_callback_ticks(), output);
  }

  // required fixed64 relocation_append_ticks = 27;
  if (has_relocation_append_ticks()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(27, this->relocation_append_ticks(), output);
  }

  // required fixed64 close_survivor_ticks = 28;
  if (has_close_survivor_ticks()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(28, this->close_survivor_ticks(), output);
  }

  // required fixed64 survivor_sync_ticks = 29;
  if (has_survivor_sync_ticks()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(29, this->survivor_sync_ticks(), output);
  }

  // required .RAMCloud.ProtoBuf.Histogram cleaned_segment_memory_histogram = 30;
  if (has_cleaned_segment_memory_histogram()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, *this->cleaned_segment_memory_histogram_, output);
  }

  // required .RAMCloud.ProtoBuf.Histogram cleaned_segment_disk_histogram = 31;
  if (has_cleaned_segment_disk_histogram()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, *this->cleaned_segment_disk_histogram_, output);
  }

  // required .RAMCloud.ProtoBuf.Histogram all_segments_disk_histogram = 32;
  if (has_all_segments_disk_histogram()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, *this->all_segments_disk_histogram_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics)
}

::google::protobuf::uint8* LogMetrics_CleanerMetrics_OnDiskMetrics::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics)
  // required fixed64 total_bytes_appended_to_survivors = 1;
  if (has_total_bytes_appended_to_survivors()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->total_bytes_appended_to_survivors(), target);
  }

  // required fixed64 total_memory_bytes_freed = 2;
  if (has_total_memory_bytes_freed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->total_memory_bytes_freed(), target);
  }

  // required fixed64 total_disk_bytes_freed = 3;
  if (has_total_disk_bytes_freed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->total_disk_bytes_freed(), target);
  }

  // required fixed64 total_memory_bytes_in_cleaned_segments = 4;
  if (has_total_memory_bytes_in_cleaned_segments()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->total_memory_bytes_in_cleaned_segments(), target);
  }

  // required fixed64 total_disk_bytes_in_cleaned_segments = 5;
  if (has_total_disk_bytes_in_cleaned_segments()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->total_disk_bytes_in_cleaned_segments(), target);
  }

  // required fixed64 total_relocation_callbacks = 6;
  if (has_total_relocation_callbacks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->total_relocation_callbacks(), target);
  }

  // required fixed64 total_relocation_appends = 7;
  if (has_total_relocation_appends()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->total_relocation_appends(), target);
  }

  // required fixed64 total_segments_cleaned = 8;
  if (has_total_segments_cleaned()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(8, this->total_segments_cleaned(), target);
  }

  // required fixed64 total_empty_segments_cleaned = 9;
  if (has_total_empty_segments_cleaned()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(9, this->total_empty_segments_cleaned(), target);
  }

  // required fixed64 total_survivors_created = 10;
  if (has_total_survivors_created()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(10, this->total_survivors_created(), target);
  }

  // required fixed64 total_runs = 11;
  if (has_total_runs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(11, this->total_runs(), target);
  }

  // required fixed64 total_low_disk_space_runs = 12;
  if (has_total_low_disk_space_runs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(12, this->total_low_disk_space_runs(), target);
  }

  // required fixed64 memory_utilization_at_start_sum = 13;
  if (has_memory_utilization_at_start_sum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(13, this->memory_utilization_at_start_sum(), target);
  }

  // repeated fixed64 total_entries_scanned = 14;
  for (int i = 0; i < this->total_entries_scanned_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(14, this->total_entries_scanned(i), target);
  }

  // repeated fixed64 total_live_entries_scanned = 15;
  for (int i = 0; i < this->total_live_entries_scanned_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(15, this->total_live_entries_scanned(i), target);
  }

  // repeated fixed64 total_scanned_entry_lengths = 16;
  for (int i = 0; i < this->total_scanned_entry_lengths_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(16, this->total_scanned_entry_lengths(i), target);
  }

  // repeated fixed64 total_live_scanned_entry_lengths = 17;
  for (int i = 0; i < this->total_live_scanned_entry_lengths_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(17, this->total_live_scanned_entry_lengths(i), target);
  }

  // required fixed64 total_ticks = 18;
  if (has_total_ticks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(18, this->total_ticks(), target);
  }

  // required fixed64 get_segments_to_clean_ticks = 19;
  if (has_get_segments_to_clean_ticks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(19, this->get_segments_to_clean_ticks(), target);
  }

  // required fixed64 cost_benefit_sort_ticks = 20;
  if (has_cost_benefit_sort_ticks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(20, this->cost_benefit_sort_ticks(), target);
  }

  // required fixed64 get_sorted_entries_ticks = 21;
  if (has_get_sorted_entries_ticks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(21, this->get_sorted_entries_ticks(), target);
  }

  // required fixed64 timestamp_sort_ticks = 22;
  if (has_timestamp_sort_ticks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(22, this->timestamp_sort_ticks(), target);
  }

  // required fixed64 relocate_live_entries_ticks = 23;
  if (has_relocate_live_entries_ticks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(23, this->relocate_live_entries_ticks(), target);
  }

  // required fixed64 wait_for_free_survivors_ticks = 24;
  if (has_wait_for_free_survivors_ticks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(24, this->wait_for_free_survivors_ticks(), target);
  }

  // required fixed64 cleaning_complete_ticks = 25;
  if (has_cleaning_complete_ticks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(25, this->cleaning_complete_ticks(), target);
  }

  // required fixed64 relocation_callback_ticks = 26;
  if (has_relocation_callback_ticks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(26, this->relocation_callback_ticks(), target);
  }

  // required fixed64 relocation_append_ticks = 27;
  if (has_relocation_append_ticks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(27, this->relocation_append_ticks(), target);
  }

  // required fixed64 close_survivor_ticks = 28;
  if (has_close_survivor_ticks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(28, this->close_survivor_ticks(), target);
  }

  // required fixed64 survivor_sync_ticks = 29;
  if (has_survivor_sync_ticks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(29, this->survivor_sync_ticks(), target);
  }

  // required .RAMCloud.ProtoBuf.Histogram cleaned_segment_memory_histogram = 30;
  if (has_cleaned_segment_memory_histogram()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        30, *this->cleaned_segment_memory_histogram_, false, target);
  }

  // required .RAMCloud.ProtoBuf.Histogram cleaned_segment_disk_histogram = 31;
  if (has_cleaned_segment_disk_histogram()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        31, *this->cleaned_segment_disk_histogram_, false, target);
  }

  // required .RAMCloud.ProtoBuf.Histogram all_segments_disk_histogram = 32;
  if (has_all_segments_disk_histogram()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        32, *this->all_segments_disk_histogram_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics)
  return target;
}

int LogMetrics_CleanerMetrics_OnDiskMetrics::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics)
  int total_size = 0;

  if (has_total_bytes_appended_to_survivors()) {
    // required fixed64 total_bytes_appended_to_survivors = 1;
    total_size += 1 + 8;
  }

  if (has_total_memory_bytes_freed()) {
    // required fixed64 total_memory_bytes_freed = 2;
    total_size += 1 + 8;
  }

  if (has_total_disk_bytes_freed()) {
    // required fixed64 total_disk_bytes_freed = 3;
    total_size += 1 + 8;
  }

  if (has_total_memory_bytes_in_cleaned_segments()) {
    // required fixed64 total_memory_bytes_in_cleaned_segments = 4;
    total_size += 1 + 8;
  }

  if (has_total_disk_bytes_in_cleaned_segments()) {
    // required fixed64 total_disk_bytes_in_cleaned_segments = 5;
    total_size += 1 + 8;
  }

  if (has_total_relocation_callbacks()) {
    // required fixed64 total_relocation_callbacks = 6;
    total_size += 1 + 8;
  }

  if (has_total_relocation_appends()) {
    // required fixed64 total_relocation_appends = 7;
    total_size += 1 + 8;
  }

  if (has_total_segments_cleaned()) {
    // required fixed64 total_segments_cleaned = 8;
    total_size += 1 + 8;
  }

  if (has_total_empty_segments_cleaned()) {
    // required fixed64 total_empty_segments_cleaned = 9;
    total_size += 1 + 8;
  }

  if (has_total_survivors_created()) {
    // required fixed64 total_survivors_created = 10;
    total_size += 1 + 8;
  }

  if (has_total_runs()) {
    // required fixed64 total_runs = 11;
    total_size += 1 + 8;
  }

  if (has_total_low_disk_space_runs()) {
    // required fixed64 total_low_disk_space_runs = 12;
    total_size += 1 + 8;
  }

  if (has_memory_utilization_at_start_sum()) {
    // required fixed64 memory_utilization_at_start_sum = 13;
    total_size += 1 + 8;
  }

  if (has_total_ticks()) {
    // required fixed64 total_ticks = 18;
    total_size += 2 + 8;
  }

  if (has_get_segments_to_clean_ticks()) {
    // required fixed64 get_segments_to_clean_ticks = 19;
    total_size += 2 + 8;
  }

  if (has_cost_benefit_sort_ticks()) {
    // required fixed64 cost_benefit_sort_ticks = 20;
    total_size += 2 + 8;
  }

  if (has_get_sorted_entries_ticks()) {
    // required fixed64 get_sorted_entries_ticks = 21;
    total_size += 2 + 8;
  }

  if (has_timestamp_sort_ticks()) {
    // required fixed64 timestamp_sort_ticks = 22;
    total_size += 2 + 8;
  }

  if (has_relocate_live_entries_ticks()) {
    // required fixed64 relocate_live_entries_ticks = 23;
    total_size += 2 + 8;
  }

  if (has_wait_for_free_survivors_ticks()) {
    // required fixed64 wait_for_free_survivors_ticks = 24;
    total_size += 2 + 8;
  }

  if (has_cleaning_complete_ticks()) {
    // required fixed64 cleaning_complete_ticks = 25;
    total_size += 2 + 8;
  }

  if (has_relocation_callback_ticks()) {
    // required fixed64 relocation_callback_ticks = 26;
    total_size += 2 + 8;
  }

  if (has_relocation_append_ticks()) {
    // required fixed64 relocation_append_ticks = 27;
    total_size += 2 + 8;
  }

  if (has_close_survivor_ticks()) {
    // required fixed64 close_survivor_ticks = 28;
    total_size += 2 + 8;
  }

  if (has_survivor_sync_ticks()) {
    // required fixed64 survivor_sync_ticks = 29;
    total_size += 2 + 8;
  }

  if (has_cleaned_segment_memory_histogram()) {
    // required .RAMCloud.ProtoBuf.Histogram cleaned_segment_memory_histogram = 30;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cleaned_segment_memory_histogram_);
  }

  if (has_cleaned_segment_disk_histogram()) {
    // required .RAMCloud.ProtoBuf.Histogram cleaned_segment_disk_histogram = 31;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cleaned_segment_disk_histogram_);
  }

  if (has_all_segments_disk_histogram()) {
    // required .RAMCloud.ProtoBuf.Histogram all_segments_disk_histogram = 32;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->all_segments_disk_histogram_);
  }

  return total_size;
}
int LogMetrics_CleanerMetrics_OnDiskMetrics::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics)
  int total_size = 0;

  if (((_has_bits_[0] & 0xfffe1fff) ^ 0xfffe1fff) == 0) {  // All required fields are present.
    // required fixed64 total_bytes_appended_to_survivors = 1;
    total_size += 1 + 8;

    // required fixed64 total_memory_bytes_freed = 2;
    total_size += 1 + 8;

    // required fixed64 total_disk_bytes_freed = 3;
    total_size += 1 + 8;

    // required fixed64 total_memory_bytes_in_cleaned_segments = 4;
    total_size += 1 + 8;

    // required fixed64 total_disk_bytes_in_cleaned_segments = 5;
    total_size += 1 + 8;

    // required fixed64 total_relocation_callbacks = 6;
    total_size += 1 + 8;

    // required fixed64 total_relocation_appends = 7;
    total_size += 1 + 8;

    // required fixed64 total_segments_cleaned = 8;
    total_size += 1 + 8;

    // required fixed64 total_empty_segments_cleaned = 9;
    total_size += 1 + 8;

    // required fixed64 total_survivors_created = 10;
    total_size += 1 + 8;

    // required fixed64 total_runs = 11;
    total_size += 1 + 8;

    // required fixed64 total_low_disk_space_runs = 12;
    total_size += 1 + 8;

    // required fixed64 memory_utilization_at_start_sum = 13;
    total_size += 1 + 8;

    // required fixed64 total_ticks = 18;
    total_size += 2 + 8;

    // required fixed64 get_segments_to_clean_ticks = 19;
    total_size += 2 + 8;

    // required fixed64 cost_benefit_sort_ticks = 20;
    total_size += 2 + 8;

    // required fixed64 get_sorted_entries_ticks = 21;
    total_size += 2 + 8;

    // required fixed64 timestamp_sort_ticks = 22;
    total_size += 2 + 8;

    // required fixed64 relocate_live_entries_ticks = 23;
    total_size += 2 + 8;

    // required fixed64 wait_for_free_survivors_ticks = 24;
    total_size += 2 + 8;

    // required fixed64 cleaning_complete_ticks = 25;
    total_size += 2 + 8;

    // required fixed64 relocation_callback_ticks = 26;
    total_size += 2 + 8;

    // required fixed64 relocation_append_ticks = 27;
    total_size += 2 + 8;

    // required fixed64 close_survivor_ticks = 28;
    total_size += 2 + 8;

    // required fixed64 survivor_sync_ticks = 29;
    total_size += 2 + 8;

    // required .RAMCloud.ProtoBuf.Histogram cleaned_segment_memory_histogram = 30;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cleaned_segment_memory_histogram_);

    // required .RAMCloud.ProtoBuf.Histogram cleaned_segment_disk_histogram = 31;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cleaned_segment_disk_histogram_);

    // required .RAMCloud.ProtoBuf.Histogram all_segments_disk_histogram = 32;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->all_segments_disk_histogram_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated fixed64 total_entries_scanned = 14;
  {
    int data_size = 0;
    data_size = 8 * this->total_entries_scanned_size();
    total_size += 1 * this->total_entries_scanned_size() + data_size;
  }

  // repeated fixed64 total_live_entries_scanned = 15;
  {
    int data_size = 0;
    data_size = 8 * this->total_live_entries_scanned_size();
    total_size += 1 * this->total_live_entries_scanned_size() + data_size;
  }

  // repeated fixed64 total_scanned_entry_lengths = 16;
  {
    int data_size = 0;
    data_size = 8 * this->total_scanned_entry_lengths_size();
    total_size += 2 * this->total_scanned_entry_lengths_size() + data_size;
  }

  // repeated fixed64 total_live_scanned_entry_lengths = 17;
  {
    int data_size = 0;
    data_size = 8 * this->total_live_scanned_entry_lengths_size();
    total_size += 2 * this->total_live_scanned_entry_lengths_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogMetrics_CleanerMetrics_OnDiskMetrics::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LogMetrics_CleanerMetrics_OnDiskMetrics* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LogMetrics_CleanerMetrics_OnDiskMetrics>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics)
    MergeFrom(*source);
  }
}

void LogMetrics_CleanerMetrics_OnDiskMetrics::MergeFrom(const LogMetrics_CleanerMetrics_OnDiskMetrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  total_entries_scanned_.MergeFrom(from.total_entries_scanned_);
  total_live_entries_scanned_.MergeFrom(from.total_live_entries_scanned_);
  total_scanned_entry_lengths_.MergeFrom(from.total_scanned_entry_lengths_);
  total_live_scanned_entry_lengths_.MergeFrom(from.total_live_scanned_entry_lengths_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total_bytes_appended_to_survivors()) {
      set_total_bytes_appended_to_survivors(from.total_bytes_appended_to_survivors());
    }
    if (from.has_total_memory_bytes_freed()) {
      set_total_memory_bytes_freed(from.total_memory_bytes_freed());
    }
    if (from.has_total_disk_bytes_freed()) {
      set_total_disk_bytes_freed(from.total_disk_bytes_freed());
    }
    if (from.has_total_memory_bytes_in_cleaned_segments()) {
      set_total_memory_bytes_in_cleaned_segments(from.total_memory_bytes_in_cleaned_segments());
    }
    if (from.has_total_disk_bytes_in_cleaned_segments()) {
      set_total_disk_bytes_in_cleaned_segments(from.total_disk_bytes_in_cleaned_segments());
    }
    if (from.has_total_relocation_callbacks()) {
      set_total_relocation_callbacks(from.total_relocation_callbacks());
    }
    if (from.has_total_relocation_appends()) {
      set_total_relocation_appends(from.total_relocation_appends());
    }
    if (from.has_total_segments_cleaned()) {
      set_total_segments_cleaned(from.total_segments_cleaned());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_total_empty_segments_cleaned()) {
      set_total_empty_segments_cleaned(from.total_empty_segments_cleaned());
    }
    if (from.has_total_survivors_created()) {
      set_total_survivors_created(from.total_survivors_created());
    }
    if (from.has_total_runs()) {
      set_total_runs(from.total_runs());
    }
    if (from.has_total_low_disk_space_runs()) {
      set_total_low_disk_space_runs(from.total_low_disk_space_runs());
    }
    if (from.has_memory_utilization_at_start_sum()) {
      set_memory_utilization_at_start_sum(from.memory_utilization_at_start_sum());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_total_ticks()) {
      set_total_ticks(from.total_ticks());
    }
    if (from.has_get_segments_to_clean_ticks()) {
      set_get_segments_to_clean_ticks(from.get_segments_to_clean_ticks());
    }
    if (from.has_cost_benefit_sort_ticks()) {
      set_cost_benefit_sort_ticks(from.cost_benefit_sort_ticks());
    }
    if (from.has_get_sorted_entries_ticks()) {
      set_get_sorted_entries_ticks(from.get_sorted_entries_ticks());
    }
    if (from.has_timestamp_sort_ticks()) {
      set_timestamp_sort_ticks(from.timestamp_sort_ticks());
    }
    if (from.has_relocate_live_entries_ticks()) {
      set_relocate_live_entries_ticks(from.relocate_live_entries_ticks());
    }
    if (from.has_wait_for_free_survivors_ticks()) {
      set_wait_for_free_survivors_ticks(from.wait_for_free_survivors_ticks());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_cleaning_complete_ticks()) {
      set_cleaning_complete_ticks(from.cleaning_complete_ticks());
    }
    if (from.has_relocation_callback_ticks()) {
      set_relocation_callback_ticks(from.relocation_callback_ticks());
    }
    if (from.has_relocation_append_ticks()) {
      set_relocation_append_ticks(from.relocation_append_ticks());
    }
    if (from.has_close_survivor_ticks()) {
      set_close_survivor_ticks(from.close_survivor_ticks());
    }
    if (from.has_survivor_sync_ticks()) {
      set_survivor_sync_ticks(from.survivor_sync_ticks());
    }
    if (from.has_cleaned_segment_memory_histogram()) {
      mutable_cleaned_segment_memory_histogram()->::RAMCloud::ProtoBuf::Histogram::MergeFrom(from.cleaned_segment_memory_histogram());
    }
    if (from.has_cleaned_segment_disk_histogram()) {
      mutable_cleaned_segment_disk_histogram()->::RAMCloud::ProtoBuf::Histogram::MergeFrom(from.cleaned_segment_disk_histogram());
    }
    if (from.has_all_segments_disk_histogram()) {
      mutable_all_segments_disk_histogram()->::RAMCloud::ProtoBuf::Histogram::MergeFrom(from.all_segments_disk_histogram());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LogMetrics_CleanerMetrics_OnDiskMetrics::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogMetrics_CleanerMetrics_OnDiskMetrics::CopyFrom(const LogMetrics_CleanerMetrics_OnDiskMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogMetrics_CleanerMetrics_OnDiskMetrics::IsInitialized() const {
  if ((_has_bits_[0] & 0xfffe1fff) != 0xfffe1fff) return false;

  if (has_cleaned_segment_memory_histogram()) {
    if (!this->cleaned_segment_memory_histogram_->IsInitialized()) return false;
  }
  if (has_cleaned_segment_disk_histogram()) {
    if (!this->cleaned_segment_disk_histogram_->IsInitialized()) return false;
  }
  if (has_all_segments_disk_histogram()) {
    if (!this->all_segments_disk_histogram_->IsInitialized()) return false;
  }
  return true;
}

void LogMetrics_CleanerMetrics_OnDiskMetrics::Swap(LogMetrics_CleanerMetrics_OnDiskMetrics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::InternalSwap(LogMetrics_CleanerMetrics_OnDiskMetrics* other) {
  std::swap(total_bytes_appended_to_survivors_, other->total_bytes_appended_to_survivors_);
  std::swap(total_memory_bytes_freed_, other->total_memory_bytes_freed_);
  std::swap(total_disk_bytes_freed_, other->total_disk_bytes_freed_);
  std::swap(total_memory_bytes_in_cleaned_segments_, other->total_memory_bytes_in_cleaned_segments_);
  std::swap(total_disk_bytes_in_cleaned_segments_, other->total_disk_bytes_in_cleaned_segments_);
  std::swap(total_relocation_callbacks_, other->total_relocation_callbacks_);
  std::swap(total_relocation_appends_, other->total_relocation_appends_);
  std::swap(total_segments_cleaned_, other->total_segments_cleaned_);
  std::swap(total_empty_segments_cleaned_, other->total_empty_segments_cleaned_);
  std::swap(total_survivors_created_, other->total_survivors_created_);
  std::swap(total_runs_, other->total_runs_);
  std::swap(total_low_disk_space_runs_, other->total_low_disk_space_runs_);
  std::swap(memory_utilization_at_start_sum_, other->memory_utilization_at_start_sum_);
  total_entries_scanned_.UnsafeArenaSwap(&other->total_entries_scanned_);
  total_live_entries_scanned_.UnsafeArenaSwap(&other->total_live_entries_scanned_);
  total_scanned_entry_lengths_.UnsafeArenaSwap(&other->total_scanned_entry_lengths_);
  total_live_scanned_entry_lengths_.UnsafeArenaSwap(&other->total_live_scanned_entry_lengths_);
  std::swap(total_ticks_, other->total_ticks_);
  std::swap(get_segments_to_clean_ticks_, other->get_segments_to_clean_ticks_);
  std::swap(cost_benefit_sort_ticks_, other->cost_benefit_sort_ticks_);
  std::swap(get_sorted_entries_ticks_, other->get_sorted_entries_ticks_);
  std::swap(timestamp_sort_ticks_, other->timestamp_sort_ticks_);
  std::swap(relocate_live_entries_ticks_, other->relocate_live_entries_ticks_);
  std::swap(wait_for_free_survivors_ticks_, other->wait_for_free_survivors_ticks_);
  std::swap(cleaning_complete_ticks_, other->cleaning_complete_ticks_);
  std::swap(relocation_callback_ticks_, other->relocation_callback_ticks_);
  std::swap(relocation_append_ticks_, other->relocation_append_ticks_);
  std::swap(close_survivor_ticks_, other->close_survivor_ticks_);
  std::swap(survivor_sync_ticks_, other->survivor_sync_ticks_);
  std::swap(cleaned_segment_memory_histogram_, other->cleaned_segment_memory_histogram_);
  std::swap(cleaned_segment_disk_histogram_, other->cleaned_segment_disk_histogram_);
  std::swap(all_segments_disk_histogram_, other->all_segments_disk_histogram_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogMetrics_CleanerMetrics_OnDiskMetrics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogMetrics_CleanerMetrics_OnDiskMetrics_descriptor_;
  metadata.reflection = LogMetrics_CleanerMetrics_OnDiskMetrics_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogMetrics_CleanerMetrics_ThreadMetrics::kActiveTicksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogMetrics_CleanerMetrics_ThreadMetrics::LogMetrics_CleanerMetrics_ThreadMetrics()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.ThreadMetrics)
}

void LogMetrics_CleanerMetrics_ThreadMetrics::InitAsDefaultInstance() {
}

LogMetrics_CleanerMetrics_ThreadMetrics::LogMetrics_CleanerMetrics_ThreadMetrics(const LogMetrics_CleanerMetrics_ThreadMetrics& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.ThreadMetrics)
}

void LogMetrics_CleanerMetrics_ThreadMetrics::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogMetrics_CleanerMetrics_ThreadMetrics::~LogMetrics_CleanerMetrics_ThreadMetrics() {
  // @@protoc_insertion_point(destructor:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.ThreadMetrics)
  SharedDtor();
}

void LogMetrics_CleanerMetrics_ThreadMetrics::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogMetrics_CleanerMetrics_ThreadMetrics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogMetrics_CleanerMetrics_ThreadMetrics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogMetrics_CleanerMetrics_ThreadMetrics_descriptor_;
}

const LogMetrics_CleanerMetrics_ThreadMetrics& LogMetrics_CleanerMetrics_ThreadMetrics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogMetrics_2eproto();
  return *default_instance_;
}

LogMetrics_CleanerMetrics_ThreadMetrics* LogMetrics_CleanerMetrics_ThreadMetrics::default_instance_ = NULL;

LogMetrics_CleanerMetrics_ThreadMetrics* LogMetrics_CleanerMetrics_ThreadMetrics::New(::google::protobuf::Arena* arena) const {
  LogMetrics_CleanerMetrics_ThreadMetrics* n = new LogMetrics_CleanerMetrics_ThreadMetrics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogMetrics_CleanerMetrics_ThreadMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.ThreadMetrics)
  active_ticks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LogMetrics_CleanerMetrics_ThreadMetrics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.ThreadMetrics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed64 active_ticks = 1;
      case 1: {
        if (tag == 9) {
         parse_active_ticks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 9, input, this->mutable_active_ticks())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_active_ticks())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(9)) goto parse_active_ticks;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.ThreadMetrics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.ThreadMetrics)
  return false;
#undef DO_
}

void LogMetrics_CleanerMetrics_ThreadMetrics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.ThreadMetrics)
  // repeated fixed64 active_ticks = 1;
  for (int i = 0; i < this->active_ticks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      1, this->active_ticks(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.ThreadMetrics)
}

::google::protobuf::uint8* LogMetrics_CleanerMetrics_ThreadMetrics::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.ThreadMetrics)
  // repeated fixed64 active_ticks = 1;
  for (int i = 0; i < this->active_ticks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(1, this->active_ticks(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.ThreadMetrics)
  return target;
}

int LogMetrics_CleanerMetrics_ThreadMetrics::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.ThreadMetrics)
  int total_size = 0;

  // repeated fixed64 active_ticks = 1;
  {
    int data_size = 0;
    data_size = 8 * this->active_ticks_size();
    total_size += 1 * this->active_ticks_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogMetrics_CleanerMetrics_ThreadMetrics::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.ThreadMetrics)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LogMetrics_CleanerMetrics_ThreadMetrics* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LogMetrics_CleanerMetrics_ThreadMetrics>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.ThreadMetrics)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.ThreadMetrics)
    MergeFrom(*source);
  }
}

void LogMetrics_CleanerMetrics_ThreadMetrics::MergeFrom(const LogMetrics_CleanerMetrics_ThreadMetrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.ThreadMetrics)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  active_ticks_.MergeFrom(from.active_ticks_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LogMetrics_CleanerMetrics_ThreadMetrics::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.ThreadMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogMetrics_CleanerMetrics_ThreadMetrics::CopyFrom(const LogMetrics_CleanerMetrics_ThreadMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.ThreadMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogMetrics_CleanerMetrics_ThreadMetrics::IsInitialized() const {

  return true;
}

void LogMetrics_CleanerMetrics_ThreadMetrics::Swap(LogMetrics_CleanerMetrics_ThreadMetrics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogMetrics_CleanerMetrics_ThreadMetrics::InternalSwap(LogMetrics_CleanerMetrics_ThreadMetrics* other) {
  active_ticks_.UnsafeArenaSwap(&other->active_ticks_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogMetrics_CleanerMetrics_ThreadMetrics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogMetrics_CleanerMetrics_ThreadMetrics_descriptor_;
  metadata.reflection = LogMetrics_CleanerMetrics_ThreadMetrics_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogMetrics_CleanerMetrics::kPollUsecFieldNumber;
const int LogMetrics_CleanerMetrics::kMaxCleanableMemoryUtilizationFieldNumber;
const int LogMetrics_CleanerMetrics::kLiveSegmentsPerDiskPassFieldNumber;
const int LogMetrics_CleanerMetrics::kSurvivorSegmentsToReserveFieldNumber;
const int LogMetrics_CleanerMetrics::kMinMemoryUtilizationFieldNumber;
const int LogMetrics_CleanerMetrics::kMinDiskUtilizationFieldNumber;
const int LogMetrics_CleanerMetrics::kDoWorkTicksFieldNumber;
const int LogMetrics_CleanerMetrics::kDoWorkSleepTicksFieldNumber;
const int LogMetrics_CleanerMetrics::kInMemoryMetricsFieldNumber;
const int LogMetrics_CleanerMetrics::kOnDiskMetricsFieldNumber;
const int LogMetrics_CleanerMetrics::kThreadMetricsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogMetrics_CleanerMetrics::LogMetrics_CleanerMetrics()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics)
}

void LogMetrics_CleanerMetrics::InitAsDefaultInstance() {
  in_memory_metrics_ = const_cast< ::RAMCloud::ProtoBuf::LogMetrics_CleanerMetrics_InMemoryMetrics*>(&::RAMCloud::ProtoBuf::LogMetrics_CleanerMetrics_InMemoryMetrics::default_instance());
  on_disk_metrics_ = const_cast< ::RAMCloud::ProtoBuf::LogMetrics_CleanerMetrics_OnDiskMetrics*>(&::RAMCloud::ProtoBuf::LogMetrics_CleanerMetrics_OnDiskMetrics::default_instance());
  thread_metrics_ = const_cast< ::RAMCloud::ProtoBuf::LogMetrics_CleanerMetrics_ThreadMetrics*>(&::RAMCloud::ProtoBuf::LogMetrics_CleanerMetrics_ThreadMetrics::default_instance());
}

LogMetrics_CleanerMetrics::LogMetrics_CleanerMetrics(const LogMetrics_CleanerMetrics& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics)
}

void LogMetrics_CleanerMetrics::SharedCtor() {
  _cached_size_ = 0;
  poll_usec_ = 0u;
  max_cleanable_memory_utilization_ = 0u;
  live_segments_per_disk_pass_ = 0u;
  survivor_segments_to_reserve_ = 0u;
  min_memory_utilization_ = 0u;
  min_disk_utilization_ = 0u;
  do_work_ticks_ = GOOGLE_ULONGLONG(0);
  do_work_sleep_ticks_ = GOOGLE_ULONGLONG(0);
  in_memory_metrics_ = NULL;
  on_disk_metrics_ = NULL;
  thread_metrics_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogMetrics_CleanerMetrics::~LogMetrics_CleanerMetrics() {
  // @@protoc_insertion_point(destructor:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics)
  SharedDtor();
}

void LogMetrics_CleanerMetrics::SharedDtor() {
  if (this != default_instance_) {
    delete in_memory_metrics_;
    delete on_disk_metrics_;
    delete thread_metrics_;
  }
}

void LogMetrics_CleanerMetrics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogMetrics_CleanerMetrics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogMetrics_CleanerMetrics_descriptor_;
}

const LogMetrics_CleanerMetrics& LogMetrics_CleanerMetrics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogMetrics_2eproto();
  return *default_instance_;
}

LogMetrics_CleanerMetrics* LogMetrics_CleanerMetrics::default_instance_ = NULL;

LogMetrics_CleanerMetrics* LogMetrics_CleanerMetrics::New(::google::protobuf::Arena* arena) const {
  LogMetrics_CleanerMetrics* n = new LogMetrics_CleanerMetrics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogMetrics_CleanerMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LogMetrics_CleanerMetrics, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LogMetrics_CleanerMetrics*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(poll_usec_, do_work_sleep_ticks_);
  }
  if (_has_bits_[8 / 32] & 1792u) {
    if (has_in_memory_metrics()) {
      if (in_memory_metrics_ != NULL) in_memory_metrics_->::RAMCloud::ProtoBuf::LogMetrics_CleanerMetrics_InMemoryMetrics::Clear();
    }
    if (has_on_disk_metrics()) {
      if (on_disk_metrics_ != NULL) on_disk_metrics_->::RAMCloud::ProtoBuf::LogMetrics_CleanerMetrics_OnDiskMetrics::Clear();
    }
    if (has_thread_metrics()) {
      if (thread_metrics_ != NULL) thread_metrics_->::RAMCloud::ProtoBuf::LogMetrics_CleanerMetrics_ThreadMetrics::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LogMetrics_CleanerMetrics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 poll_usec = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &poll_usec_)));
          set_has_poll_usec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_max_cleanable_memory_utilization;
        break;
      }

      // required fixed32 max_cleanable_memory_utilization = 2;
      case 2: {
        if (tag == 21) {
         parse_max_cleanable_memory_utilization:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &max_cleanable_memory_utilization_)));
          set_has_max_cleanable_memory_utilization();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_live_segments_per_disk_pass;
        break;
      }

      // required fixed32 live_segments_per_disk_pass = 3;
      case 3: {
        if (tag == 29) {
         parse_live_segments_per_disk_pass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &live_segments_per_disk_pass_)));
          set_has_live_segments_per_disk_pass();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_survivor_segments_to_reserve;
        break;
      }

      // required fixed32 survivor_segments_to_reserve = 4;
      case 4: {
        if (tag == 37) {
         parse_survivor_segments_to_reserve:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &survivor_segments_to_reserve_)));
          set_has_survivor_segments_to_reserve();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_min_memory_utilization;
        break;
      }

      // required fixed32 min_memory_utilization = 5;
      case 5: {
        if (tag == 45) {
         parse_min_memory_utilization:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &min_memory_utilization_)));
          set_has_min_memory_utilization();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_min_disk_utilization;
        break;
      }

      // required fixed32 min_disk_utilization = 6;
      case 6: {
        if (tag == 53) {
         parse_min_disk_utilization:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &min_disk_utilization_)));
          set_has_min_disk_utilization();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_do_work_ticks;
        break;
      }

      // required fixed64 do_work_ticks = 7;
      case 7: {
        if (tag == 57) {
         parse_do_work_ticks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &do_work_ticks_)));
          set_has_do_work_ticks();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_do_work_sleep_ticks;
        break;
      }

      // required fixed64 do_work_sleep_ticks = 8;
      case 8: {
        if (tag == 65) {
         parse_do_work_sleep_ticks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &do_work_sleep_ticks_)));
          set_has_do_work_sleep_ticks();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_in_memory_metrics;
        break;
      }

      // required .RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics in_memory_metrics = 9;
      case 9: {
        if (tag == 74) {
         parse_in_memory_metrics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_in_memory_metrics()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_on_disk_metrics;
        break;
      }

      // required .RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics on_disk_metrics = 10;
      case 10: {
        if (tag == 82) {
         parse_on_disk_metrics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_on_disk_metrics()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_thread_metrics;
        break;
      }

      // required .RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.ThreadMetrics thread_metrics = 11;
      case 11: {
        if (tag == 90) {
         parse_thread_metrics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_thread_metrics()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics)
  return false;
#undef DO_
}

void LogMetrics_CleanerMetrics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics)
  // required fixed32 poll_usec = 1;
  if (has_poll_usec()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->poll_usec(), output);
  }

  // required fixed32 max_cleanable_memory_utilization = 2;
  if (has_max_cleanable_memory_utilization()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->max_cleanable_memory_utilization(), output);
  }

  // required fixed32 live_segments_per_disk_pass = 3;
  if (has_live_segments_per_disk_pass()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->live_segments_per_disk_pass(), output);
  }

  // required fixed32 survivor_segments_to_reserve = 4;
  if (has_survivor_segments_to_reserve()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->survivor_segments_to_reserve(), output);
  }

  // required fixed32 min_memory_utilization = 5;
  if (has_min_memory_utilization()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->min_memory_utilization(), output);
  }

  // required fixed32 min_disk_utilization = 6;
  if (has_min_disk_utilization()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(6, this->min_disk_utilization(), output);
  }

  // required fixed64 do_work_ticks = 7;
  if (has_do_work_ticks()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->do_work_ticks(), output);
  }

  // required fixed64 do_work_sleep_ticks = 8;
  if (has_do_work_sleep_ticks()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(8, this->do_work_sleep_ticks(), output);
  }

  // required .RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics in_memory_metrics = 9;
  if (has_in_memory_metrics()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->in_memory_metrics_, output);
  }

  // required .RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics on_disk_metrics = 10;
  if (has_on_disk_metrics()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->on_disk_metrics_, output);
  }

  // required .RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.ThreadMetrics thread_metrics = 11;
  if (has_thread_metrics()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->thread_metrics_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics)
}

::google::protobuf::uint8* LogMetrics_CleanerMetrics::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics)
  // required fixed32 poll_usec = 1;
  if (has_poll_usec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->poll_usec(), target);
  }

  // required fixed32 max_cleanable_memory_utilization = 2;
  if (has_max_cleanable_memory_utilization()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->max_cleanable_memory_utilization(), target);
  }

  // required fixed32 live_segments_per_disk_pass = 3;
  if (has_live_segments_per_disk_pass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->live_segments_per_disk_pass(), target);
  }

  // required fixed32 survivor_segments_to_reserve = 4;
  if (has_survivor_segments_to_reserve()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->survivor_segments_to_reserve(), target);
  }

  // required fixed32 min_memory_utilization = 5;
  if (has_min_memory_utilization()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->min_memory_utilization(), target);
  }

  // required fixed32 min_disk_utilization = 6;
  if (has_min_disk_utilization()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(6, this->min_disk_utilization(), target);
  }

  // required fixed64 do_work_ticks = 7;
  if (has_do_work_ticks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->do_work_ticks(), target);
  }

  // required fixed64 do_work_sleep_ticks = 8;
  if (has_do_work_sleep_ticks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(8, this->do_work_sleep_ticks(), target);
  }

  // required .RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics in_memory_metrics = 9;
  if (has_in_memory_metrics()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->in_memory_metrics_, false, target);
  }

  // required .RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics on_disk_metrics = 10;
  if (has_on_disk_metrics()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->on_disk_metrics_, false, target);
  }

  // required .RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.ThreadMetrics thread_metrics = 11;
  if (has_thread_metrics()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->thread_metrics_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics)
  return target;
}

int LogMetrics_CleanerMetrics::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics)
  int total_size = 0;

  if (has_poll_usec()) {
    // required fixed32 poll_usec = 1;
    total_size += 1 + 4;
  }

  if (has_max_cleanable_memory_utilization()) {
    // required fixed32 max_cleanable_memory_utilization = 2;
    total_size += 1 + 4;
  }

  if (has_live_segments_per_disk_pass()) {
    // required fixed32 live_segments_per_disk_pass = 3;
    total_size += 1 + 4;
  }

  if (has_survivor_segments_to_reserve()) {
    // required fixed32 survivor_segments_to_reserve = 4;
    total_size += 1 + 4;
  }

  if (has_min_memory_utilization()) {
    // required fixed32 min_memory_utilization = 5;
    total_size += 1 + 4;
  }

  if (has_min_disk_utilization()) {
    // required fixed32 min_disk_utilization = 6;
    total_size += 1 + 4;
  }

  if (has_do_work_ticks()) {
    // required fixed64 do_work_ticks = 7;
    total_size += 1 + 8;
  }

  if (has_do_work_sleep_ticks()) {
    // required fixed64 do_work_sleep_ticks = 8;
    total_size += 1 + 8;
  }

  if (has_in_memory_metrics()) {
    // required .RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics in_memory_metrics = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->in_memory_metrics_);
  }

  if (has_on_disk_metrics()) {
    // required .RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics on_disk_metrics = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->on_disk_metrics_);
  }

  if (has_thread_metrics()) {
    // required .RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.ThreadMetrics thread_metrics = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->thread_metrics_);
  }

  return total_size;
}
int LogMetrics_CleanerMetrics::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics)
  int total_size = 0;

  if (((_has_bits_[0] & 0x000007ff) ^ 0x000007ff) == 0) {  // All required fields are present.
    // required fixed32 poll_usec = 1;
    total_size += 1 + 4;

    // required fixed32 max_cleanable_memory_utilization = 2;
    total_size += 1 + 4;

    // required fixed32 live_segments_per_disk_pass = 3;
    total_size += 1 + 4;

    // required fixed32 survivor_segments_to_reserve = 4;
    total_size += 1 + 4;

    // required fixed32 min_memory_utilization = 5;
    total_size += 1 + 4;

    // required fixed32 min_disk_utilization = 6;
    total_size += 1 + 4;

    // required fixed64 do_work_ticks = 7;
    total_size += 1 + 8;

    // required fixed64 do_work_sleep_ticks = 8;
    total_size += 1 + 8;

    // required .RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics in_memory_metrics = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->in_memory_metrics_);

    // required .RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics on_disk_metrics = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->on_disk_metrics_);

    // required .RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.ThreadMetrics thread_metrics = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->thread_metrics_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogMetrics_CleanerMetrics::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LogMetrics_CleanerMetrics* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LogMetrics_CleanerMetrics>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics)
    MergeFrom(*source);
  }
}

void LogMetrics_CleanerMetrics::MergeFrom(const LogMetrics_CleanerMetrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_poll_usec()) {
      set_poll_usec(from.poll_usec());
    }
    if (from.has_max_cleanable_memory_utilization()) {
      set_max_cleanable_memory_utilization(from.max_cleanable_memory_utilization());
    }
    if (from.has_live_segments_per_disk_pass()) {
      set_live_segments_per_disk_pass(from.live_segments_per_disk_pass());
    }
    if (from.has_survivor_segments_to_reserve()) {
      set_survivor_segments_to_reserve(from.survivor_segments_to_reserve());
    }
    if (from.has_min_memory_utilization()) {
      set_min_memory_utilization(from.min_memory_utilization());
    }
    if (from.has_min_disk_utilization()) {
      set_min_disk_utilization(from.min_disk_utilization());
    }
    if (from.has_do_work_ticks()) {
      set_do_work_ticks(from.do_work_ticks());
    }
    if (from.has_do_work_sleep_ticks()) {
      set_do_work_sleep_ticks(from.do_work_sleep_ticks());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_in_memory_metrics()) {
      mutable_in_memory_metrics()->::RAMCloud::ProtoBuf::LogMetrics_CleanerMetrics_InMemoryMetrics::MergeFrom(from.in_memory_metrics());
    }
    if (from.has_on_disk_metrics()) {
      mutable_on_disk_metrics()->::RAMCloud::ProtoBuf::LogMetrics_CleanerMetrics_OnDiskMetrics::MergeFrom(from.on_disk_metrics());
    }
    if (from.has_thread_metrics()) {
      mutable_thread_metrics()->::RAMCloud::ProtoBuf::LogMetrics_CleanerMetrics_ThreadMetrics::MergeFrom(from.thread_metrics());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LogMetrics_CleanerMetrics::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogMetrics_CleanerMetrics::CopyFrom(const LogMetrics_CleanerMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogMetrics_CleanerMetrics::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;

  if (has_in_memory_metrics()) {
    if (!this->in_memory_metrics_->IsInitialized()) return false;
  }
  if (has_on_disk_metrics()) {
    if (!this->on_disk_metrics_->IsInitialized()) return false;
  }
  return true;
}

void LogMetrics_CleanerMetrics::Swap(LogMetrics_CleanerMetrics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogMetrics_CleanerMetrics::InternalSwap(LogMetrics_CleanerMetrics* other) {
  std::swap(poll_usec_, other->poll_usec_);
  std::swap(max_cleanable_memory_utilization_, other->max_cleanable_memory_utilization_);
  std::swap(live_segments_per_disk_pass_, other->live_segments_per_disk_pass_);
  std::swap(survivor_segments_to_reserve_, other->survivor_segments_to_reserve_);
  std::swap(min_memory_utilization_, other->min_memory_utilization_);
  std::swap(min_disk_utilization_, other->min_disk_utilization_);
  std::swap(do_work_ticks_, other->do_work_ticks_);
  std::swap(do_work_sleep_ticks_, other->do_work_sleep_ticks_);
  std::swap(in_memory_metrics_, other->in_memory_metrics_);
  std::swap(on_disk_metrics_, other->on_disk_metrics_);
  std::swap(thread_metrics_, other->thread_metrics_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogMetrics_CleanerMetrics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogMetrics_CleanerMetrics_descriptor_;
  metadata.reflection = LogMetrics_CleanerMetrics_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogMetrics_SegletMetrics::kTotalSegletsFieldNumber;
const int LogMetrics_SegletMetrics::kTotalUsableSegletsFieldNumber;
const int LogMetrics_SegletMetrics::kEmergencyHeadPoolReserveFieldNumber;
const int LogMetrics_SegletMetrics::kEmergencyHeadPoolCountFieldNumber;
const int LogMetrics_SegletMetrics::kCleanerPoolReserveFieldNumber;
const int LogMetrics_SegletMetrics::kCleanerPoolCountFieldNumber;
const int LogMetrics_SegletMetrics::kDefaultPoolCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogMetrics_SegletMetrics::LogMetrics_SegletMetrics()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RAMCloud.ProtoBuf.LogMetrics.SegletMetrics)
}

void LogMetrics_SegletMetrics::InitAsDefaultInstance() {
}

LogMetrics_SegletMetrics::LogMetrics_SegletMetrics(const LogMetrics_SegletMetrics& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RAMCloud.ProtoBuf.LogMetrics.SegletMetrics)
}

void LogMetrics_SegletMetrics::SharedCtor() {
  _cached_size_ = 0;
  total_seglets_ = GOOGLE_ULONGLONG(0);
  total_usable_seglets_ = GOOGLE_ULONGLONG(0);
  emergency_head_pool_reserve_ = GOOGLE_ULONGLONG(0);
  emergency_head_pool_count_ = GOOGLE_ULONGLONG(0);
  cleaner_pool_reserve_ = GOOGLE_ULONGLONG(0);
  cleaner_pool_count_ = GOOGLE_ULONGLONG(0);
  default_pool_count_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogMetrics_SegletMetrics::~LogMetrics_SegletMetrics() {
  // @@protoc_insertion_point(destructor:RAMCloud.ProtoBuf.LogMetrics.SegletMetrics)
  SharedDtor();
}

void LogMetrics_SegletMetrics::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogMetrics_SegletMetrics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogMetrics_SegletMetrics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogMetrics_SegletMetrics_descriptor_;
}

const LogMetrics_SegletMetrics& LogMetrics_SegletMetrics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogMetrics_2eproto();
  return *default_instance_;
}

LogMetrics_SegletMetrics* LogMetrics_SegletMetrics::default_instance_ = NULL;

LogMetrics_SegletMetrics* LogMetrics_SegletMetrics::New(::google::protobuf::Arena* arena) const {
  LogMetrics_SegletMetrics* n = new LogMetrics_SegletMetrics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogMetrics_SegletMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:RAMCloud.ProtoBuf.LogMetrics.SegletMetrics)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LogMetrics_SegletMetrics, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LogMetrics_SegletMetrics*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(total_seglets_, default_pool_count_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LogMetrics_SegletMetrics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RAMCloud.ProtoBuf.LogMetrics.SegletMetrics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 total_seglets = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &total_seglets_)));
          set_has_total_seglets();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_total_usable_seglets;
        break;
      }

      // required fixed64 total_usable_seglets = 2;
      case 2: {
        if (tag == 17) {
         parse_total_usable_seglets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &total_usable_seglets_)));
          set_has_total_usable_seglets();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_emergency_head_pool_reserve;
        break;
      }

      // required fixed64 emergency_head_pool_reserve = 3;
      case 3: {
        if (tag == 25) {
         parse_emergency_head_pool_reserve:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &emergency_head_pool_reserve_)));
          set_has_emergency_head_pool_reserve();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_emergency_head_pool_count;
        break;
      }

      // required fixed64 emergency_head_pool_count = 4;
      case 4: {
        if (tag == 33) {
         parse_emergency_head_pool_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &emergency_head_pool_count_)));
          set_has_emergency_head_pool_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_cleaner_pool_reserve;
        break;
      }

      // required fixed64 cleaner_pool_reserve = 5;
      case 5: {
        if (tag == 41) {
         parse_cleaner_pool_reserve:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &cleaner_pool_reserve_)));
          set_has_cleaner_pool_reserve();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_cleaner_pool_count;
        break;
      }

      // required fixed64 cleaner_pool_count = 6;
      case 6: {
        if (tag == 49) {
         parse_cleaner_pool_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &cleaner_pool_count_)));
          set_has_cleaner_pool_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_default_pool_count;
        break;
      }

      // required fixed64 default_pool_count = 7;
      case 7: {
        if (tag == 57) {
         parse_default_pool_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &default_pool_count_)));
          set_has_default_pool_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RAMCloud.ProtoBuf.LogMetrics.SegletMetrics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RAMCloud.ProtoBuf.LogMetrics.SegletMetrics)
  return false;
#undef DO_
}

void LogMetrics_SegletMetrics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RAMCloud.ProtoBuf.LogMetrics.SegletMetrics)
  // required fixed64 total_seglets = 1;
  if (has_total_seglets()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->total_seglets(), output);
  }

  // required fixed64 total_usable_seglets = 2;
  if (has_total_usable_seglets()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->total_usable_seglets(), output);
  }

  // required fixed64 emergency_head_pool_reserve = 3;
  if (has_emergency_head_pool_reserve()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->emergency_head_pool_reserve(), output);
  }

  // required fixed64 emergency_head_pool_count = 4;
  if (has_emergency_head_pool_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->emergency_head_pool_count(), output);
  }

  // required fixed64 cleaner_pool_reserve = 5;
  if (has_cleaner_pool_reserve()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->cleaner_pool_reserve(), output);
  }

  // required fixed64 cleaner_pool_count = 6;
  if (has_cleaner_pool_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->cleaner_pool_count(), output);
  }

  // required fixed64 default_pool_count = 7;
  if (has_default_pool_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->default_pool_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RAMCloud.ProtoBuf.LogMetrics.SegletMetrics)
}

::google::protobuf::uint8* LogMetrics_SegletMetrics::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RAMCloud.ProtoBuf.LogMetrics.SegletMetrics)
  // required fixed64 total_seglets = 1;
  if (has_total_seglets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->total_seglets(), target);
  }

  // required fixed64 total_usable_seglets = 2;
  if (has_total_usable_seglets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->total_usable_seglets(), target);
  }

  // required fixed64 emergency_head_pool_reserve = 3;
  if (has_emergency_head_pool_reserve()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->emergency_head_pool_reserve(), target);
  }

  // required fixed64 emergency_head_pool_count = 4;
  if (has_emergency_head_pool_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->emergency_head_pool_count(), target);
  }

  // required fixed64 cleaner_pool_reserve = 5;
  if (has_cleaner_pool_reserve()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->cleaner_pool_reserve(), target);
  }

  // required fixed64 cleaner_pool_count = 6;
  if (has_cleaner_pool_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->cleaner_pool_count(), target);
  }

  // required fixed64 default_pool_count = 7;
  if (has_default_pool_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->default_pool_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RAMCloud.ProtoBuf.LogMetrics.SegletMetrics)
  return target;
}

int LogMetrics_SegletMetrics::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RAMCloud.ProtoBuf.LogMetrics.SegletMetrics)
  int total_size = 0;

  if (has_total_seglets()) {
    // required fixed64 total_seglets = 1;
    total_size += 1 + 8;
  }

  if (has_total_usable_seglets()) {
    // required fixed64 total_usable_seglets = 2;
    total_size += 1 + 8;
  }

  if (has_emergency_head_pool_reserve()) {
    // required fixed64 emergency_head_pool_reserve = 3;
    total_size += 1 + 8;
  }

  if (has_emergency_head_pool_count()) {
    // required fixed64 emergency_head_pool_count = 4;
    total_size += 1 + 8;
  }

  if (has_cleaner_pool_reserve()) {
    // required fixed64 cleaner_pool_reserve = 5;
    total_size += 1 + 8;
  }

  if (has_cleaner_pool_count()) {
    // required fixed64 cleaner_pool_count = 6;
    total_size += 1 + 8;
  }

  if (has_default_pool_count()) {
    // required fixed64 default_pool_count = 7;
    total_size += 1 + 8;
  }

  return total_size;
}
int LogMetrics_SegletMetrics::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:RAMCloud.ProtoBuf.LogMetrics.SegletMetrics)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required fixed64 total_seglets = 1;
    total_size += 1 + 8;

    // required fixed64 total_usable_seglets = 2;
    total_size += 1 + 8;

    // required fixed64 emergency_head_pool_reserve = 3;
    total_size += 1 + 8;

    // required fixed64 emergency_head_pool_count = 4;
    total_size += 1 + 8;

    // required fixed64 cleaner_pool_reserve = 5;
    total_size += 1 + 8;

    // required fixed64 cleaner_pool_count = 6;
    total_size += 1 + 8;

    // required fixed64 default_pool_count = 7;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogMetrics_SegletMetrics::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RAMCloud.ProtoBuf.LogMetrics.SegletMetrics)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LogMetrics_SegletMetrics* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LogMetrics_SegletMetrics>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RAMCloud.ProtoBuf.LogMetrics.SegletMetrics)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RAMCloud.ProtoBuf.LogMetrics.SegletMetrics)
    MergeFrom(*source);
  }
}

void LogMetrics_SegletMetrics::MergeFrom(const LogMetrics_SegletMetrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RAMCloud.ProtoBuf.LogMetrics.SegletMetrics)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total_seglets()) {
      set_total_seglets(from.total_seglets());
    }
    if (from.has_total_usable_seglets()) {
      set_total_usable_seglets(from.total_usable_seglets());
    }
    if (from.has_emergency_head_pool_reserve()) {
      set_emergency_head_pool_reserve(from.emergency_head_pool_reserve());
    }
    if (from.has_emergency_head_pool_count()) {
      set_emergency_head_pool_count(from.emergency_head_pool_count());
    }
    if (from.has_cleaner_pool_reserve()) {
      set_cleaner_pool_reserve(from.cleaner_pool_reserve());
    }
    if (from.has_cleaner_pool_count()) {
      set_cleaner_pool_count(from.cleaner_pool_count());
    }
    if (from.has_default_pool_count()) {
      set_default_pool_count(from.default_pool_count());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LogMetrics_SegletMetrics::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RAMCloud.ProtoBuf.LogMetrics.SegletMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogMetrics_SegletMetrics::CopyFrom(const LogMetrics_SegletMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RAMCloud.ProtoBuf.LogMetrics.SegletMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogMetrics_SegletMetrics::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void LogMetrics_SegletMetrics::Swap(LogMetrics_SegletMetrics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogMetrics_SegletMetrics::InternalSwap(LogMetrics_SegletMetrics* other) {
  std::swap(total_seglets_, other->total_seglets_);
  std::swap(total_usable_seglets_, other->total_usable_seglets_);
  std::swap(emergency_head_pool_reserve_, other->emergency_head_pool_reserve_);
  std::swap(emergency_head_pool_count_, other->emergency_head_pool_count_);
  std::swap(cleaner_pool_reserve_, other->cleaner_pool_reserve_);
  std::swap(cleaner_pool_count_, other->cleaner_pool_count_);
  std::swap(default_pool_count_, other->default_pool_count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogMetrics_SegletMetrics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogMetrics_SegletMetrics_descriptor_;
  metadata.reflection = LogMetrics_SegletMetrics_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogMetrics_SegmentMetrics::kSegmentsOnDiskHistogramFieldNumber;
const int LogMetrics_SegmentMetrics::kCurrentSegmentsOnDiskFieldNumber;
const int LogMetrics_SegmentMetrics::kTotalEntryCountsFieldNumber;
const int LogMetrics_SegmentMetrics::kTotalEntryLengthsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogMetrics_SegmentMetrics::LogMetrics_SegmentMetrics()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RAMCloud.ProtoBuf.LogMetrics.SegmentMetrics)
}

void LogMetrics_SegmentMetrics::InitAsDefaultInstance() {
  segments_on_disk_histogram_ = const_cast< ::RAMCloud::ProtoBuf::Histogram*>(&::RAMCloud::ProtoBuf::Histogram::default_instance());
}

LogMetrics_SegmentMetrics::LogMetrics_SegmentMetrics(const LogMetrics_SegmentMetrics& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RAMCloud.ProtoBuf.LogMetrics.SegmentMetrics)
}

void LogMetrics_SegmentMetrics::SharedCtor() {
  _cached_size_ = 0;
  segments_on_disk_histogram_ = NULL;
  current_segments_on_disk_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogMetrics_SegmentMetrics::~LogMetrics_SegmentMetrics() {
  // @@protoc_insertion_point(destructor:RAMCloud.ProtoBuf.LogMetrics.SegmentMetrics)
  SharedDtor();
}

void LogMetrics_SegmentMetrics::SharedDtor() {
  if (this != default_instance_) {
    delete segments_on_disk_histogram_;
  }
}

void LogMetrics_SegmentMetrics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogMetrics_SegmentMetrics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogMetrics_SegmentMetrics_descriptor_;
}

const LogMetrics_SegmentMetrics& LogMetrics_SegmentMetrics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogMetrics_2eproto();
  return *default_instance_;
}

LogMetrics_SegmentMetrics* LogMetrics_SegmentMetrics::default_instance_ = NULL;

LogMetrics_SegmentMetrics* LogMetrics_SegmentMetrics::New(::google::protobuf::Arena* arena) const {
  LogMetrics_SegmentMetrics* n = new LogMetrics_SegmentMetrics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogMetrics_SegmentMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:RAMCloud.ProtoBuf.LogMetrics.SegmentMetrics)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_segments_on_disk_histogram()) {
      if (segments_on_disk_histogram_ != NULL) segments_on_disk_histogram_->::RAMCloud::ProtoBuf::Histogram::Clear();
    }
    current_segments_on_disk_ = GOOGLE_ULONGLONG(0);
  }
  total_entry_counts_.Clear();
  total_entry_lengths_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LogMetrics_SegmentMetrics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RAMCloud.ProtoBuf.LogMetrics.SegmentMetrics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .RAMCloud.ProtoBuf.Histogram segments_on_disk_histogram = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_segments_on_disk_histogram()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_current_segments_on_disk;
        break;
      }

      // required fixed64 current_segments_on_disk = 2;
      case 2: {
        if (tag == 17) {
         parse_current_segments_on_disk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &current_segments_on_disk_)));
          set_has_current_segments_on_disk();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_total_entry_counts;
        break;
      }

      // repeated fixed64 total_entry_counts = 3;
      case 3: {
        if (tag == 25) {
         parse_total_entry_counts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 25, input, this->mutable_total_entry_counts())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_total_entry_counts())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_total_entry_counts;
        if (input->ExpectTag(33)) goto parse_total_entry_lengths;
        break;
      }

      // repeated fixed64 total_entry_lengths = 4;
      case 4: {
        if (tag == 33) {
         parse_total_entry_lengths:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 33, input, this->mutable_total_entry_lengths())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_total_entry_lengths())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_total_entry_lengths;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RAMCloud.ProtoBuf.LogMetrics.SegmentMetrics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RAMCloud.ProtoBuf.LogMetrics.SegmentMetrics)
  return false;
#undef DO_
}

void LogMetrics_SegmentMetrics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RAMCloud.ProtoBuf.LogMetrics.SegmentMetrics)
  // required .RAMCloud.ProtoBuf.Histogram segments_on_disk_histogram = 1;
  if (has_segments_on_disk_histogram()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->segments_on_disk_histogram_, output);
  }

  // required fixed64 current_segments_on_disk = 2;
  if (has_current_segments_on_disk()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->current_segments_on_disk(), output);
  }

  // repeated fixed64 total_entry_counts = 3;
  for (int i = 0; i < this->total_entry_counts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      3, this->total_entry_counts(i), output);
  }

  // repeated fixed64 total_entry_lengths = 4;
  for (int i = 0; i < this->total_entry_lengths_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      4, this->total_entry_lengths(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RAMCloud.ProtoBuf.LogMetrics.SegmentMetrics)
}

::google::protobuf::uint8* LogMetrics_SegmentMetrics::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RAMCloud.ProtoBuf.LogMetrics.SegmentMetrics)
  // required .RAMCloud.ProtoBuf.Histogram segments_on_disk_histogram = 1;
  if (has_segments_on_disk_histogram()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->segments_on_disk_histogram_, false, target);
  }

  // required fixed64 current_segments_on_disk = 2;
  if (has_current_segments_on_disk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->current_segments_on_disk(), target);
  }

  // repeated fixed64 total_entry_counts = 3;
  for (int i = 0; i < this->total_entry_counts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(3, this->total_entry_counts(i), target);
  }

  // repeated fixed64 total_entry_lengths = 4;
  for (int i = 0; i < this->total_entry_lengths_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(4, this->total_entry_lengths(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RAMCloud.ProtoBuf.LogMetrics.SegmentMetrics)
  return target;
}

int LogMetrics_SegmentMetrics::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RAMCloud.ProtoBuf.LogMetrics.SegmentMetrics)
  int total_size = 0;

  if (has_segments_on_disk_histogram()) {
    // required .RAMCloud.ProtoBuf.Histogram segments_on_disk_histogram = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->segments_on_disk_histogram_);
  }

  if (has_current_segments_on_disk()) {
    // required fixed64 current_segments_on_disk = 2;
    total_size += 1 + 8;
  }

  return total_size;
}
int LogMetrics_SegmentMetrics::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:RAMCloud.ProtoBuf.LogMetrics.SegmentMetrics)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .RAMCloud.ProtoBuf.Histogram segments_on_disk_histogram = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->segments_on_disk_histogram_);

    // required fixed64 current_segments_on_disk = 2;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated fixed64 total_entry_counts = 3;
  {
    int data_size = 0;
    data_size = 8 * this->total_entry_counts_size();
    total_size += 1 * this->total_entry_counts_size() + data_size;
  }

  // repeated fixed64 total_entry_lengths = 4;
  {
    int data_size = 0;
    data_size = 8 * this->total_entry_lengths_size();
    total_size += 1 * this->total_entry_lengths_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogMetrics_SegmentMetrics::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RAMCloud.ProtoBuf.LogMetrics.SegmentMetrics)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LogMetrics_SegmentMetrics* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LogMetrics_SegmentMetrics>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RAMCloud.ProtoBuf.LogMetrics.SegmentMetrics)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RAMCloud.ProtoBuf.LogMetrics.SegmentMetrics)
    MergeFrom(*source);
  }
}

void LogMetrics_SegmentMetrics::MergeFrom(const LogMetrics_SegmentMetrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RAMCloud.ProtoBuf.LogMetrics.SegmentMetrics)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  total_entry_counts_.MergeFrom(from.total_entry_counts_);
  total_entry_lengths_.MergeFrom(from.total_entry_lengths_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_segments_on_disk_histogram()) {
      mutable_segments_on_disk_histogram()->::RAMCloud::ProtoBuf::Histogram::MergeFrom(from.segments_on_disk_histogram());
    }
    if (from.has_current_segments_on_disk()) {
      set_current_segments_on_disk(from.current_segments_on_disk());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LogMetrics_SegmentMetrics::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RAMCloud.ProtoBuf.LogMetrics.SegmentMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogMetrics_SegmentMetrics::CopyFrom(const LogMetrics_SegmentMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RAMCloud.ProtoBuf.LogMetrics.SegmentMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogMetrics_SegmentMetrics::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_segments_on_disk_histogram()) {
    if (!this->segments_on_disk_histogram_->IsInitialized()) return false;
  }
  return true;
}

void LogMetrics_SegmentMetrics::Swap(LogMetrics_SegmentMetrics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogMetrics_SegmentMetrics::InternalSwap(LogMetrics_SegmentMetrics* other) {
  std::swap(segments_on_disk_histogram_, other->segments_on_disk_histogram_);
  std::swap(current_segments_on_disk_, other->current_segments_on_disk_);
  total_entry_counts_.UnsafeArenaSwap(&other->total_entry_counts_);
  total_entry_lengths_.UnsafeArenaSwap(&other->total_entry_lengths_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogMetrics_SegmentMetrics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogMetrics_SegmentMetrics_descriptor_;
  metadata.reflection = LogMetrics_SegmentMetrics_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogMetrics::kTicksPerSecondFieldNumber;
const int LogMetrics::kTotalSyncCallsFieldNumber;
const int LogMetrics::kTotalSyncTicksFieldNumber;
const int LogMetrics::kTotalAppendCallsFieldNumber;
const int LogMetrics::kTotalAppendTicksFieldNumber;
const int LogMetrics::kTotalNoSpaceTicksFieldNumber;
const int LogMetrics::kTotalBytesAppendedFieldNumber;
const int LogMetrics::kTotalMetadataBytesAppendedFieldNumber;
const int LogMetrics::kCleanerMetricsFieldNumber;
const int LogMetrics::kSegletMetricsFieldNumber;
const int LogMetrics::kSegmentMetricsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogMetrics::LogMetrics()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RAMCloud.ProtoBuf.LogMetrics)
}

void LogMetrics::InitAsDefaultInstance() {
  cleaner_metrics_ = const_cast< ::RAMCloud::ProtoBuf::LogMetrics_CleanerMetrics*>(&::RAMCloud::ProtoBuf::LogMetrics_CleanerMetrics::default_instance());
  seglet_metrics_ = const_cast< ::RAMCloud::ProtoBuf::LogMetrics_SegletMetrics*>(&::RAMCloud::ProtoBuf::LogMetrics_SegletMetrics::default_instance());
  segment_metrics_ = const_cast< ::RAMCloud::ProtoBuf::LogMetrics_SegmentMetrics*>(&::RAMCloud::ProtoBuf::LogMetrics_SegmentMetrics::default_instance());
}

LogMetrics::LogMetrics(const LogMetrics& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RAMCloud.ProtoBuf.LogMetrics)
}

void LogMetrics::SharedCtor() {
  _cached_size_ = 0;
  ticks_per_second_ = 0;
  total_sync_calls_ = GOOGLE_ULONGLONG(0);
  total_sync_ticks_ = GOOGLE_ULONGLONG(0);
  total_append_calls_ = GOOGLE_ULONGLONG(0);
  total_append_ticks_ = GOOGLE_ULONGLONG(0);
  total_no_space_ticks_ = GOOGLE_ULONGLONG(0);
  total_bytes_appended_ = GOOGLE_ULONGLONG(0);
  total_metadata_bytes_appended_ = GOOGLE_ULONGLONG(0);
  cleaner_metrics_ = NULL;
  seglet_metrics_ = NULL;
  segment_metrics_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogMetrics::~LogMetrics() {
  // @@protoc_insertion_point(destructor:RAMCloud.ProtoBuf.LogMetrics)
  SharedDtor();
}

void LogMetrics::SharedDtor() {
  if (this != default_instance_) {
    delete cleaner_metrics_;
    delete seglet_metrics_;
    delete segment_metrics_;
  }
}

void LogMetrics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogMetrics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogMetrics_descriptor_;
}

const LogMetrics& LogMetrics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogMetrics_2eproto();
  return *default_instance_;
}

LogMetrics* LogMetrics::default_instance_ = NULL;

LogMetrics* LogMetrics::New(::google::protobuf::Arena* arena) const {
  LogMetrics* n = new LogMetrics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:RAMCloud.ProtoBuf.LogMetrics)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LogMetrics, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LogMetrics*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(ticks_per_second_, total_metadata_bytes_appended_);
  }
  if (_has_bits_[8 / 32] & 1792u) {
    if (has_cleaner_metrics()) {
      if (cleaner_metrics_ != NULL) cleaner_metrics_->::RAMCloud::ProtoBuf::LogMetrics_CleanerMetrics::Clear();
    }
    if (has_seglet_metrics()) {
      if (seglet_metrics_ != NULL) seglet_metrics_->::RAMCloud::ProtoBuf::LogMetrics_SegletMetrics::Clear();
    }
    if (has_segment_metrics()) {
      if (segment_metrics_ != NULL) segment_metrics_->::RAMCloud::ProtoBuf::LogMetrics_SegmentMetrics::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LogMetrics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RAMCloud.ProtoBuf.LogMetrics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double ticks_per_second = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ticks_per_second_)));
          set_has_ticks_per_second();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_total_sync_calls;
        break;
      }

      // required fixed64 total_sync_calls = 2;
      case 2: {
        if (tag == 17) {
         parse_total_sync_calls:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &total_sync_calls_)));
          set_has_total_sync_calls();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_total_sync_ticks;
        break;
      }

      // required fixed64 total_sync_ticks = 3;
      case 3: {
        if (tag == 25) {
         parse_total_sync_ticks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &total_sync_ticks_)));
          set_has_total_sync_ticks();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_total_append_calls;
        break;
      }

      // required fixed64 total_append_calls = 4;
      case 4: {
        if (tag == 33) {
         parse_total_append_calls:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &total_append_calls_)));
          set_has_total_append_calls();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_total_append_ticks;
        break;
      }

      // required fixed64 total_append_ticks = 5;
      case 5: {
        if (tag == 41) {
         parse_total_append_ticks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &total_append_ticks_)));
          set_has_total_append_ticks();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_total_no_space_ticks;
        break;
      }

      // required fixed64 total_no_space_ticks = 6;
      case 6: {
        if (tag == 49) {
         parse_total_no_space_ticks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &total_no_space_ticks_)));
          set_has_total_no_space_ticks();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_total_bytes_appended;
        break;
      }

      // required fixed64 total_bytes_appended = 7;
      case 7: {
        if (tag == 57) {
         parse_total_bytes_appended:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &total_bytes_appended_)));
          set_has_total_bytes_appended();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_total_metadata_bytes_appended;
        break;
      }

      // required fixed64 total_metadata_bytes_appended = 8;
      case 8: {
        if (tag == 65) {
         parse_total_metadata_bytes_appended:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &total_metadata_bytes_appended_)));
          set_has_total_metadata_bytes_appended();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_cleaner_metrics;
        break;
      }

      // required .RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics cleaner_metrics = 9;
      case 9: {
        if (tag == 74) {
         parse_cleaner_metrics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cleaner_metrics()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_seglet_metrics;
        break;
      }

      // required .RAMCloud.ProtoBuf.LogMetrics.SegletMetrics seglet_metrics = 10;
      case 10: {
        if (tag == 82) {
         parse_seglet_metrics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_seglet_metrics()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_segment_metrics;
        break;
      }

      // required .RAMCloud.ProtoBuf.LogMetrics.SegmentMetrics segment_metrics = 11;
      case 11: {
        if (tag == 90) {
         parse_segment_metrics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_segment_metrics()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RAMCloud.ProtoBuf.LogMetrics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RAMCloud.ProtoBuf.LogMetrics)
  return false;
#undef DO_
}

void LogMetrics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RAMCloud.ProtoBuf.LogMetrics)
  // required double ticks_per_second = 1;
  if (has_ticks_per_second()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->ticks_per_second(), output);
  }

  // required fixed64 total_sync_calls = 2;
  if (has_total_sync_calls()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->total_sync_calls(), output);
  }

  // required fixed64 total_sync_ticks = 3;
  if (has_total_sync_ticks()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->total_sync_ticks(), output);
  }

  // required fixed64 total_append_calls = 4;
  if (has_total_append_calls()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->total_append_calls(), output);
  }

  // required fixed64 total_append_ticks = 5;
  if (has_total_append_ticks()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->total_append_ticks(), output);
  }

  // required fixed64 total_no_space_ticks = 6;
  if (has_total_no_space_ticks()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->total_no_space_ticks(), output);
  }

  // required fixed64 total_bytes_appended = 7;
  if (has_total_bytes_appended()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->total_bytes_appended(), output);
  }

  // required fixed64 total_metadata_bytes_appended = 8;
  if (has_total_metadata_bytes_appended()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(8, this->total_metadata_bytes_appended(), output);
  }

  // required .RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics cleaner_metrics = 9;
  if (has_cleaner_metrics()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->cleaner_metrics_, output);
  }

  // required .RAMCloud.ProtoBuf.LogMetrics.SegletMetrics seglet_metrics = 10;
  if (has_seglet_metrics()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->seglet_metrics_, output);
  }

  // required .RAMCloud.ProtoBuf.LogMetrics.SegmentMetrics segment_metrics = 11;
  if (has_segment_metrics()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->segment_metrics_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RAMCloud.ProtoBuf.LogMetrics)
}

::google::protobuf::uint8* LogMetrics::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RAMCloud.ProtoBuf.LogMetrics)
  // required double ticks_per_second = 1;
  if (has_ticks_per_second()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->ticks_per_second(), target);
  }

  // required fixed64 total_sync_calls = 2;
  if (has_total_sync_calls()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->total_sync_calls(), target);
  }

  // required fixed64 total_sync_ticks = 3;
  if (has_total_sync_ticks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->total_sync_ticks(), target);
  }

  // required fixed64 total_append_calls = 4;
  if (has_total_append_calls()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->total_append_calls(), target);
  }

  // required fixed64 total_append_ticks = 5;
  if (has_total_append_ticks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->total_append_ticks(), target);
  }

  // required fixed64 total_no_space_ticks = 6;
  if (has_total_no_space_ticks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->total_no_space_ticks(), target);
  }

  // required fixed64 total_bytes_appended = 7;
  if (has_total_bytes_appended()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->total_bytes_appended(), target);
  }

  // required fixed64 total_metadata_bytes_appended = 8;
  if (has_total_metadata_bytes_appended()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(8, this->total_metadata_bytes_appended(), target);
  }

  // required .RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics cleaner_metrics = 9;
  if (has_cleaner_metrics()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->cleaner_metrics_, false, target);
  }

  // required .RAMCloud.ProtoBuf.LogMetrics.SegletMetrics seglet_metrics = 10;
  if (has_seglet_metrics()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->seglet_metrics_, false, target);
  }

  // required .RAMCloud.ProtoBuf.LogMetrics.SegmentMetrics segment_metrics = 11;
  if (has_segment_metrics()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->segment_metrics_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RAMCloud.ProtoBuf.LogMetrics)
  return target;
}

int LogMetrics::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RAMCloud.ProtoBuf.LogMetrics)
  int total_size = 0;

  if (has_ticks_per_second()) {
    // required double ticks_per_second = 1;
    total_size += 1 + 8;
  }

  if (has_total_sync_calls()) {
    // required fixed64 total_sync_calls = 2;
    total_size += 1 + 8;
  }

  if (has_total_sync_ticks()) {
    // required fixed64 total_sync_ticks = 3;
    total_size += 1 + 8;
  }

  if (has_total_append_calls()) {
    // required fixed64 total_append_calls = 4;
    total_size += 1 + 8;
  }

  if (has_total_append_ticks()) {
    // required fixed64 total_append_ticks = 5;
    total_size += 1 + 8;
  }

  if (has_total_no_space_ticks()) {
    // required fixed64 total_no_space_ticks = 6;
    total_size += 1 + 8;
  }

  if (has_total_bytes_appended()) {
    // required fixed64 total_bytes_appended = 7;
    total_size += 1 + 8;
  }

  if (has_total_metadata_bytes_appended()) {
    // required fixed64 total_metadata_bytes_appended = 8;
    total_size += 1 + 8;
  }

  if (has_cleaner_metrics()) {
    // required .RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics cleaner_metrics = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cleaner_metrics_);
  }

  if (has_seglet_metrics()) {
    // required .RAMCloud.ProtoBuf.LogMetrics.SegletMetrics seglet_metrics = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->seglet_metrics_);
  }

  if (has_segment_metrics()) {
    // required .RAMCloud.ProtoBuf.LogMetrics.SegmentMetrics segment_metrics = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->segment_metrics_);
  }

  return total_size;
}
int LogMetrics::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:RAMCloud.ProtoBuf.LogMetrics)
  int total_size = 0;

  if (((_has_bits_[0] & 0x000007ff) ^ 0x000007ff) == 0) {  // All required fields are present.
    // required double ticks_per_second = 1;
    total_size += 1 + 8;

    // required fixed64 total_sync_calls = 2;
    total_size += 1 + 8;

    // required fixed64 total_sync_ticks = 3;
    total_size += 1 + 8;

    // required fixed64 total_append_calls = 4;
    total_size += 1 + 8;

    // required fixed64 total_append_ticks = 5;
    total_size += 1 + 8;

    // required fixed64 total_no_space_ticks = 6;
    total_size += 1 + 8;

    // required fixed64 total_bytes_appended = 7;
    total_size += 1 + 8;

    // required fixed64 total_metadata_bytes_appended = 8;
    total_size += 1 + 8;

    // required .RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics cleaner_metrics = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cleaner_metrics_);

    // required .RAMCloud.ProtoBuf.LogMetrics.SegletMetrics seglet_metrics = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->seglet_metrics_);

    // required .RAMCloud.ProtoBuf.LogMetrics.SegmentMetrics segment_metrics = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->segment_metrics_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogMetrics::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RAMCloud.ProtoBuf.LogMetrics)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LogMetrics* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LogMetrics>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RAMCloud.ProtoBuf.LogMetrics)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RAMCloud.ProtoBuf.LogMetrics)
    MergeFrom(*source);
  }
}

void LogMetrics::MergeFrom(const LogMetrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RAMCloud.ProtoBuf.LogMetrics)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ticks_per_second()) {
      set_ticks_per_second(from.ticks_per_second());
    }
    if (from.has_total_sync_calls()) {
      set_total_sync_calls(from.total_sync_calls());
    }
    if (from.has_total_sync_ticks()) {
      set_total_sync_ticks(from.total_sync_ticks());
    }
    if (from.has_total_append_calls()) {
      set_total_append_calls(from.total_append_calls());
    }
    if (from.has_total_append_ticks()) {
      set_total_append_ticks(from.total_append_ticks());
    }
    if (from.has_total_no_space_ticks()) {
      set_total_no_space_ticks(from.total_no_space_ticks());
    }
    if (from.has_total_bytes_appended()) {
      set_total_bytes_appended(from.total_bytes_appended());
    }
    if (from.has_total_metadata_bytes_appended()) {
      set_total_metadata_bytes_appended(from.total_metadata_bytes_appended());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cleaner_metrics()) {
      mutable_cleaner_metrics()->::RAMCloud::ProtoBuf::LogMetrics_CleanerMetrics::MergeFrom(from.cleaner_metrics());
    }
    if (from.has_seglet_metrics()) {
      mutable_seglet_metrics()->::RAMCloud::ProtoBuf::LogMetrics_SegletMetrics::MergeFrom(from.seglet_metrics());
    }
    if (from.has_segment_metrics()) {
      mutable_segment_metrics()->::RAMCloud::ProtoBuf::LogMetrics_SegmentMetrics::MergeFrom(from.segment_metrics());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LogMetrics::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RAMCloud.ProtoBuf.LogMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogMetrics::CopyFrom(const LogMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RAMCloud.ProtoBuf.LogMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogMetrics::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;

  if (has_cleaner_metrics()) {
    if (!this->cleaner_metrics_->IsInitialized()) return false;
  }
  if (has_seglet_metrics()) {
    if (!this->seglet_metrics_->IsInitialized()) return false;
  }
  if (has_segment_metrics()) {
    if (!this->segment_metrics_->IsInitialized()) return false;
  }
  return true;
}

void LogMetrics::Swap(LogMetrics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogMetrics::InternalSwap(LogMetrics* other) {
  std::swap(ticks_per_second_, other->ticks_per_second_);
  std::swap(total_sync_calls_, other->total_sync_calls_);
  std::swap(total_sync_ticks_, other->total_sync_ticks_);
  std::swap(total_append_calls_, other->total_append_calls_);
  std::swap(total_append_ticks_, other->total_append_ticks_);
  std::swap(total_no_space_ticks_, other->total_no_space_ticks_);
  std::swap(total_bytes_appended_, other->total_bytes_appended_);
  std::swap(total_metadata_bytes_appended_, other->total_metadata_bytes_appended_);
  std::swap(cleaner_metrics_, other->cleaner_metrics_);
  std::swap(seglet_metrics_, other->seglet_metrics_);
  std::swap(segment_metrics_, other->segment_metrics_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogMetrics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogMetrics_descriptor_;
  metadata.reflection = LogMetrics_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogMetrics_CleanerMetrics_InMemoryMetrics

// required fixed64 total_relocation_callbacks = 1;
bool LogMetrics_CleanerMetrics_InMemoryMetrics::has_total_relocation_callbacks() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LogMetrics_CleanerMetrics_InMemoryMetrics::set_has_total_relocation_callbacks() {
  _has_bits_[0] |= 0x00000001u;
}
void LogMetrics_CleanerMetrics_InMemoryMetrics::clear_has_total_relocation_callbacks() {
  _has_bits_[0] &= ~0x00000001u;
}
void LogMetrics_CleanerMetrics_InMemoryMetrics::clear_total_relocation_callbacks() {
  total_relocation_callbacks_ = GOOGLE_ULONGLONG(0);
  clear_has_total_relocation_callbacks();
}
 ::google::protobuf::uint64 LogMetrics_CleanerMetrics_InMemoryMetrics::total_relocation_callbacks() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics.total_relocation_callbacks)
  return total_relocation_callbacks_;
}
 void LogMetrics_CleanerMetrics_InMemoryMetrics::set_total_relocation_callbacks(::google::protobuf::uint64 value) {
  set_has_total_relocation_callbacks();
  total_relocation_callbacks_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics.total_relocation_callbacks)
}

// required fixed64 total_relocation_appends = 2;
bool LogMetrics_CleanerMetrics_InMemoryMetrics::has_total_relocation_appends() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LogMetrics_CleanerMetrics_InMemoryMetrics::set_has_total_relocation_appends() {
  _has_bits_[0] |= 0x00000002u;
}
void LogMetrics_CleanerMetrics_InMemoryMetrics::clear_has_total_relocation_appends() {
  _has_bits_[0] &= ~0x00000002u;
}
void LogMetrics_CleanerMetrics_InMemoryMetrics::clear_total_relocation_appends() {
  total_relocation_appends_ = GOOGLE_ULONGLONG(0);
  clear_has_total_relocation_appends();
}
 ::google::protobuf::uint64 LogMetrics_CleanerMetrics_InMemoryMetrics::total_relocation_appends() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics.total_relocation_appends)
  return total_relocation_appends_;
}
 void LogMetrics_CleanerMetrics_InMemoryMetrics::set_total_relocation_appends(::google::protobuf::uint64 value) {
  set_has_total_relocation_appends();
  total_relocation_appends_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics.total_relocation_appends)
}

// required fixed64 total_bytes_freed = 3;
bool LogMetrics_CleanerMetrics_InMemoryMetrics::has_total_bytes_freed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LogMetrics_CleanerMetrics_InMemoryMetrics::set_has_total_bytes_freed() {
  _has_bits_[0] |= 0x00000004u;
}
void LogMetrics_CleanerMetrics_InMemoryMetrics::clear_has_total_bytes_freed() {
  _has_bits_[0] &= ~0x00000004u;
}
void LogMetrics_CleanerMetrics_InMemoryMetrics::clear_total_bytes_freed() {
  total_bytes_freed_ = GOOGLE_ULONGLONG(0);
  clear_has_total_bytes_freed();
}
 ::google::protobuf::uint64 LogMetrics_CleanerMetrics_InMemoryMetrics::total_bytes_freed() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics.total_bytes_freed)
  return total_bytes_freed_;
}
 void LogMetrics_CleanerMetrics_InMemoryMetrics::set_total_bytes_freed(::google::protobuf::uint64 value) {
  set_has_total_bytes_freed();
  total_bytes_freed_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics.total_bytes_freed)
}

// required fixed64 total_bytes_in_compacted_segments = 4;
bool LogMetrics_CleanerMetrics_InMemoryMetrics::has_total_bytes_in_compacted_segments() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LogMetrics_CleanerMetrics_InMemoryMetrics::set_has_total_bytes_in_compacted_segments() {
  _has_bits_[0] |= 0x00000008u;
}
void LogMetrics_CleanerMetrics_InMemoryMetrics::clear_has_total_bytes_in_compacted_segments() {
  _has_bits_[0] &= ~0x00000008u;
}
void LogMetrics_CleanerMetrics_InMemoryMetrics::clear_total_bytes_in_compacted_segments() {
  total_bytes_in_compacted_segments_ = GOOGLE_ULONGLONG(0);
  clear_has_total_bytes_in_compacted_segments();
}
 ::google::protobuf::uint64 LogMetrics_CleanerMetrics_InMemoryMetrics::total_bytes_in_compacted_segments() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics.total_bytes_in_compacted_segments)
  return total_bytes_in_compacted_segments_;
}
 void LogMetrics_CleanerMetrics_InMemoryMetrics::set_total_bytes_in_compacted_segments(::google::protobuf::uint64 value) {
  set_has_total_bytes_in_compacted_segments();
  total_bytes_in_compacted_segments_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics.total_bytes_in_compacted_segments)
}

// required fixed64 total_bytes_appended_to_survivors = 5;
bool LogMetrics_CleanerMetrics_InMemoryMetrics::has_total_bytes_appended_to_survivors() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LogMetrics_CleanerMetrics_InMemoryMetrics::set_has_total_bytes_appended_to_survivors() {
  _has_bits_[0] |= 0x00000010u;
}
void LogMetrics_CleanerMetrics_InMemoryMetrics::clear_has_total_bytes_appended_to_survivors() {
  _has_bits_[0] &= ~0x00000010u;
}
void LogMetrics_CleanerMetrics_InMemoryMetrics::clear_total_bytes_appended_to_survivors() {
  total_bytes_appended_to_survivors_ = GOOGLE_ULONGLONG(0);
  clear_has_total_bytes_appended_to_survivors();
}
 ::google::protobuf::uint64 LogMetrics_CleanerMetrics_InMemoryMetrics::total_bytes_appended_to_survivors() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics.total_bytes_appended_to_survivors)
  return total_bytes_appended_to_survivors_;
}
 void LogMetrics_CleanerMetrics_InMemoryMetrics::set_total_bytes_appended_to_survivors(::google::protobuf::uint64 value) {
  set_has_total_bytes_appended_to_survivors();
  total_bytes_appended_to_survivors_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics.total_bytes_appended_to_survivors)
}

// required fixed64 total_segments_compacted = 6;
bool LogMetrics_CleanerMetrics_InMemoryMetrics::has_total_segments_compacted() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LogMetrics_CleanerMetrics_InMemoryMetrics::set_has_total_segments_compacted() {
  _has_bits_[0] |= 0x00000020u;
}
void LogMetrics_CleanerMetrics_InMemoryMetrics::clear_has_total_segments_compacted() {
  _has_bits_[0] &= ~0x00000020u;
}
void LogMetrics_CleanerMetrics_InMemoryMetrics::clear_total_segments_compacted() {
  total_segments_compacted_ = GOOGLE_ULONGLONG(0);
  clear_has_total_segments_compacted();
}
 ::google::protobuf::uint64 LogMetrics_CleanerMetrics_InMemoryMetrics::total_segments_compacted() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics.total_segments_compacted)
  return total_segments_compacted_;
}
 void LogMetrics_CleanerMetrics_InMemoryMetrics::set_total_segments_compacted(::google::protobuf::uint64 value) {
  set_has_total_segments_compacted();
  total_segments_compacted_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics.total_segments_compacted)
}

// required fixed64 total_empty_segments_compacted = 7;
bool LogMetrics_CleanerMetrics_InMemoryMetrics::has_total_empty_segments_compacted() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void LogMetrics_CleanerMetrics_InMemoryMetrics::set_has_total_empty_segments_compacted() {
  _has_bits_[0] |= 0x00000040u;
}
void LogMetrics_CleanerMetrics_InMemoryMetrics::clear_has_total_empty_segments_compacted() {
  _has_bits_[0] &= ~0x00000040u;
}
void LogMetrics_CleanerMetrics_InMemoryMetrics::clear_total_empty_segments_compacted() {
  total_empty_segments_compacted_ = GOOGLE_ULONGLONG(0);
  clear_has_total_empty_segments_compacted();
}
 ::google::protobuf::uint64 LogMetrics_CleanerMetrics_InMemoryMetrics::total_empty_segments_compacted() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics.total_empty_segments_compacted)
  return total_empty_segments_compacted_;
}
 void LogMetrics_CleanerMetrics_InMemoryMetrics::set_total_empty_segments_compacted(::google::protobuf::uint64 value) {
  set_has_total_empty_segments_compacted();
  total_empty_segments_compacted_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics.total_empty_segments_compacted)
}

// repeated fixed64 total_entries_scanned = 8;
int LogMetrics_CleanerMetrics_InMemoryMetrics::total_entries_scanned_size() const {
  return total_entries_scanned_.size();
}
void LogMetrics_CleanerMetrics_InMemoryMetrics::clear_total_entries_scanned() {
  total_entries_scanned_.Clear();
}
 ::google::protobuf::uint64 LogMetrics_CleanerMetrics_InMemoryMetrics::total_entries_scanned(int index) const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics.total_entries_scanned)
  return total_entries_scanned_.Get(index);
}
 void LogMetrics_CleanerMetrics_InMemoryMetrics::set_total_entries_scanned(int index, ::google::protobuf::uint64 value) {
  total_entries_scanned_.Set(index, value);
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics.total_entries_scanned)
}
 void LogMetrics_CleanerMetrics_InMemoryMetrics::add_total_entries_scanned(::google::protobuf::uint64 value) {
  total_entries_scanned_.Add(value);
  // @@protoc_insertion_point(field_add:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics.total_entries_scanned)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
LogMetrics_CleanerMetrics_InMemoryMetrics::total_entries_scanned() const {
  // @@protoc_insertion_point(field_list:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics.total_entries_scanned)
  return total_entries_scanned_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
LogMetrics_CleanerMetrics_InMemoryMetrics::mutable_total_entries_scanned() {
  // @@protoc_insertion_point(field_mutable_list:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics.total_entries_scanned)
  return &total_entries_scanned_;
}

// repeated fixed64 total_live_entries_scanned = 9;
int LogMetrics_CleanerMetrics_InMemoryMetrics::total_live_entries_scanned_size() const {
  return total_live_entries_scanned_.size();
}
void LogMetrics_CleanerMetrics_InMemoryMetrics::clear_total_live_entries_scanned() {
  total_live_entries_scanned_.Clear();
}
 ::google::protobuf::uint64 LogMetrics_CleanerMetrics_InMemoryMetrics::total_live_entries_scanned(int index) const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics.total_live_entries_scanned)
  return total_live_entries_scanned_.Get(index);
}
 void LogMetrics_CleanerMetrics_InMemoryMetrics::set_total_live_entries_scanned(int index, ::google::protobuf::uint64 value) {
  total_live_entries_scanned_.Set(index, value);
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics.total_live_entries_scanned)
}
 void LogMetrics_CleanerMetrics_InMemoryMetrics::add_total_live_entries_scanned(::google::protobuf::uint64 value) {
  total_live_entries_scanned_.Add(value);
  // @@protoc_insertion_point(field_add:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics.total_live_entries_scanned)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
LogMetrics_CleanerMetrics_InMemoryMetrics::total_live_entries_scanned() const {
  // @@protoc_insertion_point(field_list:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics.total_live_entries_scanned)
  return total_live_entries_scanned_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
LogMetrics_CleanerMetrics_InMemoryMetrics::mutable_total_live_entries_scanned() {
  // @@protoc_insertion_point(field_mutable_list:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics.total_live_entries_scanned)
  return &total_live_entries_scanned_;
}

// repeated fixed64 total_scanned_entry_lengths = 10;
int LogMetrics_CleanerMetrics_InMemoryMetrics::total_scanned_entry_lengths_size() const {
  return total_scanned_entry_lengths_.size();
}
void LogMetrics_CleanerMetrics_InMemoryMetrics::clear_total_scanned_entry_lengths() {
  total_scanned_entry_lengths_.Clear();
}
 ::google::protobuf::uint64 LogMetrics_CleanerMetrics_InMemoryMetrics::total_scanned_entry_lengths(int index) const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics.total_scanned_entry_lengths)
  return total_scanned_entry_lengths_.Get(index);
}
 void LogMetrics_CleanerMetrics_InMemoryMetrics::set_total_scanned_entry_lengths(int index, ::google::protobuf::uint64 value) {
  total_scanned_entry_lengths_.Set(index, value);
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics.total_scanned_entry_lengths)
}
 void LogMetrics_CleanerMetrics_InMemoryMetrics::add_total_scanned_entry_lengths(::google::protobuf::uint64 value) {
  total_scanned_entry_lengths_.Add(value);
  // @@protoc_insertion_point(field_add:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics.total_scanned_entry_lengths)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
LogMetrics_CleanerMetrics_InMemoryMetrics::total_scanned_entry_lengths() const {
  // @@protoc_insertion_point(field_list:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics.total_scanned_entry_lengths)
  return total_scanned_entry_lengths_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
LogMetrics_CleanerMetrics_InMemoryMetrics::mutable_total_scanned_entry_lengths() {
  // @@protoc_insertion_point(field_mutable_list:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics.total_scanned_entry_lengths)
  return &total_scanned_entry_lengths_;
}

// repeated fixed64 total_live_scanned_entry_lengths = 11;
int LogMetrics_CleanerMetrics_InMemoryMetrics::total_live_scanned_entry_lengths_size() const {
  return total_live_scanned_entry_lengths_.size();
}
void LogMetrics_CleanerMetrics_InMemoryMetrics::clear_total_live_scanned_entry_lengths() {
  total_live_scanned_entry_lengths_.Clear();
}
 ::google::protobuf::uint64 LogMetrics_CleanerMetrics_InMemoryMetrics::total_live_scanned_entry_lengths(int index) const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics.total_live_scanned_entry_lengths)
  return total_live_scanned_entry_lengths_.Get(index);
}
 void LogMetrics_CleanerMetrics_InMemoryMetrics::set_total_live_scanned_entry_lengths(int index, ::google::protobuf::uint64 value) {
  total_live_scanned_entry_lengths_.Set(index, value);
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics.total_live_scanned_entry_lengths)
}
 void LogMetrics_CleanerMetrics_InMemoryMetrics::add_total_live_scanned_entry_lengths(::google::protobuf::uint64 value) {
  total_live_scanned_entry_lengths_.Add(value);
  // @@protoc_insertion_point(field_add:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics.total_live_scanned_entry_lengths)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
LogMetrics_CleanerMetrics_InMemoryMetrics::total_live_scanned_entry_lengths() const {
  // @@protoc_insertion_point(field_list:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics.total_live_scanned_entry_lengths)
  return total_live_scanned_entry_lengths_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
LogMetrics_CleanerMetrics_InMemoryMetrics::mutable_total_live_scanned_entry_lengths() {
  // @@protoc_insertion_point(field_mutable_list:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics.total_live_scanned_entry_lengths)
  return &total_live_scanned_entry_lengths_;
}

// required fixed64 total_ticks = 12;
bool LogMetrics_CleanerMetrics_InMemoryMetrics::has_total_ticks() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void LogMetrics_CleanerMetrics_InMemoryMetrics::set_has_total_ticks() {
  _has_bits_[0] |= 0x00000800u;
}
void LogMetrics_CleanerMetrics_InMemoryMetrics::clear_has_total_ticks() {
  _has_bits_[0] &= ~0x00000800u;
}
void LogMetrics_CleanerMetrics_InMemoryMetrics::clear_total_ticks() {
  total_ticks_ = GOOGLE_ULONGLONG(0);
  clear_has_total_ticks();
}
 ::google::protobuf::uint64 LogMetrics_CleanerMetrics_InMemoryMetrics::total_ticks() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics.total_ticks)
  return total_ticks_;
}
 void LogMetrics_CleanerMetrics_InMemoryMetrics::set_total_ticks(::google::protobuf::uint64 value) {
  set_has_total_ticks();
  total_ticks_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics.total_ticks)
}

// required fixed64 get_segment_to_compact_ticks = 13;
bool LogMetrics_CleanerMetrics_InMemoryMetrics::has_get_segment_to_compact_ticks() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void LogMetrics_CleanerMetrics_InMemoryMetrics::set_has_get_segment_to_compact_ticks() {
  _has_bits_[0] |= 0x00001000u;
}
void LogMetrics_CleanerMetrics_InMemoryMetrics::clear_has_get_segment_to_compact_ticks() {
  _has_bits_[0] &= ~0x00001000u;
}
void LogMetrics_CleanerMetrics_InMemoryMetrics::clear_get_segment_to_compact_ticks() {
  get_segment_to_compact_ticks_ = GOOGLE_ULONGLONG(0);
  clear_has_get_segment_to_compact_ticks();
}
 ::google::protobuf::uint64 LogMetrics_CleanerMetrics_InMemoryMetrics::get_segment_to_compact_ticks() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics.get_segment_to_compact_ticks)
  return get_segment_to_compact_ticks_;
}
 void LogMetrics_CleanerMetrics_InMemoryMetrics::set_get_segment_to_compact_ticks(::google::protobuf::uint64 value) {
  set_has_get_segment_to_compact_ticks();
  get_segment_to_compact_ticks_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics.get_segment_to_compact_ticks)
}

// required fixed64 wait_for_free_survivor_ticks = 14;
bool LogMetrics_CleanerMetrics_InMemoryMetrics::has_wait_for_free_survivor_ticks() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void LogMetrics_CleanerMetrics_InMemoryMetrics::set_has_wait_for_free_survivor_ticks() {
  _has_bits_[0] |= 0x00002000u;
}
void LogMetrics_CleanerMetrics_InMemoryMetrics::clear_has_wait_for_free_survivor_ticks() {
  _has_bits_[0] &= ~0x00002000u;
}
void LogMetrics_CleanerMetrics_InMemoryMetrics::clear_wait_for_free_survivor_ticks() {
  wait_for_free_survivor_ticks_ = GOOGLE_ULONGLONG(0);
  clear_has_wait_for_free_survivor_ticks();
}
 ::google::protobuf::uint64 LogMetrics_CleanerMetrics_InMemoryMetrics::wait_for_free_survivor_ticks() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics.wait_for_free_survivor_ticks)
  return wait_for_free_survivor_ticks_;
}
 void LogMetrics_CleanerMetrics_InMemoryMetrics::set_wait_for_free_survivor_ticks(::google::protobuf::uint64 value) {
  set_has_wait_for_free_survivor_ticks();
  wait_for_free_survivor_ticks_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics.wait_for_free_survivor_ticks)
}

// required fixed64 relocation_callback_ticks = 15;
bool LogMetrics_CleanerMetrics_InMemoryMetrics::has_relocation_callback_ticks() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void LogMetrics_CleanerMetrics_InMemoryMetrics::set_has_relocation_callback_ticks() {
  _has_bits_[0] |= 0x00004000u;
}
void LogMetrics_CleanerMetrics_InMemoryMetrics::clear_has_relocation_callback_ticks() {
  _has_bits_[0] &= ~0x00004000u;
}
void LogMetrics_CleanerMetrics_InMemoryMetrics::clear_relocation_callback_ticks() {
  relocation_callback_ticks_ = GOOGLE_ULONGLONG(0);
  clear_has_relocation_callback_ticks();
}
 ::google::protobuf::uint64 LogMetrics_CleanerMetrics_InMemoryMetrics::relocation_callback_ticks() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics.relocation_callback_ticks)
  return relocation_callback_ticks_;
}
 void LogMetrics_CleanerMetrics_InMemoryMetrics::set_relocation_callback_ticks(::google::protobuf::uint64 value) {
  set_has_relocation_callback_ticks();
  relocation_callback_ticks_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics.relocation_callback_ticks)
}

// required fixed64 relocation_append_ticks = 16;
bool LogMetrics_CleanerMetrics_InMemoryMetrics::has_relocation_append_ticks() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void LogMetrics_CleanerMetrics_InMemoryMetrics::set_has_relocation_append_ticks() {
  _has_bits_[0] |= 0x00008000u;
}
void LogMetrics_CleanerMetrics_InMemoryMetrics::clear_has_relocation_append_ticks() {
  _has_bits_[0] &= ~0x00008000u;
}
void LogMetrics_CleanerMetrics_InMemoryMetrics::clear_relocation_append_ticks() {
  relocation_append_ticks_ = GOOGLE_ULONGLONG(0);
  clear_has_relocation_append_ticks();
}
 ::google::protobuf::uint64 LogMetrics_CleanerMetrics_InMemoryMetrics::relocation_append_ticks() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics.relocation_append_ticks)
  return relocation_append_ticks_;
}
 void LogMetrics_CleanerMetrics_InMemoryMetrics::set_relocation_append_ticks(::google::protobuf::uint64 value) {
  set_has_relocation_append_ticks();
  relocation_append_ticks_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics.relocation_append_ticks)
}

// required fixed64 compaction_complete_ticks = 17;
bool LogMetrics_CleanerMetrics_InMemoryMetrics::has_compaction_complete_ticks() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void LogMetrics_CleanerMetrics_InMemoryMetrics::set_has_compaction_complete_ticks() {
  _has_bits_[0] |= 0x00010000u;
}
void LogMetrics_CleanerMetrics_InMemoryMetrics::clear_has_compaction_complete_ticks() {
  _has_bits_[0] &= ~0x00010000u;
}
void LogMetrics_CleanerMetrics_InMemoryMetrics::clear_compaction_complete_ticks() {
  compaction_complete_ticks_ = GOOGLE_ULONGLONG(0);
  clear_has_compaction_complete_ticks();
}
 ::google::protobuf::uint64 LogMetrics_CleanerMetrics_InMemoryMetrics::compaction_complete_ticks() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics.compaction_complete_ticks)
  return compaction_complete_ticks_;
}
 void LogMetrics_CleanerMetrics_InMemoryMetrics::set_compaction_complete_ticks(::google::protobuf::uint64 value) {
  set_has_compaction_complete_ticks();
  compaction_complete_ticks_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics.compaction_complete_ticks)
}

// -------------------------------------------------------------------

// LogMetrics_CleanerMetrics_OnDiskMetrics

// required fixed64 total_bytes_appended_to_survivors = 1;
bool LogMetrics_CleanerMetrics_OnDiskMetrics::has_total_bytes_appended_to_survivors() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::set_has_total_bytes_appended_to_survivors() {
  _has_bits_[0] |= 0x00000001u;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::clear_has_total_bytes_appended_to_survivors() {
  _has_bits_[0] &= ~0x00000001u;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::clear_total_bytes_appended_to_survivors() {
  total_bytes_appended_to_survivors_ = GOOGLE_ULONGLONG(0);
  clear_has_total_bytes_appended_to_survivors();
}
 ::google::protobuf::uint64 LogMetrics_CleanerMetrics_OnDiskMetrics::total_bytes_appended_to_survivors() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.total_bytes_appended_to_survivors)
  return total_bytes_appended_to_survivors_;
}
 void LogMetrics_CleanerMetrics_OnDiskMetrics::set_total_bytes_appended_to_survivors(::google::protobuf::uint64 value) {
  set_has_total_bytes_appended_to_survivors();
  total_bytes_appended_to_survivors_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.total_bytes_appended_to_survivors)
}

// required fixed64 total_memory_bytes_freed = 2;
bool LogMetrics_CleanerMetrics_OnDiskMetrics::has_total_memory_bytes_freed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::set_has_total_memory_bytes_freed() {
  _has_bits_[0] |= 0x00000002u;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::clear_has_total_memory_bytes_freed() {
  _has_bits_[0] &= ~0x00000002u;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::clear_total_memory_bytes_freed() {
  total_memory_bytes_freed_ = GOOGLE_ULONGLONG(0);
  clear_has_total_memory_bytes_freed();
}
 ::google::protobuf::uint64 LogMetrics_CleanerMetrics_OnDiskMetrics::total_memory_bytes_freed() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.total_memory_bytes_freed)
  return total_memory_bytes_freed_;
}
 void LogMetrics_CleanerMetrics_OnDiskMetrics::set_total_memory_bytes_freed(::google::protobuf::uint64 value) {
  set_has_total_memory_bytes_freed();
  total_memory_bytes_freed_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.total_memory_bytes_freed)
}

// required fixed64 total_disk_bytes_freed = 3;
bool LogMetrics_CleanerMetrics_OnDiskMetrics::has_total_disk_bytes_freed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::set_has_total_disk_bytes_freed() {
  _has_bits_[0] |= 0x00000004u;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::clear_has_total_disk_bytes_freed() {
  _has_bits_[0] &= ~0x00000004u;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::clear_total_disk_bytes_freed() {
  total_disk_bytes_freed_ = GOOGLE_ULONGLONG(0);
  clear_has_total_disk_bytes_freed();
}
 ::google::protobuf::uint64 LogMetrics_CleanerMetrics_OnDiskMetrics::total_disk_bytes_freed() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.total_disk_bytes_freed)
  return total_disk_bytes_freed_;
}
 void LogMetrics_CleanerMetrics_OnDiskMetrics::set_total_disk_bytes_freed(::google::protobuf::uint64 value) {
  set_has_total_disk_bytes_freed();
  total_disk_bytes_freed_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.total_disk_bytes_freed)
}

// required fixed64 total_memory_bytes_in_cleaned_segments = 4;
bool LogMetrics_CleanerMetrics_OnDiskMetrics::has_total_memory_bytes_in_cleaned_segments() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::set_has_total_memory_bytes_in_cleaned_segments() {
  _has_bits_[0] |= 0x00000008u;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::clear_has_total_memory_bytes_in_cleaned_segments() {
  _has_bits_[0] &= ~0x00000008u;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::clear_total_memory_bytes_in_cleaned_segments() {
  total_memory_bytes_in_cleaned_segments_ = GOOGLE_ULONGLONG(0);
  clear_has_total_memory_bytes_in_cleaned_segments();
}
 ::google::protobuf::uint64 LogMetrics_CleanerMetrics_OnDiskMetrics::total_memory_bytes_in_cleaned_segments() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.total_memory_bytes_in_cleaned_segments)
  return total_memory_bytes_in_cleaned_segments_;
}
 void LogMetrics_CleanerMetrics_OnDiskMetrics::set_total_memory_bytes_in_cleaned_segments(::google::protobuf::uint64 value) {
  set_has_total_memory_bytes_in_cleaned_segments();
  total_memory_bytes_in_cleaned_segments_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.total_memory_bytes_in_cleaned_segments)
}

// required fixed64 total_disk_bytes_in_cleaned_segments = 5;
bool LogMetrics_CleanerMetrics_OnDiskMetrics::has_total_disk_bytes_in_cleaned_segments() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::set_has_total_disk_bytes_in_cleaned_segments() {
  _has_bits_[0] |= 0x00000010u;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::clear_has_total_disk_bytes_in_cleaned_segments() {
  _has_bits_[0] &= ~0x00000010u;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::clear_total_disk_bytes_in_cleaned_segments() {
  total_disk_bytes_in_cleaned_segments_ = GOOGLE_ULONGLONG(0);
  clear_has_total_disk_bytes_in_cleaned_segments();
}
 ::google::protobuf::uint64 LogMetrics_CleanerMetrics_OnDiskMetrics::total_disk_bytes_in_cleaned_segments() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.total_disk_bytes_in_cleaned_segments)
  return total_disk_bytes_in_cleaned_segments_;
}
 void LogMetrics_CleanerMetrics_OnDiskMetrics::set_total_disk_bytes_in_cleaned_segments(::google::protobuf::uint64 value) {
  set_has_total_disk_bytes_in_cleaned_segments();
  total_disk_bytes_in_cleaned_segments_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.total_disk_bytes_in_cleaned_segments)
}

// required fixed64 total_relocation_callbacks = 6;
bool LogMetrics_CleanerMetrics_OnDiskMetrics::has_total_relocation_callbacks() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::set_has_total_relocation_callbacks() {
  _has_bits_[0] |= 0x00000020u;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::clear_has_total_relocation_callbacks() {
  _has_bits_[0] &= ~0x00000020u;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::clear_total_relocation_callbacks() {
  total_relocation_callbacks_ = GOOGLE_ULONGLONG(0);
  clear_has_total_relocation_callbacks();
}
 ::google::protobuf::uint64 LogMetrics_CleanerMetrics_OnDiskMetrics::total_relocation_callbacks() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.total_relocation_callbacks)
  return total_relocation_callbacks_;
}
 void LogMetrics_CleanerMetrics_OnDiskMetrics::set_total_relocation_callbacks(::google::protobuf::uint64 value) {
  set_has_total_relocation_callbacks();
  total_relocation_callbacks_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.total_relocation_callbacks)
}

// required fixed64 total_relocation_appends = 7;
bool LogMetrics_CleanerMetrics_OnDiskMetrics::has_total_relocation_appends() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::set_has_total_relocation_appends() {
  _has_bits_[0] |= 0x00000040u;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::clear_has_total_relocation_appends() {
  _has_bits_[0] &= ~0x00000040u;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::clear_total_relocation_appends() {
  total_relocation_appends_ = GOOGLE_ULONGLONG(0);
  clear_has_total_relocation_appends();
}
 ::google::protobuf::uint64 LogMetrics_CleanerMetrics_OnDiskMetrics::total_relocation_appends() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.total_relocation_appends)
  return total_relocation_appends_;
}
 void LogMetrics_CleanerMetrics_OnDiskMetrics::set_total_relocation_appends(::google::protobuf::uint64 value) {
  set_has_total_relocation_appends();
  total_relocation_appends_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.total_relocation_appends)
}

// required fixed64 total_segments_cleaned = 8;
bool LogMetrics_CleanerMetrics_OnDiskMetrics::has_total_segments_cleaned() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::set_has_total_segments_cleaned() {
  _has_bits_[0] |= 0x00000080u;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::clear_has_total_segments_cleaned() {
  _has_bits_[0] &= ~0x00000080u;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::clear_total_segments_cleaned() {
  total_segments_cleaned_ = GOOGLE_ULONGLONG(0);
  clear_has_total_segments_cleaned();
}
 ::google::protobuf::uint64 LogMetrics_CleanerMetrics_OnDiskMetrics::total_segments_cleaned() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.total_segments_cleaned)
  return total_segments_cleaned_;
}
 void LogMetrics_CleanerMetrics_OnDiskMetrics::set_total_segments_cleaned(::google::protobuf::uint64 value) {
  set_has_total_segments_cleaned();
  total_segments_cleaned_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.total_segments_cleaned)
}

// required fixed64 total_empty_segments_cleaned = 9;
bool LogMetrics_CleanerMetrics_OnDiskMetrics::has_total_empty_segments_cleaned() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::set_has_total_empty_segments_cleaned() {
  _has_bits_[0] |= 0x00000100u;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::clear_has_total_empty_segments_cleaned() {
  _has_bits_[0] &= ~0x00000100u;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::clear_total_empty_segments_cleaned() {
  total_empty_segments_cleaned_ = GOOGLE_ULONGLONG(0);
  clear_has_total_empty_segments_cleaned();
}
 ::google::protobuf::uint64 LogMetrics_CleanerMetrics_OnDiskMetrics::total_empty_segments_cleaned() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.total_empty_segments_cleaned)
  return total_empty_segments_cleaned_;
}
 void LogMetrics_CleanerMetrics_OnDiskMetrics::set_total_empty_segments_cleaned(::google::protobuf::uint64 value) {
  set_has_total_empty_segments_cleaned();
  total_empty_segments_cleaned_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.total_empty_segments_cleaned)
}

// required fixed64 total_survivors_created = 10;
bool LogMetrics_CleanerMetrics_OnDiskMetrics::has_total_survivors_created() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::set_has_total_survivors_created() {
  _has_bits_[0] |= 0x00000200u;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::clear_has_total_survivors_created() {
  _has_bits_[0] &= ~0x00000200u;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::clear_total_survivors_created() {
  total_survivors_created_ = GOOGLE_ULONGLONG(0);
  clear_has_total_survivors_created();
}
 ::google::protobuf::uint64 LogMetrics_CleanerMetrics_OnDiskMetrics::total_survivors_created() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.total_survivors_created)
  return total_survivors_created_;
}
 void LogMetrics_CleanerMetrics_OnDiskMetrics::set_total_survivors_created(::google::protobuf::uint64 value) {
  set_has_total_survivors_created();
  total_survivors_created_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.total_survivors_created)
}

// required fixed64 total_runs = 11;
bool LogMetrics_CleanerMetrics_OnDiskMetrics::has_total_runs() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::set_has_total_runs() {
  _has_bits_[0] |= 0x00000400u;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::clear_has_total_runs() {
  _has_bits_[0] &= ~0x00000400u;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::clear_total_runs() {
  total_runs_ = GOOGLE_ULONGLONG(0);
  clear_has_total_runs();
}
 ::google::protobuf::uint64 LogMetrics_CleanerMetrics_OnDiskMetrics::total_runs() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.total_runs)
  return total_runs_;
}
 void LogMetrics_CleanerMetrics_OnDiskMetrics::set_total_runs(::google::protobuf::uint64 value) {
  set_has_total_runs();
  total_runs_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.total_runs)
}

// required fixed64 total_low_disk_space_runs = 12;
bool LogMetrics_CleanerMetrics_OnDiskMetrics::has_total_low_disk_space_runs() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::set_has_total_low_disk_space_runs() {
  _has_bits_[0] |= 0x00000800u;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::clear_has_total_low_disk_space_runs() {
  _has_bits_[0] &= ~0x00000800u;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::clear_total_low_disk_space_runs() {
  total_low_disk_space_runs_ = GOOGLE_ULONGLONG(0);
  clear_has_total_low_disk_space_runs();
}
 ::google::protobuf::uint64 LogMetrics_CleanerMetrics_OnDiskMetrics::total_low_disk_space_runs() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.total_low_disk_space_runs)
  return total_low_disk_space_runs_;
}
 void LogMetrics_CleanerMetrics_OnDiskMetrics::set_total_low_disk_space_runs(::google::protobuf::uint64 value) {
  set_has_total_low_disk_space_runs();
  total_low_disk_space_runs_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.total_low_disk_space_runs)
}

// required fixed64 memory_utilization_at_start_sum = 13;
bool LogMetrics_CleanerMetrics_OnDiskMetrics::has_memory_utilization_at_start_sum() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::set_has_memory_utilization_at_start_sum() {
  _has_bits_[0] |= 0x00001000u;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::clear_has_memory_utilization_at_start_sum() {
  _has_bits_[0] &= ~0x00001000u;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::clear_memory_utilization_at_start_sum() {
  memory_utilization_at_start_sum_ = GOOGLE_ULONGLONG(0);
  clear_has_memory_utilization_at_start_sum();
}
 ::google::protobuf::uint64 LogMetrics_CleanerMetrics_OnDiskMetrics::memory_utilization_at_start_sum() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.memory_utilization_at_start_sum)
  return memory_utilization_at_start_sum_;
}
 void LogMetrics_CleanerMetrics_OnDiskMetrics::set_memory_utilization_at_start_sum(::google::protobuf::uint64 value) {
  set_has_memory_utilization_at_start_sum();
  memory_utilization_at_start_sum_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.memory_utilization_at_start_sum)
}

// repeated fixed64 total_entries_scanned = 14;
int LogMetrics_CleanerMetrics_OnDiskMetrics::total_entries_scanned_size() const {
  return total_entries_scanned_.size();
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::clear_total_entries_scanned() {
  total_entries_scanned_.Clear();
}
 ::google::protobuf::uint64 LogMetrics_CleanerMetrics_OnDiskMetrics::total_entries_scanned(int index) const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.total_entries_scanned)
  return total_entries_scanned_.Get(index);
}
 void LogMetrics_CleanerMetrics_OnDiskMetrics::set_total_entries_scanned(int index, ::google::protobuf::uint64 value) {
  total_entries_scanned_.Set(index, value);
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.total_entries_scanned)
}
 void LogMetrics_CleanerMetrics_OnDiskMetrics::add_total_entries_scanned(::google::protobuf::uint64 value) {
  total_entries_scanned_.Add(value);
  // @@protoc_insertion_point(field_add:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.total_entries_scanned)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
LogMetrics_CleanerMetrics_OnDiskMetrics::total_entries_scanned() const {
  // @@protoc_insertion_point(field_list:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.total_entries_scanned)
  return total_entries_scanned_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
LogMetrics_CleanerMetrics_OnDiskMetrics::mutable_total_entries_scanned() {
  // @@protoc_insertion_point(field_mutable_list:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.total_entries_scanned)
  return &total_entries_scanned_;
}

// repeated fixed64 total_live_entries_scanned = 15;
int LogMetrics_CleanerMetrics_OnDiskMetrics::total_live_entries_scanned_size() const {
  return total_live_entries_scanned_.size();
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::clear_total_live_entries_scanned() {
  total_live_entries_scanned_.Clear();
}
 ::google::protobuf::uint64 LogMetrics_CleanerMetrics_OnDiskMetrics::total_live_entries_scanned(int index) const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.total_live_entries_scanned)
  return total_live_entries_scanned_.Get(index);
}
 void LogMetrics_CleanerMetrics_OnDiskMetrics::set_total_live_entries_scanned(int index, ::google::protobuf::uint64 value) {
  total_live_entries_scanned_.Set(index, value);
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.total_live_entries_scanned)
}
 void LogMetrics_CleanerMetrics_OnDiskMetrics::add_total_live_entries_scanned(::google::protobuf::uint64 value) {
  total_live_entries_scanned_.Add(value);
  // @@protoc_insertion_point(field_add:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.total_live_entries_scanned)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
LogMetrics_CleanerMetrics_OnDiskMetrics::total_live_entries_scanned() const {
  // @@protoc_insertion_point(field_list:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.total_live_entries_scanned)
  return total_live_entries_scanned_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
LogMetrics_CleanerMetrics_OnDiskMetrics::mutable_total_live_entries_scanned() {
  // @@protoc_insertion_point(field_mutable_list:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.total_live_entries_scanned)
  return &total_live_entries_scanned_;
}

// repeated fixed64 total_scanned_entry_lengths = 16;
int LogMetrics_CleanerMetrics_OnDiskMetrics::total_scanned_entry_lengths_size() const {
  return total_scanned_entry_lengths_.size();
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::clear_total_scanned_entry_lengths() {
  total_scanned_entry_lengths_.Clear();
}
 ::google::protobuf::uint64 LogMetrics_CleanerMetrics_OnDiskMetrics::total_scanned_entry_lengths(int index) const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.total_scanned_entry_lengths)
  return total_scanned_entry_lengths_.Get(index);
}
 void LogMetrics_CleanerMetrics_OnDiskMetrics::set_total_scanned_entry_lengths(int index, ::google::protobuf::uint64 value) {
  total_scanned_entry_lengths_.Set(index, value);
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.total_scanned_entry_lengths)
}
 void LogMetrics_CleanerMetrics_OnDiskMetrics::add_total_scanned_entry_lengths(::google::protobuf::uint64 value) {
  total_scanned_entry_lengths_.Add(value);
  // @@protoc_insertion_point(field_add:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.total_scanned_entry_lengths)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
LogMetrics_CleanerMetrics_OnDiskMetrics::total_scanned_entry_lengths() const {
  // @@protoc_insertion_point(field_list:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.total_scanned_entry_lengths)
  return total_scanned_entry_lengths_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
LogMetrics_CleanerMetrics_OnDiskMetrics::mutable_total_scanned_entry_lengths() {
  // @@protoc_insertion_point(field_mutable_list:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.total_scanned_entry_lengths)
  return &total_scanned_entry_lengths_;
}

// repeated fixed64 total_live_scanned_entry_lengths = 17;
int LogMetrics_CleanerMetrics_OnDiskMetrics::total_live_scanned_entry_lengths_size() const {
  return total_live_scanned_entry_lengths_.size();
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::clear_total_live_scanned_entry_lengths() {
  total_live_scanned_entry_lengths_.Clear();
}
 ::google::protobuf::uint64 LogMetrics_CleanerMetrics_OnDiskMetrics::total_live_scanned_entry_lengths(int index) const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.total_live_scanned_entry_lengths)
  return total_live_scanned_entry_lengths_.Get(index);
}
 void LogMetrics_CleanerMetrics_OnDiskMetrics::set_total_live_scanned_entry_lengths(int index, ::google::protobuf::uint64 value) {
  total_live_scanned_entry_lengths_.Set(index, value);
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.total_live_scanned_entry_lengths)
}
 void LogMetrics_CleanerMetrics_OnDiskMetrics::add_total_live_scanned_entry_lengths(::google::protobuf::uint64 value) {
  total_live_scanned_entry_lengths_.Add(value);
  // @@protoc_insertion_point(field_add:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.total_live_scanned_entry_lengths)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
LogMetrics_CleanerMetrics_OnDiskMetrics::total_live_scanned_entry_lengths() const {
  // @@protoc_insertion_point(field_list:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.total_live_scanned_entry_lengths)
  return total_live_scanned_entry_lengths_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
LogMetrics_CleanerMetrics_OnDiskMetrics::mutable_total_live_scanned_entry_lengths() {
  // @@protoc_insertion_point(field_mutable_list:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.total_live_scanned_entry_lengths)
  return &total_live_scanned_entry_lengths_;
}

// required fixed64 total_ticks = 18;
bool LogMetrics_CleanerMetrics_OnDiskMetrics::has_total_ticks() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::set_has_total_ticks() {
  _has_bits_[0] |= 0x00020000u;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::clear_has_total_ticks() {
  _has_bits_[0] &= ~0x00020000u;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::clear_total_ticks() {
  total_ticks_ = GOOGLE_ULONGLONG(0);
  clear_has_total_ticks();
}
 ::google::protobuf::uint64 LogMetrics_CleanerMetrics_OnDiskMetrics::total_ticks() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.total_ticks)
  return total_ticks_;
}
 void LogMetrics_CleanerMetrics_OnDiskMetrics::set_total_ticks(::google::protobuf::uint64 value) {
  set_has_total_ticks();
  total_ticks_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.total_ticks)
}

// required fixed64 get_segments_to_clean_ticks = 19;
bool LogMetrics_CleanerMetrics_OnDiskMetrics::has_get_segments_to_clean_ticks() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::set_has_get_segments_to_clean_ticks() {
  _has_bits_[0] |= 0x00040000u;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::clear_has_get_segments_to_clean_ticks() {
  _has_bits_[0] &= ~0x00040000u;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::clear_get_segments_to_clean_ticks() {
  get_segments_to_clean_ticks_ = GOOGLE_ULONGLONG(0);
  clear_has_get_segments_to_clean_ticks();
}
 ::google::protobuf::uint64 LogMetrics_CleanerMetrics_OnDiskMetrics::get_segments_to_clean_ticks() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.get_segments_to_clean_ticks)
  return get_segments_to_clean_ticks_;
}
 void LogMetrics_CleanerMetrics_OnDiskMetrics::set_get_segments_to_clean_ticks(::google::protobuf::uint64 value) {
  set_has_get_segments_to_clean_ticks();
  get_segments_to_clean_ticks_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.get_segments_to_clean_ticks)
}

// required fixed64 cost_benefit_sort_ticks = 20;
bool LogMetrics_CleanerMetrics_OnDiskMetrics::has_cost_benefit_sort_ticks() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::set_has_cost_benefit_sort_ticks() {
  _has_bits_[0] |= 0x00080000u;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::clear_has_cost_benefit_sort_ticks() {
  _has_bits_[0] &= ~0x00080000u;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::clear_cost_benefit_sort_ticks() {
  cost_benefit_sort_ticks_ = GOOGLE_ULONGLONG(0);
  clear_has_cost_benefit_sort_ticks();
}
 ::google::protobuf::uint64 LogMetrics_CleanerMetrics_OnDiskMetrics::cost_benefit_sort_ticks() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.cost_benefit_sort_ticks)
  return cost_benefit_sort_ticks_;
}
 void LogMetrics_CleanerMetrics_OnDiskMetrics::set_cost_benefit_sort_ticks(::google::protobuf::uint64 value) {
  set_has_cost_benefit_sort_ticks();
  cost_benefit_sort_ticks_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.cost_benefit_sort_ticks)
}

// required fixed64 get_sorted_entries_ticks = 21;
bool LogMetrics_CleanerMetrics_OnDiskMetrics::has_get_sorted_entries_ticks() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::set_has_get_sorted_entries_ticks() {
  _has_bits_[0] |= 0x00100000u;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::clear_has_get_sorted_entries_ticks() {
  _has_bits_[0] &= ~0x00100000u;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::clear_get_sorted_entries_ticks() {
  get_sorted_entries_ticks_ = GOOGLE_ULONGLONG(0);
  clear_has_get_sorted_entries_ticks();
}
 ::google::protobuf::uint64 LogMetrics_CleanerMetrics_OnDiskMetrics::get_sorted_entries_ticks() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.get_sorted_entries_ticks)
  return get_sorted_entries_ticks_;
}
 void LogMetrics_CleanerMetrics_OnDiskMetrics::set_get_sorted_entries_ticks(::google::protobuf::uint64 value) {
  set_has_get_sorted_entries_ticks();
  get_sorted_entries_ticks_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.get_sorted_entries_ticks)
}

// required fixed64 timestamp_sort_ticks = 22;
bool LogMetrics_CleanerMetrics_OnDiskMetrics::has_timestamp_sort_ticks() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::set_has_timestamp_sort_ticks() {
  _has_bits_[0] |= 0x00200000u;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::clear_has_timestamp_sort_ticks() {
  _has_bits_[0] &= ~0x00200000u;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::clear_timestamp_sort_ticks() {
  timestamp_sort_ticks_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp_sort_ticks();
}
 ::google::protobuf::uint64 LogMetrics_CleanerMetrics_OnDiskMetrics::timestamp_sort_ticks() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.timestamp_sort_ticks)
  return timestamp_sort_ticks_;
}
 void LogMetrics_CleanerMetrics_OnDiskMetrics::set_timestamp_sort_ticks(::google::protobuf::uint64 value) {
  set_has_timestamp_sort_ticks();
  timestamp_sort_ticks_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.timestamp_sort_ticks)
}

// required fixed64 relocate_live_entries_ticks = 23;
bool LogMetrics_CleanerMetrics_OnDiskMetrics::has_relocate_live_entries_ticks() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::set_has_relocate_live_entries_ticks() {
  _has_bits_[0] |= 0x00400000u;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::clear_has_relocate_live_entries_ticks() {
  _has_bits_[0] &= ~0x00400000u;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::clear_relocate_live_entries_ticks() {
  relocate_live_entries_ticks_ = GOOGLE_ULONGLONG(0);
  clear_has_relocate_live_entries_ticks();
}
 ::google::protobuf::uint64 LogMetrics_CleanerMetrics_OnDiskMetrics::relocate_live_entries_ticks() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.relocate_live_entries_ticks)
  return relocate_live_entries_ticks_;
}
 void LogMetrics_CleanerMetrics_OnDiskMetrics::set_relocate_live_entries_ticks(::google::protobuf::uint64 value) {
  set_has_relocate_live_entries_ticks();
  relocate_live_entries_ticks_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.relocate_live_entries_ticks)
}

// required fixed64 wait_for_free_survivors_ticks = 24;
bool LogMetrics_CleanerMetrics_OnDiskMetrics::has_wait_for_free_survivors_ticks() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::set_has_wait_for_free_survivors_ticks() {
  _has_bits_[0] |= 0x00800000u;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::clear_has_wait_for_free_survivors_ticks() {
  _has_bits_[0] &= ~0x00800000u;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::clear_wait_for_free_survivors_ticks() {
  wait_for_free_survivors_ticks_ = GOOGLE_ULONGLONG(0);
  clear_has_wait_for_free_survivors_ticks();
}
 ::google::protobuf::uint64 LogMetrics_CleanerMetrics_OnDiskMetrics::wait_for_free_survivors_ticks() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.wait_for_free_survivors_ticks)
  return wait_for_free_survivors_ticks_;
}
 void LogMetrics_CleanerMetrics_OnDiskMetrics::set_wait_for_free_survivors_ticks(::google::protobuf::uint64 value) {
  set_has_wait_for_free_survivors_ticks();
  wait_for_free_survivors_ticks_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.wait_for_free_survivors_ticks)
}

// required fixed64 cleaning_complete_ticks = 25;
bool LogMetrics_CleanerMetrics_OnDiskMetrics::has_cleaning_complete_ticks() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::set_has_cleaning_complete_ticks() {
  _has_bits_[0] |= 0x01000000u;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::clear_has_cleaning_complete_ticks() {
  _has_bits_[0] &= ~0x01000000u;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::clear_cleaning_complete_ticks() {
  cleaning_complete_ticks_ = GOOGLE_ULONGLONG(0);
  clear_has_cleaning_complete_ticks();
}
 ::google::protobuf::uint64 LogMetrics_CleanerMetrics_OnDiskMetrics::cleaning_complete_ticks() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.cleaning_complete_ticks)
  return cleaning_complete_ticks_;
}
 void LogMetrics_CleanerMetrics_OnDiskMetrics::set_cleaning_complete_ticks(::google::protobuf::uint64 value) {
  set_has_cleaning_complete_ticks();
  cleaning_complete_ticks_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.cleaning_complete_ticks)
}

// required fixed64 relocation_callback_ticks = 26;
bool LogMetrics_CleanerMetrics_OnDiskMetrics::has_relocation_callback_ticks() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::set_has_relocation_callback_ticks() {
  _has_bits_[0] |= 0x02000000u;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::clear_has_relocation_callback_ticks() {
  _has_bits_[0] &= ~0x02000000u;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::clear_relocation_callback_ticks() {
  relocation_callback_ticks_ = GOOGLE_ULONGLONG(0);
  clear_has_relocation_callback_ticks();
}
 ::google::protobuf::uint64 LogMetrics_CleanerMetrics_OnDiskMetrics::relocation_callback_ticks() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.relocation_callback_ticks)
  return relocation_callback_ticks_;
}
 void LogMetrics_CleanerMetrics_OnDiskMetrics::set_relocation_callback_ticks(::google::protobuf::uint64 value) {
  set_has_relocation_callback_ticks();
  relocation_callback_ticks_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.relocation_callback_ticks)
}

// required fixed64 relocation_append_ticks = 27;
bool LogMetrics_CleanerMetrics_OnDiskMetrics::has_relocation_append_ticks() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::set_has_relocation_append_ticks() {
  _has_bits_[0] |= 0x04000000u;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::clear_has_relocation_append_ticks() {
  _has_bits_[0] &= ~0x04000000u;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::clear_relocation_append_ticks() {
  relocation_append_ticks_ = GOOGLE_ULONGLONG(0);
  clear_has_relocation_append_ticks();
}
 ::google::protobuf::uint64 LogMetrics_CleanerMetrics_OnDiskMetrics::relocation_append_ticks() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.relocation_append_ticks)
  return relocation_append_ticks_;
}
 void LogMetrics_CleanerMetrics_OnDiskMetrics::set_relocation_append_ticks(::google::protobuf::uint64 value) {
  set_has_relocation_append_ticks();
  relocation_append_ticks_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.relocation_append_ticks)
}

// required fixed64 close_survivor_ticks = 28;
bool LogMetrics_CleanerMetrics_OnDiskMetrics::has_close_survivor_ticks() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::set_has_close_survivor_ticks() {
  _has_bits_[0] |= 0x08000000u;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::clear_has_close_survivor_ticks() {
  _has_bits_[0] &= ~0x08000000u;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::clear_close_survivor_ticks() {
  close_survivor_ticks_ = GOOGLE_ULONGLONG(0);
  clear_has_close_survivor_ticks();
}
 ::google::protobuf::uint64 LogMetrics_CleanerMetrics_OnDiskMetrics::close_survivor_ticks() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.close_survivor_ticks)
  return close_survivor_ticks_;
}
 void LogMetrics_CleanerMetrics_OnDiskMetrics::set_close_survivor_ticks(::google::protobuf::uint64 value) {
  set_has_close_survivor_ticks();
  close_survivor_ticks_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.close_survivor_ticks)
}

// required fixed64 survivor_sync_ticks = 29;
bool LogMetrics_CleanerMetrics_OnDiskMetrics::has_survivor_sync_ticks() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::set_has_survivor_sync_ticks() {
  _has_bits_[0] |= 0x10000000u;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::clear_has_survivor_sync_ticks() {
  _has_bits_[0] &= ~0x10000000u;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::clear_survivor_sync_ticks() {
  survivor_sync_ticks_ = GOOGLE_ULONGLONG(0);
  clear_has_survivor_sync_ticks();
}
 ::google::protobuf::uint64 LogMetrics_CleanerMetrics_OnDiskMetrics::survivor_sync_ticks() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.survivor_sync_ticks)
  return survivor_sync_ticks_;
}
 void LogMetrics_CleanerMetrics_OnDiskMetrics::set_survivor_sync_ticks(::google::protobuf::uint64 value) {
  set_has_survivor_sync_ticks();
  survivor_sync_ticks_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.survivor_sync_ticks)
}

// required .RAMCloud.ProtoBuf.Histogram cleaned_segment_memory_histogram = 30;
bool LogMetrics_CleanerMetrics_OnDiskMetrics::has_cleaned_segment_memory_histogram() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::set_has_cleaned_segment_memory_histogram() {
  _has_bits_[0] |= 0x20000000u;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::clear_has_cleaned_segment_memory_histogram() {
  _has_bits_[0] &= ~0x20000000u;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::clear_cleaned_segment_memory_histogram() {
  if (cleaned_segment_memory_histogram_ != NULL) cleaned_segment_memory_histogram_->::RAMCloud::ProtoBuf::Histogram::Clear();
  clear_has_cleaned_segment_memory_histogram();
}
const ::RAMCloud::ProtoBuf::Histogram& LogMetrics_CleanerMetrics_OnDiskMetrics::cleaned_segment_memory_histogram() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.cleaned_segment_memory_histogram)
  return cleaned_segment_memory_histogram_ != NULL ? *cleaned_segment_memory_histogram_ : *default_instance_->cleaned_segment_memory_histogram_;
}
::RAMCloud::ProtoBuf::Histogram* LogMetrics_CleanerMetrics_OnDiskMetrics::mutable_cleaned_segment_memory_histogram() {
  set_has_cleaned_segment_memory_histogram();
  if (cleaned_segment_memory_histogram_ == NULL) {
    cleaned_segment_memory_histogram_ = new ::RAMCloud::ProtoBuf::Histogram;
  }
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.cleaned_segment_memory_histogram)
  return cleaned_segment_memory_histogram_;
}
::RAMCloud::ProtoBuf::Histogram* LogMetrics_CleanerMetrics_OnDiskMetrics::release_cleaned_segment_memory_histogram() {
  // @@protoc_insertion_point(field_release:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.cleaned_segment_memory_histogram)
  clear_has_cleaned_segment_memory_histogram();
  ::RAMCloud::ProtoBuf::Histogram* temp = cleaned_segment_memory_histogram_;
  cleaned_segment_memory_histogram_ = NULL;
  return temp;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::set_allocated_cleaned_segment_memory_histogram(::RAMCloud::ProtoBuf::Histogram* cleaned_segment_memory_histogram) {
  delete cleaned_segment_memory_histogram_;
  cleaned_segment_memory_histogram_ = cleaned_segment_memory_histogram;
  if (cleaned_segment_memory_histogram) {
    set_has_cleaned_segment_memory_histogram();
  } else {
    clear_has_cleaned_segment_memory_histogram();
  }
  // @@protoc_insertion_point(field_set_allocated:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.cleaned_segment_memory_histogram)
}

// required .RAMCloud.ProtoBuf.Histogram cleaned_segment_disk_histogram = 31;
bool LogMetrics_CleanerMetrics_OnDiskMetrics::has_cleaned_segment_disk_histogram() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::set_has_cleaned_segment_disk_histogram() {
  _has_bits_[0] |= 0x40000000u;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::clear_has_cleaned_segment_disk_histogram() {
  _has_bits_[0] &= ~0x40000000u;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::clear_cleaned_segment_disk_histogram() {
  if (cleaned_segment_disk_histogram_ != NULL) cleaned_segment_disk_histogram_->::RAMCloud::ProtoBuf::Histogram::Clear();
  clear_has_cleaned_segment_disk_histogram();
}
const ::RAMCloud::ProtoBuf::Histogram& LogMetrics_CleanerMetrics_OnDiskMetrics::cleaned_segment_disk_histogram() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.cleaned_segment_disk_histogram)
  return cleaned_segment_disk_histogram_ != NULL ? *cleaned_segment_disk_histogram_ : *default_instance_->cleaned_segment_disk_histogram_;
}
::RAMCloud::ProtoBuf::Histogram* LogMetrics_CleanerMetrics_OnDiskMetrics::mutable_cleaned_segment_disk_histogram() {
  set_has_cleaned_segment_disk_histogram();
  if (cleaned_segment_disk_histogram_ == NULL) {
    cleaned_segment_disk_histogram_ = new ::RAMCloud::ProtoBuf::Histogram;
  }
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.cleaned_segment_disk_histogram)
  return cleaned_segment_disk_histogram_;
}
::RAMCloud::ProtoBuf::Histogram* LogMetrics_CleanerMetrics_OnDiskMetrics::release_cleaned_segment_disk_histogram() {
  // @@protoc_insertion_point(field_release:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.cleaned_segment_disk_histogram)
  clear_has_cleaned_segment_disk_histogram();
  ::RAMCloud::ProtoBuf::Histogram* temp = cleaned_segment_disk_histogram_;
  cleaned_segment_disk_histogram_ = NULL;
  return temp;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::set_allocated_cleaned_segment_disk_histogram(::RAMCloud::ProtoBuf::Histogram* cleaned_segment_disk_histogram) {
  delete cleaned_segment_disk_histogram_;
  cleaned_segment_disk_histogram_ = cleaned_segment_disk_histogram;
  if (cleaned_segment_disk_histogram) {
    set_has_cleaned_segment_disk_histogram();
  } else {
    clear_has_cleaned_segment_disk_histogram();
  }
  // @@protoc_insertion_point(field_set_allocated:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.cleaned_segment_disk_histogram)
}

// required .RAMCloud.ProtoBuf.Histogram all_segments_disk_histogram = 32;
bool LogMetrics_CleanerMetrics_OnDiskMetrics::has_all_segments_disk_histogram() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::set_has_all_segments_disk_histogram() {
  _has_bits_[0] |= 0x80000000u;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::clear_has_all_segments_disk_histogram() {
  _has_bits_[0] &= ~0x80000000u;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::clear_all_segments_disk_histogram() {
  if (all_segments_disk_histogram_ != NULL) all_segments_disk_histogram_->::RAMCloud::ProtoBuf::Histogram::Clear();
  clear_has_all_segments_disk_histogram();
}
const ::RAMCloud::ProtoBuf::Histogram& LogMetrics_CleanerMetrics_OnDiskMetrics::all_segments_disk_histogram() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.all_segments_disk_histogram)
  return all_segments_disk_histogram_ != NULL ? *all_segments_disk_histogram_ : *default_instance_->all_segments_disk_histogram_;
}
::RAMCloud::ProtoBuf::Histogram* LogMetrics_CleanerMetrics_OnDiskMetrics::mutable_all_segments_disk_histogram() {
  set_has_all_segments_disk_histogram();
  if (all_segments_disk_histogram_ == NULL) {
    all_segments_disk_histogram_ = new ::RAMCloud::ProtoBuf::Histogram;
  }
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.all_segments_disk_histogram)
  return all_segments_disk_histogram_;
}
::RAMCloud::ProtoBuf::Histogram* LogMetrics_CleanerMetrics_OnDiskMetrics::release_all_segments_disk_histogram() {
  // @@protoc_insertion_point(field_release:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.all_segments_disk_histogram)
  clear_has_all_segments_disk_histogram();
  ::RAMCloud::ProtoBuf::Histogram* temp = all_segments_disk_histogram_;
  all_segments_disk_histogram_ = NULL;
  return temp;
}
void LogMetrics_CleanerMetrics_OnDiskMetrics::set_allocated_all_segments_disk_histogram(::RAMCloud::ProtoBuf::Histogram* all_segments_disk_histogram) {
  delete all_segments_disk_histogram_;
  all_segments_disk_histogram_ = all_segments_disk_histogram;
  if (all_segments_disk_histogram) {
    set_has_all_segments_disk_histogram();
  } else {
    clear_has_all_segments_disk_histogram();
  }
  // @@protoc_insertion_point(field_set_allocated:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics.all_segments_disk_histogram)
}

// -------------------------------------------------------------------

// LogMetrics_CleanerMetrics_ThreadMetrics

// repeated fixed64 active_ticks = 1;
int LogMetrics_CleanerMetrics_ThreadMetrics::active_ticks_size() const {
  return active_ticks_.size();
}
void LogMetrics_CleanerMetrics_ThreadMetrics::clear_active_ticks() {
  active_ticks_.Clear();
}
 ::google::protobuf::uint64 LogMetrics_CleanerMetrics_ThreadMetrics::active_ticks(int index) const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.ThreadMetrics.active_ticks)
  return active_ticks_.Get(index);
}
 void LogMetrics_CleanerMetrics_ThreadMetrics::set_active_ticks(int index, ::google::protobuf::uint64 value) {
  active_ticks_.Set(index, value);
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.ThreadMetrics.active_ticks)
}
 void LogMetrics_CleanerMetrics_ThreadMetrics::add_active_ticks(::google::protobuf::uint64 value) {
  active_ticks_.Add(value);
  // @@protoc_insertion_point(field_add:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.ThreadMetrics.active_ticks)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
LogMetrics_CleanerMetrics_ThreadMetrics::active_ticks() const {
  // @@protoc_insertion_point(field_list:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.ThreadMetrics.active_ticks)
  return active_ticks_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
LogMetrics_CleanerMetrics_ThreadMetrics::mutable_active_ticks() {
  // @@protoc_insertion_point(field_mutable_list:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.ThreadMetrics.active_ticks)
  return &active_ticks_;
}

// -------------------------------------------------------------------

// LogMetrics_CleanerMetrics

// required fixed32 poll_usec = 1;
bool LogMetrics_CleanerMetrics::has_poll_usec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LogMetrics_CleanerMetrics::set_has_poll_usec() {
  _has_bits_[0] |= 0x00000001u;
}
void LogMetrics_CleanerMetrics::clear_has_poll_usec() {
  _has_bits_[0] &= ~0x00000001u;
}
void LogMetrics_CleanerMetrics::clear_poll_usec() {
  poll_usec_ = 0u;
  clear_has_poll_usec();
}
 ::google::protobuf::uint32 LogMetrics_CleanerMetrics::poll_usec() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.poll_usec)
  return poll_usec_;
}
 void LogMetrics_CleanerMetrics::set_poll_usec(::google::protobuf::uint32 value) {
  set_has_poll_usec();
  poll_usec_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.poll_usec)
}

// required fixed32 max_cleanable_memory_utilization = 2;
bool LogMetrics_CleanerMetrics::has_max_cleanable_memory_utilization() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LogMetrics_CleanerMetrics::set_has_max_cleanable_memory_utilization() {
  _has_bits_[0] |= 0x00000002u;
}
void LogMetrics_CleanerMetrics::clear_has_max_cleanable_memory_utilization() {
  _has_bits_[0] &= ~0x00000002u;
}
void LogMetrics_CleanerMetrics::clear_max_cleanable_memory_utilization() {
  max_cleanable_memory_utilization_ = 0u;
  clear_has_max_cleanable_memory_utilization();
}
 ::google::protobuf::uint32 LogMetrics_CleanerMetrics::max_cleanable_memory_utilization() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.max_cleanable_memory_utilization)
  return max_cleanable_memory_utilization_;
}
 void LogMetrics_CleanerMetrics::set_max_cleanable_memory_utilization(::google::protobuf::uint32 value) {
  set_has_max_cleanable_memory_utilization();
  max_cleanable_memory_utilization_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.max_cleanable_memory_utilization)
}

// required fixed32 live_segments_per_disk_pass = 3;
bool LogMetrics_CleanerMetrics::has_live_segments_per_disk_pass() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LogMetrics_CleanerMetrics::set_has_live_segments_per_disk_pass() {
  _has_bits_[0] |= 0x00000004u;
}
void LogMetrics_CleanerMetrics::clear_has_live_segments_per_disk_pass() {
  _has_bits_[0] &= ~0x00000004u;
}
void LogMetrics_CleanerMetrics::clear_live_segments_per_disk_pass() {
  live_segments_per_disk_pass_ = 0u;
  clear_has_live_segments_per_disk_pass();
}
 ::google::protobuf::uint32 LogMetrics_CleanerMetrics::live_segments_per_disk_pass() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.live_segments_per_disk_pass)
  return live_segments_per_disk_pass_;
}
 void LogMetrics_CleanerMetrics::set_live_segments_per_disk_pass(::google::protobuf::uint32 value) {
  set_has_live_segments_per_disk_pass();
  live_segments_per_disk_pass_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.live_segments_per_disk_pass)
}

// required fixed32 survivor_segments_to_reserve = 4;
bool LogMetrics_CleanerMetrics::has_survivor_segments_to_reserve() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LogMetrics_CleanerMetrics::set_has_survivor_segments_to_reserve() {
  _has_bits_[0] |= 0x00000008u;
}
void LogMetrics_CleanerMetrics::clear_has_survivor_segments_to_reserve() {
  _has_bits_[0] &= ~0x00000008u;
}
void LogMetrics_CleanerMetrics::clear_survivor_segments_to_reserve() {
  survivor_segments_to_reserve_ = 0u;
  clear_has_survivor_segments_to_reserve();
}
 ::google::protobuf::uint32 LogMetrics_CleanerMetrics::survivor_segments_to_reserve() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.survivor_segments_to_reserve)
  return survivor_segments_to_reserve_;
}
 void LogMetrics_CleanerMetrics::set_survivor_segments_to_reserve(::google::protobuf::uint32 value) {
  set_has_survivor_segments_to_reserve();
  survivor_segments_to_reserve_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.survivor_segments_to_reserve)
}

// required fixed32 min_memory_utilization = 5;
bool LogMetrics_CleanerMetrics::has_min_memory_utilization() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LogMetrics_CleanerMetrics::set_has_min_memory_utilization() {
  _has_bits_[0] |= 0x00000010u;
}
void LogMetrics_CleanerMetrics::clear_has_min_memory_utilization() {
  _has_bits_[0] &= ~0x00000010u;
}
void LogMetrics_CleanerMetrics::clear_min_memory_utilization() {
  min_memory_utilization_ = 0u;
  clear_has_min_memory_utilization();
}
 ::google::protobuf::uint32 LogMetrics_CleanerMetrics::min_memory_utilization() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.min_memory_utilization)
  return min_memory_utilization_;
}
 void LogMetrics_CleanerMetrics::set_min_memory_utilization(::google::protobuf::uint32 value) {
  set_has_min_memory_utilization();
  min_memory_utilization_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.min_memory_utilization)
}

// required fixed32 min_disk_utilization = 6;
bool LogMetrics_CleanerMetrics::has_min_disk_utilization() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LogMetrics_CleanerMetrics::set_has_min_disk_utilization() {
  _has_bits_[0] |= 0x00000020u;
}
void LogMetrics_CleanerMetrics::clear_has_min_disk_utilization() {
  _has_bits_[0] &= ~0x00000020u;
}
void LogMetrics_CleanerMetrics::clear_min_disk_utilization() {
  min_disk_utilization_ = 0u;
  clear_has_min_disk_utilization();
}
 ::google::protobuf::uint32 LogMetrics_CleanerMetrics::min_disk_utilization() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.min_disk_utilization)
  return min_disk_utilization_;
}
 void LogMetrics_CleanerMetrics::set_min_disk_utilization(::google::protobuf::uint32 value) {
  set_has_min_disk_utilization();
  min_disk_utilization_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.min_disk_utilization)
}

// required fixed64 do_work_ticks = 7;
bool LogMetrics_CleanerMetrics::has_do_work_ticks() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void LogMetrics_CleanerMetrics::set_has_do_work_ticks() {
  _has_bits_[0] |= 0x00000040u;
}
void LogMetrics_CleanerMetrics::clear_has_do_work_ticks() {
  _has_bits_[0] &= ~0x00000040u;
}
void LogMetrics_CleanerMetrics::clear_do_work_ticks() {
  do_work_ticks_ = GOOGLE_ULONGLONG(0);
  clear_has_do_work_ticks();
}
 ::google::protobuf::uint64 LogMetrics_CleanerMetrics::do_work_ticks() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.do_work_ticks)
  return do_work_ticks_;
}
 void LogMetrics_CleanerMetrics::set_do_work_ticks(::google::protobuf::uint64 value) {
  set_has_do_work_ticks();
  do_work_ticks_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.do_work_ticks)
}

// required fixed64 do_work_sleep_ticks = 8;
bool LogMetrics_CleanerMetrics::has_do_work_sleep_ticks() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void LogMetrics_CleanerMetrics::set_has_do_work_sleep_ticks() {
  _has_bits_[0] |= 0x00000080u;
}
void LogMetrics_CleanerMetrics::clear_has_do_work_sleep_ticks() {
  _has_bits_[0] &= ~0x00000080u;
}
void LogMetrics_CleanerMetrics::clear_do_work_sleep_ticks() {
  do_work_sleep_ticks_ = GOOGLE_ULONGLONG(0);
  clear_has_do_work_sleep_ticks();
}
 ::google::protobuf::uint64 LogMetrics_CleanerMetrics::do_work_sleep_ticks() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.do_work_sleep_ticks)
  return do_work_sleep_ticks_;
}
 void LogMetrics_CleanerMetrics::set_do_work_sleep_ticks(::google::protobuf::uint64 value) {
  set_has_do_work_sleep_ticks();
  do_work_sleep_ticks_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.do_work_sleep_ticks)
}

// required .RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.InMemoryMetrics in_memory_metrics = 9;
bool LogMetrics_CleanerMetrics::has_in_memory_metrics() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void LogMetrics_CleanerMetrics::set_has_in_memory_metrics() {
  _has_bits_[0] |= 0x00000100u;
}
void LogMetrics_CleanerMetrics::clear_has_in_memory_metrics() {
  _has_bits_[0] &= ~0x00000100u;
}
void LogMetrics_CleanerMetrics::clear_in_memory_metrics() {
  if (in_memory_metrics_ != NULL) in_memory_metrics_->::RAMCloud::ProtoBuf::LogMetrics_CleanerMetrics_InMemoryMetrics::Clear();
  clear_has_in_memory_metrics();
}
const ::RAMCloud::ProtoBuf::LogMetrics_CleanerMetrics_InMemoryMetrics& LogMetrics_CleanerMetrics::in_memory_metrics() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.in_memory_metrics)
  return in_memory_metrics_ != NULL ? *in_memory_metrics_ : *default_instance_->in_memory_metrics_;
}
::RAMCloud::ProtoBuf::LogMetrics_CleanerMetrics_InMemoryMetrics* LogMetrics_CleanerMetrics::mutable_in_memory_metrics() {
  set_has_in_memory_metrics();
  if (in_memory_metrics_ == NULL) {
    in_memory_metrics_ = new ::RAMCloud::ProtoBuf::LogMetrics_CleanerMetrics_InMemoryMetrics;
  }
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.in_memory_metrics)
  return in_memory_metrics_;
}
::RAMCloud::ProtoBuf::LogMetrics_CleanerMetrics_InMemoryMetrics* LogMetrics_CleanerMetrics::release_in_memory_metrics() {
  // @@protoc_insertion_point(field_release:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.in_memory_metrics)
  clear_has_in_memory_metrics();
  ::RAMCloud::ProtoBuf::LogMetrics_CleanerMetrics_InMemoryMetrics* temp = in_memory_metrics_;
  in_memory_metrics_ = NULL;
  return temp;
}
void LogMetrics_CleanerMetrics::set_allocated_in_memory_metrics(::RAMCloud::ProtoBuf::LogMetrics_CleanerMetrics_InMemoryMetrics* in_memory_metrics) {
  delete in_memory_metrics_;
  in_memory_metrics_ = in_memory_metrics;
  if (in_memory_metrics) {
    set_has_in_memory_metrics();
  } else {
    clear_has_in_memory_metrics();
  }
  // @@protoc_insertion_point(field_set_allocated:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.in_memory_metrics)
}

// required .RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.OnDiskMetrics on_disk_metrics = 10;
bool LogMetrics_CleanerMetrics::has_on_disk_metrics() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void LogMetrics_CleanerMetrics::set_has_on_disk_metrics() {
  _has_bits_[0] |= 0x00000200u;
}
void LogMetrics_CleanerMetrics::clear_has_on_disk_metrics() {
  _has_bits_[0] &= ~0x00000200u;
}
void LogMetrics_CleanerMetrics::clear_on_disk_metrics() {
  if (on_disk_metrics_ != NULL) on_disk_metrics_->::RAMCloud::ProtoBuf::LogMetrics_CleanerMetrics_OnDiskMetrics::Clear();
  clear_has_on_disk_metrics();
}
const ::RAMCloud::ProtoBuf::LogMetrics_CleanerMetrics_OnDiskMetrics& LogMetrics_CleanerMetrics::on_disk_metrics() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.on_disk_metrics)
  return on_disk_metrics_ != NULL ? *on_disk_metrics_ : *default_instance_->on_disk_metrics_;
}
::RAMCloud::ProtoBuf::LogMetrics_CleanerMetrics_OnDiskMetrics* LogMetrics_CleanerMetrics::mutable_on_disk_metrics() {
  set_has_on_disk_metrics();
  if (on_disk_metrics_ == NULL) {
    on_disk_metrics_ = new ::RAMCloud::ProtoBuf::LogMetrics_CleanerMetrics_OnDiskMetrics;
  }
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.on_disk_metrics)
  return on_disk_metrics_;
}
::RAMCloud::ProtoBuf::LogMetrics_CleanerMetrics_OnDiskMetrics* LogMetrics_CleanerMetrics::release_on_disk_metrics() {
  // @@protoc_insertion_point(field_release:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.on_disk_metrics)
  clear_has_on_disk_metrics();
  ::RAMCloud::ProtoBuf::LogMetrics_CleanerMetrics_OnDiskMetrics* temp = on_disk_metrics_;
  on_disk_metrics_ = NULL;
  return temp;
}
void LogMetrics_CleanerMetrics::set_allocated_on_disk_metrics(::RAMCloud::ProtoBuf::LogMetrics_CleanerMetrics_OnDiskMetrics* on_disk_metrics) {
  delete on_disk_metrics_;
  on_disk_metrics_ = on_disk_metrics;
  if (on_disk_metrics) {
    set_has_on_disk_metrics();
  } else {
    clear_has_on_disk_metrics();
  }
  // @@protoc_insertion_point(field_set_allocated:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.on_disk_metrics)
}

// required .RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.ThreadMetrics thread_metrics = 11;
bool LogMetrics_CleanerMetrics::has_thread_metrics() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void LogMetrics_CleanerMetrics::set_has_thread_metrics() {
  _has_bits_[0] |= 0x00000400u;
}
void LogMetrics_CleanerMetrics::clear_has_thread_metrics() {
  _has_bits_[0] &= ~0x00000400u;
}
void LogMetrics_CleanerMetrics::clear_thread_metrics() {
  if (thread_metrics_ != NULL) thread_metrics_->::RAMCloud::ProtoBuf::LogMetrics_CleanerMetrics_ThreadMetrics::Clear();
  clear_has_thread_metrics();
}
const ::RAMCloud::ProtoBuf::LogMetrics_CleanerMetrics_ThreadMetrics& LogMetrics_CleanerMetrics::thread_metrics() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.thread_metrics)
  return thread_metrics_ != NULL ? *thread_metrics_ : *default_instance_->thread_metrics_;
}
::RAMCloud::ProtoBuf::LogMetrics_CleanerMetrics_ThreadMetrics* LogMetrics_CleanerMetrics::mutable_thread_metrics() {
  set_has_thread_metrics();
  if (thread_metrics_ == NULL) {
    thread_metrics_ = new ::RAMCloud::ProtoBuf::LogMetrics_CleanerMetrics_ThreadMetrics;
  }
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.thread_metrics)
  return thread_metrics_;
}
::RAMCloud::ProtoBuf::LogMetrics_CleanerMetrics_ThreadMetrics* LogMetrics_CleanerMetrics::release_thread_metrics() {
  // @@protoc_insertion_point(field_release:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.thread_metrics)
  clear_has_thread_metrics();
  ::RAMCloud::ProtoBuf::LogMetrics_CleanerMetrics_ThreadMetrics* temp = thread_metrics_;
  thread_metrics_ = NULL;
  return temp;
}
void LogMetrics_CleanerMetrics::set_allocated_thread_metrics(::RAMCloud::ProtoBuf::LogMetrics_CleanerMetrics_ThreadMetrics* thread_metrics) {
  delete thread_metrics_;
  thread_metrics_ = thread_metrics;
  if (thread_metrics) {
    set_has_thread_metrics();
  } else {
    clear_has_thread_metrics();
  }
  // @@protoc_insertion_point(field_set_allocated:RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics.thread_metrics)
}

// -------------------------------------------------------------------

// LogMetrics_SegletMetrics

// required fixed64 total_seglets = 1;
bool LogMetrics_SegletMetrics::has_total_seglets() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LogMetrics_SegletMetrics::set_has_total_seglets() {
  _has_bits_[0] |= 0x00000001u;
}
void LogMetrics_SegletMetrics::clear_has_total_seglets() {
  _has_bits_[0] &= ~0x00000001u;
}
void LogMetrics_SegletMetrics::clear_total_seglets() {
  total_seglets_ = GOOGLE_ULONGLONG(0);
  clear_has_total_seglets();
}
 ::google::protobuf::uint64 LogMetrics_SegletMetrics::total_seglets() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.SegletMetrics.total_seglets)
  return total_seglets_;
}
 void LogMetrics_SegletMetrics::set_total_seglets(::google::protobuf::uint64 value) {
  set_has_total_seglets();
  total_seglets_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.SegletMetrics.total_seglets)
}

// required fixed64 total_usable_seglets = 2;
bool LogMetrics_SegletMetrics::has_total_usable_seglets() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LogMetrics_SegletMetrics::set_has_total_usable_seglets() {
  _has_bits_[0] |= 0x00000002u;
}
void LogMetrics_SegletMetrics::clear_has_total_usable_seglets() {
  _has_bits_[0] &= ~0x00000002u;
}
void LogMetrics_SegletMetrics::clear_total_usable_seglets() {
  total_usable_seglets_ = GOOGLE_ULONGLONG(0);
  clear_has_total_usable_seglets();
}
 ::google::protobuf::uint64 LogMetrics_SegletMetrics::total_usable_seglets() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.SegletMetrics.total_usable_seglets)
  return total_usable_seglets_;
}
 void LogMetrics_SegletMetrics::set_total_usable_seglets(::google::protobuf::uint64 value) {
  set_has_total_usable_seglets();
  total_usable_seglets_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.SegletMetrics.total_usable_seglets)
}

// required fixed64 emergency_head_pool_reserve = 3;
bool LogMetrics_SegletMetrics::has_emergency_head_pool_reserve() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LogMetrics_SegletMetrics::set_has_emergency_head_pool_reserve() {
  _has_bits_[0] |= 0x00000004u;
}
void LogMetrics_SegletMetrics::clear_has_emergency_head_pool_reserve() {
  _has_bits_[0] &= ~0x00000004u;
}
void LogMetrics_SegletMetrics::clear_emergency_head_pool_reserve() {
  emergency_head_pool_reserve_ = GOOGLE_ULONGLONG(0);
  clear_has_emergency_head_pool_reserve();
}
 ::google::protobuf::uint64 LogMetrics_SegletMetrics::emergency_head_pool_reserve() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.SegletMetrics.emergency_head_pool_reserve)
  return emergency_head_pool_reserve_;
}
 void LogMetrics_SegletMetrics::set_emergency_head_pool_reserve(::google::protobuf::uint64 value) {
  set_has_emergency_head_pool_reserve();
  emergency_head_pool_reserve_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.SegletMetrics.emergency_head_pool_reserve)
}

// required fixed64 emergency_head_pool_count = 4;
bool LogMetrics_SegletMetrics::has_emergency_head_pool_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LogMetrics_SegletMetrics::set_has_emergency_head_pool_count() {
  _has_bits_[0] |= 0x00000008u;
}
void LogMetrics_SegletMetrics::clear_has_emergency_head_pool_count() {
  _has_bits_[0] &= ~0x00000008u;
}
void LogMetrics_SegletMetrics::clear_emergency_head_pool_count() {
  emergency_head_pool_count_ = GOOGLE_ULONGLONG(0);
  clear_has_emergency_head_pool_count();
}
 ::google::protobuf::uint64 LogMetrics_SegletMetrics::emergency_head_pool_count() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.SegletMetrics.emergency_head_pool_count)
  return emergency_head_pool_count_;
}
 void LogMetrics_SegletMetrics::set_emergency_head_pool_count(::google::protobuf::uint64 value) {
  set_has_emergency_head_pool_count();
  emergency_head_pool_count_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.SegletMetrics.emergency_head_pool_count)
}

// required fixed64 cleaner_pool_reserve = 5;
bool LogMetrics_SegletMetrics::has_cleaner_pool_reserve() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LogMetrics_SegletMetrics::set_has_cleaner_pool_reserve() {
  _has_bits_[0] |= 0x00000010u;
}
void LogMetrics_SegletMetrics::clear_has_cleaner_pool_reserve() {
  _has_bits_[0] &= ~0x00000010u;
}
void LogMetrics_SegletMetrics::clear_cleaner_pool_reserve() {
  cleaner_pool_reserve_ = GOOGLE_ULONGLONG(0);
  clear_has_cleaner_pool_reserve();
}
 ::google::protobuf::uint64 LogMetrics_SegletMetrics::cleaner_pool_reserve() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.SegletMetrics.cleaner_pool_reserve)
  return cleaner_pool_reserve_;
}
 void LogMetrics_SegletMetrics::set_cleaner_pool_reserve(::google::protobuf::uint64 value) {
  set_has_cleaner_pool_reserve();
  cleaner_pool_reserve_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.SegletMetrics.cleaner_pool_reserve)
}

// required fixed64 cleaner_pool_count = 6;
bool LogMetrics_SegletMetrics::has_cleaner_pool_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LogMetrics_SegletMetrics::set_has_cleaner_pool_count() {
  _has_bits_[0] |= 0x00000020u;
}
void LogMetrics_SegletMetrics::clear_has_cleaner_pool_count() {
  _has_bits_[0] &= ~0x00000020u;
}
void LogMetrics_SegletMetrics::clear_cleaner_pool_count() {
  cleaner_pool_count_ = GOOGLE_ULONGLONG(0);
  clear_has_cleaner_pool_count();
}
 ::google::protobuf::uint64 LogMetrics_SegletMetrics::cleaner_pool_count() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.SegletMetrics.cleaner_pool_count)
  return cleaner_pool_count_;
}
 void LogMetrics_SegletMetrics::set_cleaner_pool_count(::google::protobuf::uint64 value) {
  set_has_cleaner_pool_count();
  cleaner_pool_count_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.SegletMetrics.cleaner_pool_count)
}

// required fixed64 default_pool_count = 7;
bool LogMetrics_SegletMetrics::has_default_pool_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void LogMetrics_SegletMetrics::set_has_default_pool_count() {
  _has_bits_[0] |= 0x00000040u;
}
void LogMetrics_SegletMetrics::clear_has_default_pool_count() {
  _has_bits_[0] &= ~0x00000040u;
}
void LogMetrics_SegletMetrics::clear_default_pool_count() {
  default_pool_count_ = GOOGLE_ULONGLONG(0);
  clear_has_default_pool_count();
}
 ::google::protobuf::uint64 LogMetrics_SegletMetrics::default_pool_count() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.SegletMetrics.default_pool_count)
  return default_pool_count_;
}
 void LogMetrics_SegletMetrics::set_default_pool_count(::google::protobuf::uint64 value) {
  set_has_default_pool_count();
  default_pool_count_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.SegletMetrics.default_pool_count)
}

// -------------------------------------------------------------------

// LogMetrics_SegmentMetrics

// required .RAMCloud.ProtoBuf.Histogram segments_on_disk_histogram = 1;
bool LogMetrics_SegmentMetrics::has_segments_on_disk_histogram() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LogMetrics_SegmentMetrics::set_has_segments_on_disk_histogram() {
  _has_bits_[0] |= 0x00000001u;
}
void LogMetrics_SegmentMetrics::clear_has_segments_on_disk_histogram() {
  _has_bits_[0] &= ~0x00000001u;
}
void LogMetrics_SegmentMetrics::clear_segments_on_disk_histogram() {
  if (segments_on_disk_histogram_ != NULL) segments_on_disk_histogram_->::RAMCloud::ProtoBuf::Histogram::Clear();
  clear_has_segments_on_disk_histogram();
}
const ::RAMCloud::ProtoBuf::Histogram& LogMetrics_SegmentMetrics::segments_on_disk_histogram() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.SegmentMetrics.segments_on_disk_histogram)
  return segments_on_disk_histogram_ != NULL ? *segments_on_disk_histogram_ : *default_instance_->segments_on_disk_histogram_;
}
::RAMCloud::ProtoBuf::Histogram* LogMetrics_SegmentMetrics::mutable_segments_on_disk_histogram() {
  set_has_segments_on_disk_histogram();
  if (segments_on_disk_histogram_ == NULL) {
    segments_on_disk_histogram_ = new ::RAMCloud::ProtoBuf::Histogram;
  }
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.LogMetrics.SegmentMetrics.segments_on_disk_histogram)
  return segments_on_disk_histogram_;
}
::RAMCloud::ProtoBuf::Histogram* LogMetrics_SegmentMetrics::release_segments_on_disk_histogram() {
  // @@protoc_insertion_point(field_release:RAMCloud.ProtoBuf.LogMetrics.SegmentMetrics.segments_on_disk_histogram)
  clear_has_segments_on_disk_histogram();
  ::RAMCloud::ProtoBuf::Histogram* temp = segments_on_disk_histogram_;
  segments_on_disk_histogram_ = NULL;
  return temp;
}
void LogMetrics_SegmentMetrics::set_allocated_segments_on_disk_histogram(::RAMCloud::ProtoBuf::Histogram* segments_on_disk_histogram) {
  delete segments_on_disk_histogram_;
  segments_on_disk_histogram_ = segments_on_disk_histogram;
  if (segments_on_disk_histogram) {
    set_has_segments_on_disk_histogram();
  } else {
    clear_has_segments_on_disk_histogram();
  }
  // @@protoc_insertion_point(field_set_allocated:RAMCloud.ProtoBuf.LogMetrics.SegmentMetrics.segments_on_disk_histogram)
}

// required fixed64 current_segments_on_disk = 2;
bool LogMetrics_SegmentMetrics::has_current_segments_on_disk() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LogMetrics_SegmentMetrics::set_has_current_segments_on_disk() {
  _has_bits_[0] |= 0x00000002u;
}
void LogMetrics_SegmentMetrics::clear_has_current_segments_on_disk() {
  _has_bits_[0] &= ~0x00000002u;
}
void LogMetrics_SegmentMetrics::clear_current_segments_on_disk() {
  current_segments_on_disk_ = GOOGLE_ULONGLONG(0);
  clear_has_current_segments_on_disk();
}
 ::google::protobuf::uint64 LogMetrics_SegmentMetrics::current_segments_on_disk() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.SegmentMetrics.current_segments_on_disk)
  return current_segments_on_disk_;
}
 void LogMetrics_SegmentMetrics::set_current_segments_on_disk(::google::protobuf::uint64 value) {
  set_has_current_segments_on_disk();
  current_segments_on_disk_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.SegmentMetrics.current_segments_on_disk)
}

// repeated fixed64 total_entry_counts = 3;
int LogMetrics_SegmentMetrics::total_entry_counts_size() const {
  return total_entry_counts_.size();
}
void LogMetrics_SegmentMetrics::clear_total_entry_counts() {
  total_entry_counts_.Clear();
}
 ::google::protobuf::uint64 LogMetrics_SegmentMetrics::total_entry_counts(int index) const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.SegmentMetrics.total_entry_counts)
  return total_entry_counts_.Get(index);
}
 void LogMetrics_SegmentMetrics::set_total_entry_counts(int index, ::google::protobuf::uint64 value) {
  total_entry_counts_.Set(index, value);
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.SegmentMetrics.total_entry_counts)
}
 void LogMetrics_SegmentMetrics::add_total_entry_counts(::google::protobuf::uint64 value) {
  total_entry_counts_.Add(value);
  // @@protoc_insertion_point(field_add:RAMCloud.ProtoBuf.LogMetrics.SegmentMetrics.total_entry_counts)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
LogMetrics_SegmentMetrics::total_entry_counts() const {
  // @@protoc_insertion_point(field_list:RAMCloud.ProtoBuf.LogMetrics.SegmentMetrics.total_entry_counts)
  return total_entry_counts_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
LogMetrics_SegmentMetrics::mutable_total_entry_counts() {
  // @@protoc_insertion_point(field_mutable_list:RAMCloud.ProtoBuf.LogMetrics.SegmentMetrics.total_entry_counts)
  return &total_entry_counts_;
}

// repeated fixed64 total_entry_lengths = 4;
int LogMetrics_SegmentMetrics::total_entry_lengths_size() const {
  return total_entry_lengths_.size();
}
void LogMetrics_SegmentMetrics::clear_total_entry_lengths() {
  total_entry_lengths_.Clear();
}
 ::google::protobuf::uint64 LogMetrics_SegmentMetrics::total_entry_lengths(int index) const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.SegmentMetrics.total_entry_lengths)
  return total_entry_lengths_.Get(index);
}
 void LogMetrics_SegmentMetrics::set_total_entry_lengths(int index, ::google::protobuf::uint64 value) {
  total_entry_lengths_.Set(index, value);
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.SegmentMetrics.total_entry_lengths)
}
 void LogMetrics_SegmentMetrics::add_total_entry_lengths(::google::protobuf::uint64 value) {
  total_entry_lengths_.Add(value);
  // @@protoc_insertion_point(field_add:RAMCloud.ProtoBuf.LogMetrics.SegmentMetrics.total_entry_lengths)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
LogMetrics_SegmentMetrics::total_entry_lengths() const {
  // @@protoc_insertion_point(field_list:RAMCloud.ProtoBuf.LogMetrics.SegmentMetrics.total_entry_lengths)
  return total_entry_lengths_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
LogMetrics_SegmentMetrics::mutable_total_entry_lengths() {
  // @@protoc_insertion_point(field_mutable_list:RAMCloud.ProtoBuf.LogMetrics.SegmentMetrics.total_entry_lengths)
  return &total_entry_lengths_;
}

// -------------------------------------------------------------------

// LogMetrics

// required double ticks_per_second = 1;
bool LogMetrics::has_ticks_per_second() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LogMetrics::set_has_ticks_per_second() {
  _has_bits_[0] |= 0x00000001u;
}
void LogMetrics::clear_has_ticks_per_second() {
  _has_bits_[0] &= ~0x00000001u;
}
void LogMetrics::clear_ticks_per_second() {
  ticks_per_second_ = 0;
  clear_has_ticks_per_second();
}
 double LogMetrics::ticks_per_second() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.ticks_per_second)
  return ticks_per_second_;
}
 void LogMetrics::set_ticks_per_second(double value) {
  set_has_ticks_per_second();
  ticks_per_second_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.ticks_per_second)
}

// required fixed64 total_sync_calls = 2;
bool LogMetrics::has_total_sync_calls() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LogMetrics::set_has_total_sync_calls() {
  _has_bits_[0] |= 0x00000002u;
}
void LogMetrics::clear_has_total_sync_calls() {
  _has_bits_[0] &= ~0x00000002u;
}
void LogMetrics::clear_total_sync_calls() {
  total_sync_calls_ = GOOGLE_ULONGLONG(0);
  clear_has_total_sync_calls();
}
 ::google::protobuf::uint64 LogMetrics::total_sync_calls() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.total_sync_calls)
  return total_sync_calls_;
}
 void LogMetrics::set_total_sync_calls(::google::protobuf::uint64 value) {
  set_has_total_sync_calls();
  total_sync_calls_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.total_sync_calls)
}

// required fixed64 total_sync_ticks = 3;
bool LogMetrics::has_total_sync_ticks() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LogMetrics::set_has_total_sync_ticks() {
  _has_bits_[0] |= 0x00000004u;
}
void LogMetrics::clear_has_total_sync_ticks() {
  _has_bits_[0] &= ~0x00000004u;
}
void LogMetrics::clear_total_sync_ticks() {
  total_sync_ticks_ = GOOGLE_ULONGLONG(0);
  clear_has_total_sync_ticks();
}
 ::google::protobuf::uint64 LogMetrics::total_sync_ticks() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.total_sync_ticks)
  return total_sync_ticks_;
}
 void LogMetrics::set_total_sync_ticks(::google::protobuf::uint64 value) {
  set_has_total_sync_ticks();
  total_sync_ticks_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.total_sync_ticks)
}

// required fixed64 total_append_calls = 4;
bool LogMetrics::has_total_append_calls() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LogMetrics::set_has_total_append_calls() {
  _has_bits_[0] |= 0x00000008u;
}
void LogMetrics::clear_has_total_append_calls() {
  _has_bits_[0] &= ~0x00000008u;
}
void LogMetrics::clear_total_append_calls() {
  total_append_calls_ = GOOGLE_ULONGLONG(0);
  clear_has_total_append_calls();
}
 ::google::protobuf::uint64 LogMetrics::total_append_calls() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.total_append_calls)
  return total_append_calls_;
}
 void LogMetrics::set_total_append_calls(::google::protobuf::uint64 value) {
  set_has_total_append_calls();
  total_append_calls_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.total_append_calls)
}

// required fixed64 total_append_ticks = 5;
bool LogMetrics::has_total_append_ticks() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LogMetrics::set_has_total_append_ticks() {
  _has_bits_[0] |= 0x00000010u;
}
void LogMetrics::clear_has_total_append_ticks() {
  _has_bits_[0] &= ~0x00000010u;
}
void LogMetrics::clear_total_append_ticks() {
  total_append_ticks_ = GOOGLE_ULONGLONG(0);
  clear_has_total_append_ticks();
}
 ::google::protobuf::uint64 LogMetrics::total_append_ticks() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.total_append_ticks)
  return total_append_ticks_;
}
 void LogMetrics::set_total_append_ticks(::google::protobuf::uint64 value) {
  set_has_total_append_ticks();
  total_append_ticks_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.total_append_ticks)
}

// required fixed64 total_no_space_ticks = 6;
bool LogMetrics::has_total_no_space_ticks() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LogMetrics::set_has_total_no_space_ticks() {
  _has_bits_[0] |= 0x00000020u;
}
void LogMetrics::clear_has_total_no_space_ticks() {
  _has_bits_[0] &= ~0x00000020u;
}
void LogMetrics::clear_total_no_space_ticks() {
  total_no_space_ticks_ = GOOGLE_ULONGLONG(0);
  clear_has_total_no_space_ticks();
}
 ::google::protobuf::uint64 LogMetrics::total_no_space_ticks() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.total_no_space_ticks)
  return total_no_space_ticks_;
}
 void LogMetrics::set_total_no_space_ticks(::google::protobuf::uint64 value) {
  set_has_total_no_space_ticks();
  total_no_space_ticks_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.total_no_space_ticks)
}

// required fixed64 total_bytes_appended = 7;
bool LogMetrics::has_total_bytes_appended() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void LogMetrics::set_has_total_bytes_appended() {
  _has_bits_[0] |= 0x00000040u;
}
void LogMetrics::clear_has_total_bytes_appended() {
  _has_bits_[0] &= ~0x00000040u;
}
void LogMetrics::clear_total_bytes_appended() {
  total_bytes_appended_ = GOOGLE_ULONGLONG(0);
  clear_has_total_bytes_appended();
}
 ::google::protobuf::uint64 LogMetrics::total_bytes_appended() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.total_bytes_appended)
  return total_bytes_appended_;
}
 void LogMetrics::set_total_bytes_appended(::google::protobuf::uint64 value) {
  set_has_total_bytes_appended();
  total_bytes_appended_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.total_bytes_appended)
}

// required fixed64 total_metadata_bytes_appended = 8;
bool LogMetrics::has_total_metadata_bytes_appended() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void LogMetrics::set_has_total_metadata_bytes_appended() {
  _has_bits_[0] |= 0x00000080u;
}
void LogMetrics::clear_has_total_metadata_bytes_appended() {
  _has_bits_[0] &= ~0x00000080u;
}
void LogMetrics::clear_total_metadata_bytes_appended() {
  total_metadata_bytes_appended_ = GOOGLE_ULONGLONG(0);
  clear_has_total_metadata_bytes_appended();
}
 ::google::protobuf::uint64 LogMetrics::total_metadata_bytes_appended() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.total_metadata_bytes_appended)
  return total_metadata_bytes_appended_;
}
 void LogMetrics::set_total_metadata_bytes_appended(::google::protobuf::uint64 value) {
  set_has_total_metadata_bytes_appended();
  total_metadata_bytes_appended_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.LogMetrics.total_metadata_bytes_appended)
}

// required .RAMCloud.ProtoBuf.LogMetrics.CleanerMetrics cleaner_metrics = 9;
bool LogMetrics::has_cleaner_metrics() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void LogMetrics::set_has_cleaner_metrics() {
  _has_bits_[0] |= 0x00000100u;
}
void LogMetrics::clear_has_cleaner_metrics() {
  _has_bits_[0] &= ~0x00000100u;
}
void LogMetrics::clear_cleaner_metrics() {
  if (cleaner_metrics_ != NULL) cleaner_metrics_->::RAMCloud::ProtoBuf::LogMetrics_CleanerMetrics::Clear();
  clear_has_cleaner_metrics();
}
const ::RAMCloud::ProtoBuf::LogMetrics_CleanerMetrics& LogMetrics::cleaner_metrics() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.cleaner_metrics)
  return cleaner_metrics_ != NULL ? *cleaner_metrics_ : *default_instance_->cleaner_metrics_;
}
::RAMCloud::ProtoBuf::LogMetrics_CleanerMetrics* LogMetrics::mutable_cleaner_metrics() {
  set_has_cleaner_metrics();
  if (cleaner_metrics_ == NULL) {
    cleaner_metrics_ = new ::RAMCloud::ProtoBuf::LogMetrics_CleanerMetrics;
  }
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.LogMetrics.cleaner_metrics)
  return cleaner_metrics_;
}
::RAMCloud::ProtoBuf::LogMetrics_CleanerMetrics* LogMetrics::release_cleaner_metrics() {
  // @@protoc_insertion_point(field_release:RAMCloud.ProtoBuf.LogMetrics.cleaner_metrics)
  clear_has_cleaner_metrics();
  ::RAMCloud::ProtoBuf::LogMetrics_CleanerMetrics* temp = cleaner_metrics_;
  cleaner_metrics_ = NULL;
  return temp;
}
void LogMetrics::set_allocated_cleaner_metrics(::RAMCloud::ProtoBuf::LogMetrics_CleanerMetrics* cleaner_metrics) {
  delete cleaner_metrics_;
  cleaner_metrics_ = cleaner_metrics;
  if (cleaner_metrics) {
    set_has_cleaner_metrics();
  } else {
    clear_has_cleaner_metrics();
  }
  // @@protoc_insertion_point(field_set_allocated:RAMCloud.ProtoBuf.LogMetrics.cleaner_metrics)
}

// required .RAMCloud.ProtoBuf.LogMetrics.SegletMetrics seglet_metrics = 10;
bool LogMetrics::has_seglet_metrics() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void LogMetrics::set_has_seglet_metrics() {
  _has_bits_[0] |= 0x00000200u;
}
void LogMetrics::clear_has_seglet_metrics() {
  _has_bits_[0] &= ~0x00000200u;
}
void LogMetrics::clear_seglet_metrics() {
  if (seglet_metrics_ != NULL) seglet_metrics_->::RAMCloud::ProtoBuf::LogMetrics_SegletMetrics::Clear();
  clear_has_seglet_metrics();
}
const ::RAMCloud::ProtoBuf::LogMetrics_SegletMetrics& LogMetrics::seglet_metrics() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.seglet_metrics)
  return seglet_metrics_ != NULL ? *seglet_metrics_ : *default_instance_->seglet_metrics_;
}
::RAMCloud::ProtoBuf::LogMetrics_SegletMetrics* LogMetrics::mutable_seglet_metrics() {
  set_has_seglet_metrics();
  if (seglet_metrics_ == NULL) {
    seglet_metrics_ = new ::RAMCloud::ProtoBuf::LogMetrics_SegletMetrics;
  }
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.LogMetrics.seglet_metrics)
  return seglet_metrics_;
}
::RAMCloud::ProtoBuf::LogMetrics_SegletMetrics* LogMetrics::release_seglet_metrics() {
  // @@protoc_insertion_point(field_release:RAMCloud.ProtoBuf.LogMetrics.seglet_metrics)
  clear_has_seglet_metrics();
  ::RAMCloud::ProtoBuf::LogMetrics_SegletMetrics* temp = seglet_metrics_;
  seglet_metrics_ = NULL;
  return temp;
}
void LogMetrics::set_allocated_seglet_metrics(::RAMCloud::ProtoBuf::LogMetrics_SegletMetrics* seglet_metrics) {
  delete seglet_metrics_;
  seglet_metrics_ = seglet_metrics;
  if (seglet_metrics) {
    set_has_seglet_metrics();
  } else {
    clear_has_seglet_metrics();
  }
  // @@protoc_insertion_point(field_set_allocated:RAMCloud.ProtoBuf.LogMetrics.seglet_metrics)
}

// required .RAMCloud.ProtoBuf.LogMetrics.SegmentMetrics segment_metrics = 11;
bool LogMetrics::has_segment_metrics() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void LogMetrics::set_has_segment_metrics() {
  _has_bits_[0] |= 0x00000400u;
}
void LogMetrics::clear_has_segment_metrics() {
  _has_bits_[0] &= ~0x00000400u;
}
void LogMetrics::clear_segment_metrics() {
  if (segment_metrics_ != NULL) segment_metrics_->::RAMCloud::ProtoBuf::LogMetrics_SegmentMetrics::Clear();
  clear_has_segment_metrics();
}
const ::RAMCloud::ProtoBuf::LogMetrics_SegmentMetrics& LogMetrics::segment_metrics() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.LogMetrics.segment_metrics)
  return segment_metrics_ != NULL ? *segment_metrics_ : *default_instance_->segment_metrics_;
}
::RAMCloud::ProtoBuf::LogMetrics_SegmentMetrics* LogMetrics::mutable_segment_metrics() {
  set_has_segment_metrics();
  if (segment_metrics_ == NULL) {
    segment_metrics_ = new ::RAMCloud::ProtoBuf::LogMetrics_SegmentMetrics;
  }
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.LogMetrics.segment_metrics)
  return segment_metrics_;
}
::RAMCloud::ProtoBuf::LogMetrics_SegmentMetrics* LogMetrics::release_segment_metrics() {
  // @@protoc_insertion_point(field_release:RAMCloud.ProtoBuf.LogMetrics.segment_metrics)
  clear_has_segment_metrics();
  ::RAMCloud::ProtoBuf::LogMetrics_SegmentMetrics* temp = segment_metrics_;
  segment_metrics_ = NULL;
  return temp;
}
void LogMetrics::set_allocated_segment_metrics(::RAMCloud::ProtoBuf::LogMetrics_SegmentMetrics* segment_metrics) {
  delete segment_metrics_;
  segment_metrics_ = segment_metrics;
  if (segment_metrics) {
    set_has_segment_metrics();
  } else {
    clear_has_segment_metrics();
  }
  // @@protoc_insertion_point(field_set_allocated:RAMCloud.ProtoBuf.LogMetrics.segment_metrics)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoBuf
}  // namespace RAMCloud

// @@protoc_insertion_point(global_scope)
// RAMCloud pragma [GCCWARN=0]
