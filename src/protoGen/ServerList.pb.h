// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerList.proto

#ifndef PROTOBUF_ServerList_2eproto__INCLUDED
#define PROTOBUF_ServerList_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace RAMCloud {
namespace ProtoBuf {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_ServerList_2eproto();
void protobuf_AssignDesc_ServerList_2eproto();
void protobuf_ShutdownFile_ServerList_2eproto();

class ServerList;
class ServerList_Entry;

enum ServerList_Type {
  ServerList_Type_FULL_LIST = 0,
  ServerList_Type_UPDATE = 1
};
bool ServerList_Type_IsValid(int value);
const ServerList_Type ServerList_Type_Type_MIN = ServerList_Type_FULL_LIST;
const ServerList_Type ServerList_Type_Type_MAX = ServerList_Type_UPDATE;
const int ServerList_Type_Type_ARRAYSIZE = ServerList_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServerList_Type_descriptor();
inline const ::std::string& ServerList_Type_Name(ServerList_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServerList_Type_descriptor(), value);
}
inline bool ServerList_Type_Parse(
    const ::std::string& name, ServerList_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServerList_Type>(
    ServerList_Type_descriptor(), name, value);
}
// ===================================================================

class ServerList_Entry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RAMCloud.ProtoBuf.ServerList.Entry) */ {
 public:
  ServerList_Entry();
  virtual ~ServerList_Entry();

  ServerList_Entry(const ServerList_Entry& from);

  inline ServerList_Entry& operator=(const ServerList_Entry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerList_Entry& default_instance();

  void Swap(ServerList_Entry* other);

  // implements Message ----------------------------------------------

  inline ServerList_Entry* New() const { return New(NULL); }

  ServerList_Entry* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerList_Entry& from);
  void MergeFrom(const ServerList_Entry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServerList_Entry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed32 services = 1;
  bool has_services() const;
  void clear_services();
  static const int kServicesFieldNumber = 1;
  ::google::protobuf::uint32 services() const;
  void set_services(::google::protobuf::uint32 value);

  // required fixed64 server_id = 2;
  bool has_server_id() const;
  void clear_server_id();
  static const int kServerIdFieldNumber = 2;
  ::google::protobuf::uint64 server_id() const;
  void set_server_id(::google::protobuf::uint64 value);

  // required string service_locator = 3;
  bool has_service_locator() const;
  void clear_service_locator();
  static const int kServiceLocatorFieldNumber = 3;
  const ::std::string& service_locator() const;
  void set_service_locator(const ::std::string& value);
  void set_service_locator(const char* value);
  void set_service_locator(const char* value, size_t size);
  ::std::string* mutable_service_locator();
  ::std::string* release_service_locator();
  void set_allocated_service_locator(::std::string* service_locator);

  // required fixed32 expected_read_mbytes_per_sec = 5;
  bool has_expected_read_mbytes_per_sec() const;
  void clear_expected_read_mbytes_per_sec();
  static const int kExpectedReadMbytesPerSecFieldNumber = 5;
  ::google::protobuf::uint32 expected_read_mbytes_per_sec() const;
  void set_expected_read_mbytes_per_sec(::google::protobuf::uint32 value);

  // required fixed32 status = 6;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 6;
  ::google::protobuf::uint32 status() const;
  void set_status(::google::protobuf::uint32 value);

  // required fixed64 replication_id = 7;
  bool has_replication_id() const;
  void clear_replication_id();
  static const int kReplicationIdFieldNumber = 7;
  ::google::protobuf::uint64 replication_id() const;
  void set_replication_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:RAMCloud.ProtoBuf.ServerList.Entry)
 private:
  inline void set_has_services();
  inline void clear_has_services();
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_service_locator();
  inline void clear_has_service_locator();
  inline void set_has_expected_read_mbytes_per_sec();
  inline void clear_has_expected_read_mbytes_per_sec();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_replication_id();
  inline void clear_has_replication_id();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 server_id_;
  ::google::protobuf::uint32 services_;
  ::google::protobuf::uint32 expected_read_mbytes_per_sec_;
  ::google::protobuf::internal::ArenaStringPtr service_locator_;
  ::google::protobuf::uint64 replication_id_;
  ::google::protobuf::uint32 status_;
  friend void  protobuf_AddDesc_ServerList_2eproto();
  friend void protobuf_AssignDesc_ServerList_2eproto();
  friend void protobuf_ShutdownFile_ServerList_2eproto();

  void InitAsDefaultInstance();
  static ServerList_Entry* default_instance_;
};
// -------------------------------------------------------------------

class ServerList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RAMCloud.ProtoBuf.ServerList) */ {
 public:
  ServerList();
  virtual ~ServerList();

  ServerList(const ServerList& from);

  inline ServerList& operator=(const ServerList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerList& default_instance();

  void Swap(ServerList* other);

  // implements Message ----------------------------------------------

  inline ServerList* New() const { return New(NULL); }

  ServerList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerList& from);
  void MergeFrom(const ServerList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServerList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ServerList_Entry Entry;

  typedef ServerList_Type Type;
  static const Type FULL_LIST =
    ServerList_Type_FULL_LIST;
  static const Type UPDATE =
    ServerList_Type_UPDATE;
  static inline bool Type_IsValid(int value) {
    return ServerList_Type_IsValid(value);
  }
  static const Type Type_MIN =
    ServerList_Type_Type_MIN;
  static const Type Type_MAX =
    ServerList_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    ServerList_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return ServerList_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return ServerList_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return ServerList_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .RAMCloud.ProtoBuf.ServerList.Entry server = 1;
  int server_size() const;
  void clear_server();
  static const int kServerFieldNumber = 1;
  const ::RAMCloud::ProtoBuf::ServerList_Entry& server(int index) const;
  ::RAMCloud::ProtoBuf::ServerList_Entry* mutable_server(int index);
  ::RAMCloud::ProtoBuf::ServerList_Entry* add_server();
  ::google::protobuf::RepeatedPtrField< ::RAMCloud::ProtoBuf::ServerList_Entry >*
      mutable_server();
  const ::google::protobuf::RepeatedPtrField< ::RAMCloud::ProtoBuf::ServerList_Entry >&
      server() const;

  // required fixed64 version_number = 2;
  bool has_version_number() const;
  void clear_version_number();
  static const int kVersionNumberFieldNumber = 2;
  ::google::protobuf::uint64 version_number() const;
  void set_version_number(::google::protobuf::uint64 value);

  // required .RAMCloud.ProtoBuf.ServerList.Type type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::RAMCloud::ProtoBuf::ServerList_Type type() const;
  void set_type(::RAMCloud::ProtoBuf::ServerList_Type value);

  // @@protoc_insertion_point(class_scope:RAMCloud.ProtoBuf.ServerList)
 private:
  inline void set_has_version_number();
  inline void clear_has_version_number();
  inline void set_has_type();
  inline void clear_has_type();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::RAMCloud::ProtoBuf::ServerList_Entry > server_;
  ::google::protobuf::uint64 version_number_;
  int type_;
  friend void  protobuf_AddDesc_ServerList_2eproto();
  friend void protobuf_AssignDesc_ServerList_2eproto();
  friend void protobuf_ShutdownFile_ServerList_2eproto();

  void InitAsDefaultInstance();
  static ServerList* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerList_Entry

// required fixed32 services = 1;
inline bool ServerList_Entry::has_services() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerList_Entry::set_has_services() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerList_Entry::clear_has_services() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerList_Entry::clear_services() {
  services_ = 0u;
  clear_has_services();
}
inline ::google::protobuf::uint32 ServerList_Entry::services() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerList.Entry.services)
  return services_;
}
inline void ServerList_Entry::set_services(::google::protobuf::uint32 value) {
  set_has_services();
  services_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerList.Entry.services)
}

// required fixed64 server_id = 2;
inline bool ServerList_Entry::has_server_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerList_Entry::set_has_server_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerList_Entry::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerList_Entry::clear_server_id() {
  server_id_ = GOOGLE_ULONGLONG(0);
  clear_has_server_id();
}
inline ::google::protobuf::uint64 ServerList_Entry::server_id() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerList.Entry.server_id)
  return server_id_;
}
inline void ServerList_Entry::set_server_id(::google::protobuf::uint64 value) {
  set_has_server_id();
  server_id_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerList.Entry.server_id)
}

// required string service_locator = 3;
inline bool ServerList_Entry::has_service_locator() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerList_Entry::set_has_service_locator() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerList_Entry::clear_has_service_locator() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerList_Entry::clear_service_locator() {
  service_locator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_service_locator();
}
inline const ::std::string& ServerList_Entry::service_locator() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerList.Entry.service_locator)
  return service_locator_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerList_Entry::set_service_locator(const ::std::string& value) {
  set_has_service_locator();
  service_locator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerList.Entry.service_locator)
}
inline void ServerList_Entry::set_service_locator(const char* value) {
  set_has_service_locator();
  service_locator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RAMCloud.ProtoBuf.ServerList.Entry.service_locator)
}
inline void ServerList_Entry::set_service_locator(const char* value, size_t size) {
  set_has_service_locator();
  service_locator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RAMCloud.ProtoBuf.ServerList.Entry.service_locator)
}
inline ::std::string* ServerList_Entry::mutable_service_locator() {
  set_has_service_locator();
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.ServerList.Entry.service_locator)
  return service_locator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerList_Entry::release_service_locator() {
  // @@protoc_insertion_point(field_release:RAMCloud.ProtoBuf.ServerList.Entry.service_locator)
  clear_has_service_locator();
  return service_locator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerList_Entry::set_allocated_service_locator(::std::string* service_locator) {
  if (service_locator != NULL) {
    set_has_service_locator();
  } else {
    clear_has_service_locator();
  }
  service_locator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_locator);
  // @@protoc_insertion_point(field_set_allocated:RAMCloud.ProtoBuf.ServerList.Entry.service_locator)
}

// required fixed32 expected_read_mbytes_per_sec = 5;
inline bool ServerList_Entry::has_expected_read_mbytes_per_sec() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServerList_Entry::set_has_expected_read_mbytes_per_sec() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServerList_Entry::clear_has_expected_read_mbytes_per_sec() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServerList_Entry::clear_expected_read_mbytes_per_sec() {
  expected_read_mbytes_per_sec_ = 0u;
  clear_has_expected_read_mbytes_per_sec();
}
inline ::google::protobuf::uint32 ServerList_Entry::expected_read_mbytes_per_sec() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerList.Entry.expected_read_mbytes_per_sec)
  return expected_read_mbytes_per_sec_;
}
inline void ServerList_Entry::set_expected_read_mbytes_per_sec(::google::protobuf::uint32 value) {
  set_has_expected_read_mbytes_per_sec();
  expected_read_mbytes_per_sec_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerList.Entry.expected_read_mbytes_per_sec)
}

// required fixed32 status = 6;
inline bool ServerList_Entry::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ServerList_Entry::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ServerList_Entry::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ServerList_Entry::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 ServerList_Entry::status() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerList.Entry.status)
  return status_;
}
inline void ServerList_Entry::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerList.Entry.status)
}

// required fixed64 replication_id = 7;
inline bool ServerList_Entry::has_replication_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ServerList_Entry::set_has_replication_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ServerList_Entry::clear_has_replication_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ServerList_Entry::clear_replication_id() {
  replication_id_ = GOOGLE_ULONGLONG(0);
  clear_has_replication_id();
}
inline ::google::protobuf::uint64 ServerList_Entry::replication_id() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerList.Entry.replication_id)
  return replication_id_;
}
inline void ServerList_Entry::set_replication_id(::google::protobuf::uint64 value) {
  set_has_replication_id();
  replication_id_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerList.Entry.replication_id)
}

// -------------------------------------------------------------------

// ServerList

// repeated .RAMCloud.ProtoBuf.ServerList.Entry server = 1;
inline int ServerList::server_size() const {
  return server_.size();
}
inline void ServerList::clear_server() {
  server_.Clear();
}
inline const ::RAMCloud::ProtoBuf::ServerList_Entry& ServerList::server(int index) const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerList.server)
  return server_.Get(index);
}
inline ::RAMCloud::ProtoBuf::ServerList_Entry* ServerList::mutable_server(int index) {
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.ServerList.server)
  return server_.Mutable(index);
}
inline ::RAMCloud::ProtoBuf::ServerList_Entry* ServerList::add_server() {
  // @@protoc_insertion_point(field_add:RAMCloud.ProtoBuf.ServerList.server)
  return server_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::RAMCloud::ProtoBuf::ServerList_Entry >*
ServerList::mutable_server() {
  // @@protoc_insertion_point(field_mutable_list:RAMCloud.ProtoBuf.ServerList.server)
  return &server_;
}
inline const ::google::protobuf::RepeatedPtrField< ::RAMCloud::ProtoBuf::ServerList_Entry >&
ServerList::server() const {
  // @@protoc_insertion_point(field_list:RAMCloud.ProtoBuf.ServerList.server)
  return server_;
}

// required fixed64 version_number = 2;
inline bool ServerList::has_version_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerList::set_has_version_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerList::clear_has_version_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerList::clear_version_number() {
  version_number_ = GOOGLE_ULONGLONG(0);
  clear_has_version_number();
}
inline ::google::protobuf::uint64 ServerList::version_number() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerList.version_number)
  return version_number_;
}
inline void ServerList::set_version_number(::google::protobuf::uint64 value) {
  set_has_version_number();
  version_number_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerList.version_number)
}

// required .RAMCloud.ProtoBuf.ServerList.Type type = 3;
inline bool ServerList::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerList::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerList::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerList::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::RAMCloud::ProtoBuf::ServerList_Type ServerList::type() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.ServerList.type)
  return static_cast< ::RAMCloud::ProtoBuf::ServerList_Type >(type_);
}
inline void ServerList::set_type(::RAMCloud::ProtoBuf::ServerList_Type value) {
  assert(::RAMCloud::ProtoBuf::ServerList_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.ServerList.type)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoBuf
}  // namespace RAMCloud

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::RAMCloud::ProtoBuf::ServerList_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RAMCloud::ProtoBuf::ServerList_Type>() {
  return ::RAMCloud::ProtoBuf::ServerList_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ServerList_2eproto__INCLUDED
// RAMCloud pragma [GCCWARN=0]
