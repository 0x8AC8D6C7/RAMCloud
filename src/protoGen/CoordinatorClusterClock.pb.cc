// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CoordinatorClusterClock.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CoordinatorClusterClock.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace RAMCloud {
namespace ProtoBuf {

namespace {

const ::google::protobuf::Descriptor* CoordinatorClusterClock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CoordinatorClusterClock_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CoordinatorClusterClock_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_CoordinatorClusterClock_2eproto() {
  protobuf_AddDesc_CoordinatorClusterClock_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CoordinatorClusterClock.proto");
  GOOGLE_CHECK(file != NULL);
  CoordinatorClusterClock_descriptor_ = file->message_type(0);
  static const int CoordinatorClusterClock_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoordinatorClusterClock, next_safe_time_),
  };
  CoordinatorClusterClock_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CoordinatorClusterClock_descriptor_,
      CoordinatorClusterClock::default_instance_,
      CoordinatorClusterClock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoordinatorClusterClock, _has_bits_[0]),
      -1,
      -1,
      sizeof(CoordinatorClusterClock),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoordinatorClusterClock, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CoordinatorClusterClock_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CoordinatorClusterClock_descriptor_, &CoordinatorClusterClock::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CoordinatorClusterClock_2eproto() {
  delete CoordinatorClusterClock::default_instance_;
  delete CoordinatorClusterClock_reflection_;
}

void protobuf_AddDesc_CoordinatorClusterClock_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_CoordinatorClusterClock_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035CoordinatorClusterClock.proto\022\021RAMClou"
    "d.ProtoBuf\"1\n\027CoordinatorClusterClock\022\026\n"
    "\016next_safe_time\030\001 \002(\004", 101);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CoordinatorClusterClock.proto", &protobuf_RegisterTypes);
  CoordinatorClusterClock::default_instance_ = new CoordinatorClusterClock();
  CoordinatorClusterClock::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CoordinatorClusterClock_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CoordinatorClusterClock_2eproto {
  StaticDescriptorInitializer_CoordinatorClusterClock_2eproto() {
    protobuf_AddDesc_CoordinatorClusterClock_2eproto();
  }
} static_descriptor_initializer_CoordinatorClusterClock_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CoordinatorClusterClock::kNextSafeTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CoordinatorClusterClock::CoordinatorClusterClock()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RAMCloud.ProtoBuf.CoordinatorClusterClock)
}

void CoordinatorClusterClock::InitAsDefaultInstance() {
}

CoordinatorClusterClock::CoordinatorClusterClock(const CoordinatorClusterClock& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RAMCloud.ProtoBuf.CoordinatorClusterClock)
}

void CoordinatorClusterClock::SharedCtor() {
  _cached_size_ = 0;
  next_safe_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CoordinatorClusterClock::~CoordinatorClusterClock() {
  // @@protoc_insertion_point(destructor:RAMCloud.ProtoBuf.CoordinatorClusterClock)
  SharedDtor();
}

void CoordinatorClusterClock::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CoordinatorClusterClock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CoordinatorClusterClock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CoordinatorClusterClock_descriptor_;
}

const CoordinatorClusterClock& CoordinatorClusterClock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CoordinatorClusterClock_2eproto();
  return *default_instance_;
}

CoordinatorClusterClock* CoordinatorClusterClock::default_instance_ = NULL;

CoordinatorClusterClock* CoordinatorClusterClock::New(::google::protobuf::Arena* arena) const {
  CoordinatorClusterClock* n = new CoordinatorClusterClock;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CoordinatorClusterClock::Clear() {
// @@protoc_insertion_point(message_clear_start:RAMCloud.ProtoBuf.CoordinatorClusterClock)
  next_safe_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CoordinatorClusterClock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RAMCloud.ProtoBuf.CoordinatorClusterClock)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 next_safe_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &next_safe_time_)));
          set_has_next_safe_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RAMCloud.ProtoBuf.CoordinatorClusterClock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RAMCloud.ProtoBuf.CoordinatorClusterClock)
  return false;
#undef DO_
}

void CoordinatorClusterClock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RAMCloud.ProtoBuf.CoordinatorClusterClock)
  // required uint64 next_safe_time = 1;
  if (has_next_safe_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->next_safe_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RAMCloud.ProtoBuf.CoordinatorClusterClock)
}

::google::protobuf::uint8* CoordinatorClusterClock::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RAMCloud.ProtoBuf.CoordinatorClusterClock)
  // required uint64 next_safe_time = 1;
  if (has_next_safe_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->next_safe_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RAMCloud.ProtoBuf.CoordinatorClusterClock)
  return target;
}

int CoordinatorClusterClock::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:RAMCloud.ProtoBuf.CoordinatorClusterClock)
  int total_size = 0;

  // required uint64 next_safe_time = 1;
  if (has_next_safe_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->next_safe_time());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CoordinatorClusterClock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RAMCloud.ProtoBuf.CoordinatorClusterClock)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CoordinatorClusterClock* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CoordinatorClusterClock>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RAMCloud.ProtoBuf.CoordinatorClusterClock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RAMCloud.ProtoBuf.CoordinatorClusterClock)
    MergeFrom(*source);
  }
}

void CoordinatorClusterClock::MergeFrom(const CoordinatorClusterClock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RAMCloud.ProtoBuf.CoordinatorClusterClock)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_next_safe_time()) {
      set_next_safe_time(from.next_safe_time());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CoordinatorClusterClock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RAMCloud.ProtoBuf.CoordinatorClusterClock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoordinatorClusterClock::CopyFrom(const CoordinatorClusterClock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RAMCloud.ProtoBuf.CoordinatorClusterClock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoordinatorClusterClock::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CoordinatorClusterClock::Swap(CoordinatorClusterClock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CoordinatorClusterClock::InternalSwap(CoordinatorClusterClock* other) {
  std::swap(next_safe_time_, other->next_safe_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CoordinatorClusterClock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CoordinatorClusterClock_descriptor_;
  metadata.reflection = CoordinatorClusterClock_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CoordinatorClusterClock

// required uint64 next_safe_time = 1;
bool CoordinatorClusterClock::has_next_safe_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CoordinatorClusterClock::set_has_next_safe_time() {
  _has_bits_[0] |= 0x00000001u;
}
void CoordinatorClusterClock::clear_has_next_safe_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void CoordinatorClusterClock::clear_next_safe_time() {
  next_safe_time_ = GOOGLE_ULONGLONG(0);
  clear_has_next_safe_time();
}
 ::google::protobuf::uint64 CoordinatorClusterClock::next_safe_time() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.CoordinatorClusterClock.next_safe_time)
  return next_safe_time_;
}
 void CoordinatorClusterClock::set_next_safe_time(::google::protobuf::uint64 value) {
  set_has_next_safe_time();
  next_safe_time_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.CoordinatorClusterClock.next_safe_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoBuf
}  // namespace RAMCloud

// @@protoc_insertion_point(global_scope)
// RAMCloud pragma [GCCWARN=0]
