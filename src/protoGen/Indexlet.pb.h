// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Indexlet.proto

#ifndef PROTOBUF_Indexlet_2eproto__INCLUDED
#define PROTOBUF_Indexlet_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace RAMCloud {
namespace ProtoBuf {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_Indexlet_2eproto();
void protobuf_AssignDesc_Indexlet_2eproto();
void protobuf_ShutdownFile_Indexlet_2eproto();

class Indexlet;

// ===================================================================

class Indexlet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RAMCloud.ProtoBuf.Indexlet) */ {
 public:
  Indexlet();
  virtual ~Indexlet();

  Indexlet(const Indexlet& from);

  inline Indexlet& operator=(const Indexlet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Indexlet& default_instance();

  void Swap(Indexlet* other);

  // implements Message ----------------------------------------------

  inline Indexlet* New() const { return New(NULL); }

  Indexlet* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Indexlet& from);
  void MergeFrom(const Indexlet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Indexlet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 table_id = 1;
  bool has_table_id() const;
  void clear_table_id();
  static const int kTableIdFieldNumber = 1;
  ::google::protobuf::uint64 table_id() const;
  void set_table_id(::google::protobuf::uint64 value);

  // required uint32 index_id = 2;
  bool has_index_id() const;
  void clear_index_id();
  static const int kIndexIdFieldNumber = 2;
  ::google::protobuf::uint32 index_id() const;
  void set_index_id(::google::protobuf::uint32 value);

  // required uint64 backing_table_id = 3;
  bool has_backing_table_id() const;
  void clear_backing_table_id();
  static const int kBackingTableIdFieldNumber = 3;
  ::google::protobuf::uint64 backing_table_id() const;
  void set_backing_table_id(::google::protobuf::uint64 value);

  // optional bytes first_key = 4;
  bool has_first_key() const;
  void clear_first_key();
  static const int kFirstKeyFieldNumber = 4;
  const ::std::string& first_key() const;
  void set_first_key(const ::std::string& value);
  void set_first_key(const char* value);
  void set_first_key(const void* value, size_t size);
  ::std::string* mutable_first_key();
  ::std::string* release_first_key();
  void set_allocated_first_key(::std::string* first_key);

  // optional bytes first_not_owned_key = 5;
  bool has_first_not_owned_key() const;
  void clear_first_not_owned_key();
  static const int kFirstNotOwnedKeyFieldNumber = 5;
  const ::std::string& first_not_owned_key() const;
  void set_first_not_owned_key(const ::std::string& value);
  void set_first_not_owned_key(const char* value);
  void set_first_not_owned_key(const void* value, size_t size);
  ::std::string* mutable_first_not_owned_key();
  ::std::string* release_first_not_owned_key();
  void set_allocated_first_not_owned_key(::std::string* first_not_owned_key);

  // optional fixed64 server_id = 6;
  bool has_server_id() const;
  void clear_server_id();
  static const int kServerIdFieldNumber = 6;
  ::google::protobuf::uint64 server_id() const;
  void set_server_id(::google::protobuf::uint64 value);

  // optional string service_locator = 7;
  bool has_service_locator() const;
  void clear_service_locator();
  static const int kServiceLocatorFieldNumber = 7;
  const ::std::string& service_locator() const;
  void set_service_locator(const ::std::string& value);
  void set_service_locator(const char* value);
  void set_service_locator(const char* value, size_t size);
  ::std::string* mutable_service_locator();
  ::std::string* release_service_locator();
  void set_allocated_service_locator(::std::string* service_locator);

  // optional fixed64 user_data = 8;
  bool has_user_data() const;
  void clear_user_data();
  static const int kUserDataFieldNumber = 8;
  ::google::protobuf::uint64 user_data() const;
  void set_user_data(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:RAMCloud.ProtoBuf.Indexlet)
 private:
  inline void set_has_table_id();
  inline void clear_has_table_id();
  inline void set_has_index_id();
  inline void clear_has_index_id();
  inline void set_has_backing_table_id();
  inline void clear_has_backing_table_id();
  inline void set_has_first_key();
  inline void clear_has_first_key();
  inline void set_has_first_not_owned_key();
  inline void clear_has_first_not_owned_key();
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_service_locator();
  inline void clear_has_service_locator();
  inline void set_has_user_data();
  inline void clear_has_user_data();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 table_id_;
  ::google::protobuf::uint64 backing_table_id_;
  ::google::protobuf::internal::ArenaStringPtr first_key_;
  ::google::protobuf::internal::ArenaStringPtr first_not_owned_key_;
  ::google::protobuf::uint64 server_id_;
  ::google::protobuf::internal::ArenaStringPtr service_locator_;
  ::google::protobuf::uint64 user_data_;
  ::google::protobuf::uint32 index_id_;
  friend void  protobuf_AddDesc_Indexlet_2eproto();
  friend void protobuf_AssignDesc_Indexlet_2eproto();
  friend void protobuf_ShutdownFile_Indexlet_2eproto();

  void InitAsDefaultInstance();
  static Indexlet* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Indexlet

// required uint64 table_id = 1;
inline bool Indexlet::has_table_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Indexlet::set_has_table_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Indexlet::clear_has_table_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Indexlet::clear_table_id() {
  table_id_ = GOOGLE_ULONGLONG(0);
  clear_has_table_id();
}
inline ::google::protobuf::uint64 Indexlet::table_id() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Indexlet.table_id)
  return table_id_;
}
inline void Indexlet::set_table_id(::google::protobuf::uint64 value) {
  set_has_table_id();
  table_id_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Indexlet.table_id)
}

// required uint32 index_id = 2;
inline bool Indexlet::has_index_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Indexlet::set_has_index_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Indexlet::clear_has_index_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Indexlet::clear_index_id() {
  index_id_ = 0u;
  clear_has_index_id();
}
inline ::google::protobuf::uint32 Indexlet::index_id() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Indexlet.index_id)
  return index_id_;
}
inline void Indexlet::set_index_id(::google::protobuf::uint32 value) {
  set_has_index_id();
  index_id_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Indexlet.index_id)
}

// required uint64 backing_table_id = 3;
inline bool Indexlet::has_backing_table_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Indexlet::set_has_backing_table_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Indexlet::clear_has_backing_table_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Indexlet::clear_backing_table_id() {
  backing_table_id_ = GOOGLE_ULONGLONG(0);
  clear_has_backing_table_id();
}
inline ::google::protobuf::uint64 Indexlet::backing_table_id() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Indexlet.backing_table_id)
  return backing_table_id_;
}
inline void Indexlet::set_backing_table_id(::google::protobuf::uint64 value) {
  set_has_backing_table_id();
  backing_table_id_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Indexlet.backing_table_id)
}

// optional bytes first_key = 4;
inline bool Indexlet::has_first_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Indexlet::set_has_first_key() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Indexlet::clear_has_first_key() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Indexlet::clear_first_key() {
  first_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_first_key();
}
inline const ::std::string& Indexlet::first_key() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Indexlet.first_key)
  return first_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Indexlet::set_first_key(const ::std::string& value) {
  set_has_first_key();
  first_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Indexlet.first_key)
}
inline void Indexlet::set_first_key(const char* value) {
  set_has_first_key();
  first_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RAMCloud.ProtoBuf.Indexlet.first_key)
}
inline void Indexlet::set_first_key(const void* value, size_t size) {
  set_has_first_key();
  first_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RAMCloud.ProtoBuf.Indexlet.first_key)
}
inline ::std::string* Indexlet::mutable_first_key() {
  set_has_first_key();
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.Indexlet.first_key)
  return first_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Indexlet::release_first_key() {
  // @@protoc_insertion_point(field_release:RAMCloud.ProtoBuf.Indexlet.first_key)
  clear_has_first_key();
  return first_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Indexlet::set_allocated_first_key(::std::string* first_key) {
  if (first_key != NULL) {
    set_has_first_key();
  } else {
    clear_has_first_key();
  }
  first_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), first_key);
  // @@protoc_insertion_point(field_set_allocated:RAMCloud.ProtoBuf.Indexlet.first_key)
}

// optional bytes first_not_owned_key = 5;
inline bool Indexlet::has_first_not_owned_key() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Indexlet::set_has_first_not_owned_key() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Indexlet::clear_has_first_not_owned_key() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Indexlet::clear_first_not_owned_key() {
  first_not_owned_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_first_not_owned_key();
}
inline const ::std::string& Indexlet::first_not_owned_key() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Indexlet.first_not_owned_key)
  return first_not_owned_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Indexlet::set_first_not_owned_key(const ::std::string& value) {
  set_has_first_not_owned_key();
  first_not_owned_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Indexlet.first_not_owned_key)
}
inline void Indexlet::set_first_not_owned_key(const char* value) {
  set_has_first_not_owned_key();
  first_not_owned_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RAMCloud.ProtoBuf.Indexlet.first_not_owned_key)
}
inline void Indexlet::set_first_not_owned_key(const void* value, size_t size) {
  set_has_first_not_owned_key();
  first_not_owned_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RAMCloud.ProtoBuf.Indexlet.first_not_owned_key)
}
inline ::std::string* Indexlet::mutable_first_not_owned_key() {
  set_has_first_not_owned_key();
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.Indexlet.first_not_owned_key)
  return first_not_owned_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Indexlet::release_first_not_owned_key() {
  // @@protoc_insertion_point(field_release:RAMCloud.ProtoBuf.Indexlet.first_not_owned_key)
  clear_has_first_not_owned_key();
  return first_not_owned_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Indexlet::set_allocated_first_not_owned_key(::std::string* first_not_owned_key) {
  if (first_not_owned_key != NULL) {
    set_has_first_not_owned_key();
  } else {
    clear_has_first_not_owned_key();
  }
  first_not_owned_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), first_not_owned_key);
  // @@protoc_insertion_point(field_set_allocated:RAMCloud.ProtoBuf.Indexlet.first_not_owned_key)
}

// optional fixed64 server_id = 6;
inline bool Indexlet::has_server_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Indexlet::set_has_server_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Indexlet::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Indexlet::clear_server_id() {
  server_id_ = GOOGLE_ULONGLONG(0);
  clear_has_server_id();
}
inline ::google::protobuf::uint64 Indexlet::server_id() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Indexlet.server_id)
  return server_id_;
}
inline void Indexlet::set_server_id(::google::protobuf::uint64 value) {
  set_has_server_id();
  server_id_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Indexlet.server_id)
}

// optional string service_locator = 7;
inline bool Indexlet::has_service_locator() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Indexlet::set_has_service_locator() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Indexlet::clear_has_service_locator() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Indexlet::clear_service_locator() {
  service_locator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_service_locator();
}
inline const ::std::string& Indexlet::service_locator() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Indexlet.service_locator)
  return service_locator_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Indexlet::set_service_locator(const ::std::string& value) {
  set_has_service_locator();
  service_locator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Indexlet.service_locator)
}
inline void Indexlet::set_service_locator(const char* value) {
  set_has_service_locator();
  service_locator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RAMCloud.ProtoBuf.Indexlet.service_locator)
}
inline void Indexlet::set_service_locator(const char* value, size_t size) {
  set_has_service_locator();
  service_locator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RAMCloud.ProtoBuf.Indexlet.service_locator)
}
inline ::std::string* Indexlet::mutable_service_locator() {
  set_has_service_locator();
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.Indexlet.service_locator)
  return service_locator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Indexlet::release_service_locator() {
  // @@protoc_insertion_point(field_release:RAMCloud.ProtoBuf.Indexlet.service_locator)
  clear_has_service_locator();
  return service_locator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Indexlet::set_allocated_service_locator(::std::string* service_locator) {
  if (service_locator != NULL) {
    set_has_service_locator();
  } else {
    clear_has_service_locator();
  }
  service_locator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_locator);
  // @@protoc_insertion_point(field_set_allocated:RAMCloud.ProtoBuf.Indexlet.service_locator)
}

// optional fixed64 user_data = 8;
inline bool Indexlet::has_user_data() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Indexlet::set_has_user_data() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Indexlet::clear_has_user_data() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Indexlet::clear_user_data() {
  user_data_ = GOOGLE_ULONGLONG(0);
  clear_has_user_data();
}
inline ::google::protobuf::uint64 Indexlet::user_data() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Indexlet.user_data)
  return user_data_;
}
inline void Indexlet::set_user_data(::google::protobuf::uint64 value) {
  set_has_user_data();
  user_data_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Indexlet.user_data)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoBuf
}  // namespace RAMCloud

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Indexlet_2eproto__INCLUDED
// RAMCloud pragma [GCCWARN=0]
