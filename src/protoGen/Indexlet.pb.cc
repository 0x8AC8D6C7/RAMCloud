// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Indexlet.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Indexlet.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace RAMCloud {
namespace ProtoBuf {

namespace {

const ::google::protobuf::Descriptor* Indexlet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Indexlet_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Indexlet_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_Indexlet_2eproto() {
  protobuf_AddDesc_Indexlet_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Indexlet.proto");
  GOOGLE_CHECK(file != NULL);
  Indexlet_descriptor_ = file->message_type(0);
  static const int Indexlet_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Indexlet, table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Indexlet, index_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Indexlet, backing_table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Indexlet, first_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Indexlet, first_not_owned_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Indexlet, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Indexlet, service_locator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Indexlet, user_data_),
  };
  Indexlet_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Indexlet_descriptor_,
      Indexlet::default_instance_,
      Indexlet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Indexlet, _has_bits_[0]),
      -1,
      -1,
      sizeof(Indexlet),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Indexlet, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Indexlet_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Indexlet_descriptor_, &Indexlet::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Indexlet_2eproto() {
  delete Indexlet::default_instance_;
  delete Indexlet_reflection_;
}

void protobuf_AddDesc_Indexlet_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_Indexlet_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016Indexlet.proto\022\021RAMCloud.ProtoBuf\"\267\001\n\010"
    "Indexlet\022\020\n\010table_id\030\001 \002(\004\022\020\n\010index_id\030\002"
    " \002(\r\022\030\n\020backing_table_id\030\003 \002(\004\022\021\n\tfirst_"
    "key\030\004 \001(\014\022\033\n\023first_not_owned_key\030\005 \001(\014\022\021"
    "\n\tserver_id\030\006 \001(\006\022\027\n\017service_locator\030\007 \001"
    "(\t\022\021\n\tuser_data\030\010 \001(\006", 221);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Indexlet.proto", &protobuf_RegisterTypes);
  Indexlet::default_instance_ = new Indexlet();
  Indexlet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Indexlet_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Indexlet_2eproto {
  StaticDescriptorInitializer_Indexlet_2eproto() {
    protobuf_AddDesc_Indexlet_2eproto();
  }
} static_descriptor_initializer_Indexlet_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Indexlet::kTableIdFieldNumber;
const int Indexlet::kIndexIdFieldNumber;
const int Indexlet::kBackingTableIdFieldNumber;
const int Indexlet::kFirstKeyFieldNumber;
const int Indexlet::kFirstNotOwnedKeyFieldNumber;
const int Indexlet::kServerIdFieldNumber;
const int Indexlet::kServiceLocatorFieldNumber;
const int Indexlet::kUserDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Indexlet::Indexlet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RAMCloud.ProtoBuf.Indexlet)
}

void Indexlet::InitAsDefaultInstance() {
}

Indexlet::Indexlet(const Indexlet& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RAMCloud.ProtoBuf.Indexlet)
}

void Indexlet::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  table_id_ = GOOGLE_ULONGLONG(0);
  index_id_ = 0u;
  backing_table_id_ = GOOGLE_ULONGLONG(0);
  first_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  first_not_owned_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_id_ = GOOGLE_ULONGLONG(0);
  service_locator_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_data_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Indexlet::~Indexlet() {
  // @@protoc_insertion_point(destructor:RAMCloud.ProtoBuf.Indexlet)
  SharedDtor();
}

void Indexlet::SharedDtor() {
  first_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  first_not_owned_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_locator_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Indexlet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Indexlet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Indexlet_descriptor_;
}

const Indexlet& Indexlet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Indexlet_2eproto();
  return *default_instance_;
}

Indexlet* Indexlet::default_instance_ = NULL;

Indexlet* Indexlet::New(::google::protobuf::Arena* arena) const {
  Indexlet* n = new Indexlet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Indexlet::Clear() {
// @@protoc_insertion_point(message_clear_start:RAMCloud.ProtoBuf.Indexlet)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Indexlet, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Indexlet*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(table_id_, backing_table_id_);
    ZR_(user_data_, index_id_);
    if (has_first_key()) {
      first_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_first_not_owned_key()) {
      first_not_owned_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    server_id_ = GOOGLE_ULONGLONG(0);
    if (has_service_locator()) {
      service_locator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Indexlet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RAMCloud.ProtoBuf.Indexlet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 table_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_index_id;
        break;
      }

      // required uint32 index_id = 2;
      case 2: {
        if (tag == 16) {
         parse_index_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_id_)));
          set_has_index_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_backing_table_id;
        break;
      }

      // required uint64 backing_table_id = 3;
      case 3: {
        if (tag == 24) {
         parse_backing_table_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &backing_table_id_)));
          set_has_backing_table_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_first_key;
        break;
      }

      // optional bytes first_key = 4;
      case 4: {
        if (tag == 34) {
         parse_first_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_first_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_first_not_owned_key;
        break;
      }

      // optional bytes first_not_owned_key = 5;
      case 5: {
        if (tag == 42) {
         parse_first_not_owned_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_first_not_owned_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_server_id;
        break;
      }

      // optional fixed64 server_id = 6;
      case 6: {
        if (tag == 49) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_service_locator;
        break;
      }

      // optional string service_locator = 7;
      case 7: {
        if (tag == 58) {
         parse_service_locator:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_locator()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->service_locator().data(), this->service_locator().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RAMCloud.ProtoBuf.Indexlet.service_locator");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_user_data;
        break;
      }

      // optional fixed64 user_data = 8;
      case 8: {
        if (tag == 65) {
         parse_user_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_data_)));
          set_has_user_data();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RAMCloud.ProtoBuf.Indexlet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RAMCloud.ProtoBuf.Indexlet)
  return false;
#undef DO_
}

void Indexlet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RAMCloud.ProtoBuf.Indexlet)
  // required uint64 table_id = 1;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->table_id(), output);
  }

  // required uint32 index_id = 2;
  if (has_index_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->index_id(), output);
  }

  // required uint64 backing_table_id = 3;
  if (has_backing_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->backing_table_id(), output);
  }

  // optional bytes first_key = 4;
  if (has_first_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->first_key(), output);
  }

  // optional bytes first_not_owned_key = 5;
  if (has_first_not_owned_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->first_not_owned_key(), output);
  }

  // optional fixed64 server_id = 6;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->server_id(), output);
  }

  // optional string service_locator = 7;
  if (has_service_locator()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_locator().data(), this->service_locator().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RAMCloud.ProtoBuf.Indexlet.service_locator");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->service_locator(), output);
  }

  // optional fixed64 user_data = 8;
  if (has_user_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(8, this->user_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RAMCloud.ProtoBuf.Indexlet)
}

::google::protobuf::uint8* Indexlet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RAMCloud.ProtoBuf.Indexlet)
  // required uint64 table_id = 1;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->table_id(), target);
  }

  // required uint32 index_id = 2;
  if (has_index_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->index_id(), target);
  }

  // required uint64 backing_table_id = 3;
  if (has_backing_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->backing_table_id(), target);
  }

  // optional bytes first_key = 4;
  if (has_first_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->first_key(), target);
  }

  // optional bytes first_not_owned_key = 5;
  if (has_first_not_owned_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->first_not_owned_key(), target);
  }

  // optional fixed64 server_id = 6;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->server_id(), target);
  }

  // optional string service_locator = 7;
  if (has_service_locator()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_locator().data(), this->service_locator().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RAMCloud.ProtoBuf.Indexlet.service_locator");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->service_locator(), target);
  }

  // optional fixed64 user_data = 8;
  if (has_user_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(8, this->user_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RAMCloud.ProtoBuf.Indexlet)
  return target;
}

int Indexlet::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RAMCloud.ProtoBuf.Indexlet)
  int total_size = 0;

  if (has_table_id()) {
    // required uint64 table_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->table_id());
  }

  if (has_index_id()) {
    // required uint32 index_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->index_id());
  }

  if (has_backing_table_id()) {
    // required uint64 backing_table_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->backing_table_id());
  }

  return total_size;
}
int Indexlet::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:RAMCloud.ProtoBuf.Indexlet)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint64 table_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->table_id());

    // required uint32 index_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->index_id());

    // required uint64 backing_table_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->backing_table_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[3 / 32] & 248u) {
    // optional bytes first_key = 4;
    if (has_first_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->first_key());
    }

    // optional bytes first_not_owned_key = 5;
    if (has_first_not_owned_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->first_not_owned_key());
    }

    // optional fixed64 server_id = 6;
    if (has_server_id()) {
      total_size += 1 + 8;
    }

    // optional string service_locator = 7;
    if (has_service_locator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_locator());
    }

    // optional fixed64 user_data = 8;
    if (has_user_data()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Indexlet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RAMCloud.ProtoBuf.Indexlet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Indexlet* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Indexlet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RAMCloud.ProtoBuf.Indexlet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RAMCloud.ProtoBuf.Indexlet)
    MergeFrom(*source);
  }
}

void Indexlet::MergeFrom(const Indexlet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RAMCloud.ProtoBuf.Indexlet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
    if (from.has_index_id()) {
      set_index_id(from.index_id());
    }
    if (from.has_backing_table_id()) {
      set_backing_table_id(from.backing_table_id());
    }
    if (from.has_first_key()) {
      set_has_first_key();
      first_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.first_key_);
    }
    if (from.has_first_not_owned_key()) {
      set_has_first_not_owned_key();
      first_not_owned_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.first_not_owned_key_);
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_service_locator()) {
      set_has_service_locator();
      service_locator_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_locator_);
    }
    if (from.has_user_data()) {
      set_user_data(from.user_data());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Indexlet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RAMCloud.ProtoBuf.Indexlet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Indexlet::CopyFrom(const Indexlet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RAMCloud.ProtoBuf.Indexlet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Indexlet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Indexlet::Swap(Indexlet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Indexlet::InternalSwap(Indexlet* other) {
  std::swap(table_id_, other->table_id_);
  std::swap(index_id_, other->index_id_);
  std::swap(backing_table_id_, other->backing_table_id_);
  first_key_.Swap(&other->first_key_);
  first_not_owned_key_.Swap(&other->first_not_owned_key_);
  std::swap(server_id_, other->server_id_);
  service_locator_.Swap(&other->service_locator_);
  std::swap(user_data_, other->user_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Indexlet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Indexlet_descriptor_;
  metadata.reflection = Indexlet_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Indexlet

// required uint64 table_id = 1;
bool Indexlet::has_table_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Indexlet::set_has_table_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Indexlet::clear_has_table_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Indexlet::clear_table_id() {
  table_id_ = GOOGLE_ULONGLONG(0);
  clear_has_table_id();
}
 ::google::protobuf::uint64 Indexlet::table_id() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Indexlet.table_id)
  return table_id_;
}
 void Indexlet::set_table_id(::google::protobuf::uint64 value) {
  set_has_table_id();
  table_id_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Indexlet.table_id)
}

// required uint32 index_id = 2;
bool Indexlet::has_index_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Indexlet::set_has_index_id() {
  _has_bits_[0] |= 0x00000002u;
}
void Indexlet::clear_has_index_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void Indexlet::clear_index_id() {
  index_id_ = 0u;
  clear_has_index_id();
}
 ::google::protobuf::uint32 Indexlet::index_id() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Indexlet.index_id)
  return index_id_;
}
 void Indexlet::set_index_id(::google::protobuf::uint32 value) {
  set_has_index_id();
  index_id_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Indexlet.index_id)
}

// required uint64 backing_table_id = 3;
bool Indexlet::has_backing_table_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Indexlet::set_has_backing_table_id() {
  _has_bits_[0] |= 0x00000004u;
}
void Indexlet::clear_has_backing_table_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void Indexlet::clear_backing_table_id() {
  backing_table_id_ = GOOGLE_ULONGLONG(0);
  clear_has_backing_table_id();
}
 ::google::protobuf::uint64 Indexlet::backing_table_id() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Indexlet.backing_table_id)
  return backing_table_id_;
}
 void Indexlet::set_backing_table_id(::google::protobuf::uint64 value) {
  set_has_backing_table_id();
  backing_table_id_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Indexlet.backing_table_id)
}

// optional bytes first_key = 4;
bool Indexlet::has_first_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Indexlet::set_has_first_key() {
  _has_bits_[0] |= 0x00000008u;
}
void Indexlet::clear_has_first_key() {
  _has_bits_[0] &= ~0x00000008u;
}
void Indexlet::clear_first_key() {
  first_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_first_key();
}
 const ::std::string& Indexlet::first_key() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Indexlet.first_key)
  return first_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Indexlet::set_first_key(const ::std::string& value) {
  set_has_first_key();
  first_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Indexlet.first_key)
}
 void Indexlet::set_first_key(const char* value) {
  set_has_first_key();
  first_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RAMCloud.ProtoBuf.Indexlet.first_key)
}
 void Indexlet::set_first_key(const void* value, size_t size) {
  set_has_first_key();
  first_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RAMCloud.ProtoBuf.Indexlet.first_key)
}
 ::std::string* Indexlet::mutable_first_key() {
  set_has_first_key();
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.Indexlet.first_key)
  return first_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Indexlet::release_first_key() {
  // @@protoc_insertion_point(field_release:RAMCloud.ProtoBuf.Indexlet.first_key)
  clear_has_first_key();
  return first_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Indexlet::set_allocated_first_key(::std::string* first_key) {
  if (first_key != NULL) {
    set_has_first_key();
  } else {
    clear_has_first_key();
  }
  first_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), first_key);
  // @@protoc_insertion_point(field_set_allocated:RAMCloud.ProtoBuf.Indexlet.first_key)
}

// optional bytes first_not_owned_key = 5;
bool Indexlet::has_first_not_owned_key() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Indexlet::set_has_first_not_owned_key() {
  _has_bits_[0] |= 0x00000010u;
}
void Indexlet::clear_has_first_not_owned_key() {
  _has_bits_[0] &= ~0x00000010u;
}
void Indexlet::clear_first_not_owned_key() {
  first_not_owned_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_first_not_owned_key();
}
 const ::std::string& Indexlet::first_not_owned_key() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Indexlet.first_not_owned_key)
  return first_not_owned_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Indexlet::set_first_not_owned_key(const ::std::string& value) {
  set_has_first_not_owned_key();
  first_not_owned_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Indexlet.first_not_owned_key)
}
 void Indexlet::set_first_not_owned_key(const char* value) {
  set_has_first_not_owned_key();
  first_not_owned_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RAMCloud.ProtoBuf.Indexlet.first_not_owned_key)
}
 void Indexlet::set_first_not_owned_key(const void* value, size_t size) {
  set_has_first_not_owned_key();
  first_not_owned_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RAMCloud.ProtoBuf.Indexlet.first_not_owned_key)
}
 ::std::string* Indexlet::mutable_first_not_owned_key() {
  set_has_first_not_owned_key();
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.Indexlet.first_not_owned_key)
  return first_not_owned_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Indexlet::release_first_not_owned_key() {
  // @@protoc_insertion_point(field_release:RAMCloud.ProtoBuf.Indexlet.first_not_owned_key)
  clear_has_first_not_owned_key();
  return first_not_owned_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Indexlet::set_allocated_first_not_owned_key(::std::string* first_not_owned_key) {
  if (first_not_owned_key != NULL) {
    set_has_first_not_owned_key();
  } else {
    clear_has_first_not_owned_key();
  }
  first_not_owned_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), first_not_owned_key);
  // @@protoc_insertion_point(field_set_allocated:RAMCloud.ProtoBuf.Indexlet.first_not_owned_key)
}

// optional fixed64 server_id = 6;
bool Indexlet::has_server_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Indexlet::set_has_server_id() {
  _has_bits_[0] |= 0x00000020u;
}
void Indexlet::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void Indexlet::clear_server_id() {
  server_id_ = GOOGLE_ULONGLONG(0);
  clear_has_server_id();
}
 ::google::protobuf::uint64 Indexlet::server_id() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Indexlet.server_id)
  return server_id_;
}
 void Indexlet::set_server_id(::google::protobuf::uint64 value) {
  set_has_server_id();
  server_id_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Indexlet.server_id)
}

// optional string service_locator = 7;
bool Indexlet::has_service_locator() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Indexlet::set_has_service_locator() {
  _has_bits_[0] |= 0x00000040u;
}
void Indexlet::clear_has_service_locator() {
  _has_bits_[0] &= ~0x00000040u;
}
void Indexlet::clear_service_locator() {
  service_locator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_service_locator();
}
 const ::std::string& Indexlet::service_locator() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Indexlet.service_locator)
  return service_locator_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Indexlet::set_service_locator(const ::std::string& value) {
  set_has_service_locator();
  service_locator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Indexlet.service_locator)
}
 void Indexlet::set_service_locator(const char* value) {
  set_has_service_locator();
  service_locator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RAMCloud.ProtoBuf.Indexlet.service_locator)
}
 void Indexlet::set_service_locator(const char* value, size_t size) {
  set_has_service_locator();
  service_locator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RAMCloud.ProtoBuf.Indexlet.service_locator)
}
 ::std::string* Indexlet::mutable_service_locator() {
  set_has_service_locator();
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.Indexlet.service_locator)
  return service_locator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Indexlet::release_service_locator() {
  // @@protoc_insertion_point(field_release:RAMCloud.ProtoBuf.Indexlet.service_locator)
  clear_has_service_locator();
  return service_locator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Indexlet::set_allocated_service_locator(::std::string* service_locator) {
  if (service_locator != NULL) {
    set_has_service_locator();
  } else {
    clear_has_service_locator();
  }
  service_locator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_locator);
  // @@protoc_insertion_point(field_set_allocated:RAMCloud.ProtoBuf.Indexlet.service_locator)
}

// optional fixed64 user_data = 8;
bool Indexlet::has_user_data() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Indexlet::set_has_user_data() {
  _has_bits_[0] |= 0x00000080u;
}
void Indexlet::clear_has_user_data() {
  _has_bits_[0] &= ~0x00000080u;
}
void Indexlet::clear_user_data() {
  user_data_ = GOOGLE_ULONGLONG(0);
  clear_has_user_data();
}
 ::google::protobuf::uint64 Indexlet::user_data() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.Indexlet.user_data)
  return user_data_;
}
 void Indexlet::set_user_data(::google::protobuf::uint64 value) {
  set_has_user_data();
  user_data_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.Indexlet.user_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoBuf
}  // namespace RAMCloud

// @@protoc_insertion_point(global_scope)
// RAMCloud pragma [GCCWARN=0]
