// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SpinLockStatistics.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SpinLockStatistics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace RAMCloud {
namespace ProtoBuf {

namespace {

const ::google::protobuf::Descriptor* SpinLockStatistics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpinLockStatistics_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpinLockStatistics_Lock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpinLockStatistics_Lock_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SpinLockStatistics_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_SpinLockStatistics_2eproto() {
  protobuf_AddDesc_SpinLockStatistics_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SpinLockStatistics.proto");
  GOOGLE_CHECK(file != NULL);
  SpinLockStatistics_descriptor_ = file->message_type(0);
  static const int SpinLockStatistics_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpinLockStatistics, locks_),
  };
  SpinLockStatistics_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SpinLockStatistics_descriptor_,
      SpinLockStatistics::default_instance_,
      SpinLockStatistics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpinLockStatistics, _has_bits_[0]),
      -1,
      -1,
      sizeof(SpinLockStatistics),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpinLockStatistics, _internal_metadata_),
      -1);
  SpinLockStatistics_Lock_descriptor_ = SpinLockStatistics_descriptor_->nested_type(0);
  static const int SpinLockStatistics_Lock_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpinLockStatistics_Lock, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpinLockStatistics_Lock, acquisitions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpinLockStatistics_Lock, contended_acquisitions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpinLockStatistics_Lock, contended_nsec_),
  };
  SpinLockStatistics_Lock_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SpinLockStatistics_Lock_descriptor_,
      SpinLockStatistics_Lock::default_instance_,
      SpinLockStatistics_Lock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpinLockStatistics_Lock, _has_bits_[0]),
      -1,
      -1,
      sizeof(SpinLockStatistics_Lock),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpinLockStatistics_Lock, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SpinLockStatistics_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SpinLockStatistics_descriptor_, &SpinLockStatistics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SpinLockStatistics_Lock_descriptor_, &SpinLockStatistics_Lock::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SpinLockStatistics_2eproto() {
  delete SpinLockStatistics::default_instance_;
  delete SpinLockStatistics_reflection_;
  delete SpinLockStatistics_Lock::default_instance_;
  delete SpinLockStatistics_Lock_reflection_;
}

void protobuf_AddDesc_SpinLockStatistics_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_SpinLockStatistics_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030SpinLockStatistics.proto\022\021RAMCloud.Pro"
    "toBuf\"\263\001\n\022SpinLockStatistics\0229\n\005locks\030\001 "
    "\003(\0132*.RAMCloud.ProtoBuf.SpinLockStatisti"
    "cs.Lock\032b\n\004Lock\022\014\n\004name\030\001 \002(\t\022\024\n\014acquisi"
    "tions\030\002 \002(\006\022\036\n\026contended_acquisitions\030\003 "
    "\002(\006\022\026\n\016contended_nsec\030\004 \002(\006", 227);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SpinLockStatistics.proto", &protobuf_RegisterTypes);
  SpinLockStatistics::default_instance_ = new SpinLockStatistics();
  SpinLockStatistics_Lock::default_instance_ = new SpinLockStatistics_Lock();
  SpinLockStatistics::default_instance_->InitAsDefaultInstance();
  SpinLockStatistics_Lock::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SpinLockStatistics_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SpinLockStatistics_2eproto {
  StaticDescriptorInitializer_SpinLockStatistics_2eproto() {
    protobuf_AddDesc_SpinLockStatistics_2eproto();
  }
} static_descriptor_initializer_SpinLockStatistics_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpinLockStatistics_Lock::kNameFieldNumber;
const int SpinLockStatistics_Lock::kAcquisitionsFieldNumber;
const int SpinLockStatistics_Lock::kContendedAcquisitionsFieldNumber;
const int SpinLockStatistics_Lock::kContendedNsecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpinLockStatistics_Lock::SpinLockStatistics_Lock()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RAMCloud.ProtoBuf.SpinLockStatistics.Lock)
}

void SpinLockStatistics_Lock::InitAsDefaultInstance() {
}

SpinLockStatistics_Lock::SpinLockStatistics_Lock(const SpinLockStatistics_Lock& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RAMCloud.ProtoBuf.SpinLockStatistics.Lock)
}

void SpinLockStatistics_Lock::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  acquisitions_ = GOOGLE_ULONGLONG(0);
  contended_acquisitions_ = GOOGLE_ULONGLONG(0);
  contended_nsec_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpinLockStatistics_Lock::~SpinLockStatistics_Lock() {
  // @@protoc_insertion_point(destructor:RAMCloud.ProtoBuf.SpinLockStatistics.Lock)
  SharedDtor();
}

void SpinLockStatistics_Lock::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SpinLockStatistics_Lock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpinLockStatistics_Lock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpinLockStatistics_Lock_descriptor_;
}

const SpinLockStatistics_Lock& SpinLockStatistics_Lock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SpinLockStatistics_2eproto();
  return *default_instance_;
}

SpinLockStatistics_Lock* SpinLockStatistics_Lock::default_instance_ = NULL;

SpinLockStatistics_Lock* SpinLockStatistics_Lock::New(::google::protobuf::Arena* arena) const {
  SpinLockStatistics_Lock* n = new SpinLockStatistics_Lock;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpinLockStatistics_Lock::Clear() {
// @@protoc_insertion_point(message_clear_start:RAMCloud.ProtoBuf.SpinLockStatistics.Lock)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SpinLockStatistics_Lock, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SpinLockStatistics_Lock*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(acquisitions_, contended_nsec_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SpinLockStatistics_Lock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RAMCloud.ProtoBuf.SpinLockStatistics.Lock)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RAMCloud.ProtoBuf.SpinLockStatistics.Lock.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_acquisitions;
        break;
      }

      // required fixed64 acquisitions = 2;
      case 2: {
        if (tag == 17) {
         parse_acquisitions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &acquisitions_)));
          set_has_acquisitions();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_contended_acquisitions;
        break;
      }

      // required fixed64 contended_acquisitions = 3;
      case 3: {
        if (tag == 25) {
         parse_contended_acquisitions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &contended_acquisitions_)));
          set_has_contended_acquisitions();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_contended_nsec;
        break;
      }

      // required fixed64 contended_nsec = 4;
      case 4: {
        if (tag == 33) {
         parse_contended_nsec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &contended_nsec_)));
          set_has_contended_nsec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RAMCloud.ProtoBuf.SpinLockStatistics.Lock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RAMCloud.ProtoBuf.SpinLockStatistics.Lock)
  return false;
#undef DO_
}

void SpinLockStatistics_Lock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RAMCloud.ProtoBuf.SpinLockStatistics.Lock)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RAMCloud.ProtoBuf.SpinLockStatistics.Lock.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required fixed64 acquisitions = 2;
  if (has_acquisitions()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->acquisitions(), output);
  }

  // required fixed64 contended_acquisitions = 3;
  if (has_contended_acquisitions()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->contended_acquisitions(), output);
  }

  // required fixed64 contended_nsec = 4;
  if (has_contended_nsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->contended_nsec(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RAMCloud.ProtoBuf.SpinLockStatistics.Lock)
}

::google::protobuf::uint8* SpinLockStatistics_Lock::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RAMCloud.ProtoBuf.SpinLockStatistics.Lock)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RAMCloud.ProtoBuf.SpinLockStatistics.Lock.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required fixed64 acquisitions = 2;
  if (has_acquisitions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->acquisitions(), target);
  }

  // required fixed64 contended_acquisitions = 3;
  if (has_contended_acquisitions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->contended_acquisitions(), target);
  }

  // required fixed64 contended_nsec = 4;
  if (has_contended_nsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->contended_nsec(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RAMCloud.ProtoBuf.SpinLockStatistics.Lock)
  return target;
}

int SpinLockStatistics_Lock::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RAMCloud.ProtoBuf.SpinLockStatistics.Lock)
  int total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_acquisitions()) {
    // required fixed64 acquisitions = 2;
    total_size += 1 + 8;
  }

  if (has_contended_acquisitions()) {
    // required fixed64 contended_acquisitions = 3;
    total_size += 1 + 8;
  }

  if (has_contended_nsec()) {
    // required fixed64 contended_nsec = 4;
    total_size += 1 + 8;
  }

  return total_size;
}
int SpinLockStatistics_Lock::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:RAMCloud.ProtoBuf.SpinLockStatistics.Lock)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required fixed64 acquisitions = 2;
    total_size += 1 + 8;

    // required fixed64 contended_acquisitions = 3;
    total_size += 1 + 8;

    // required fixed64 contended_nsec = 4;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpinLockStatistics_Lock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RAMCloud.ProtoBuf.SpinLockStatistics.Lock)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SpinLockStatistics_Lock* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SpinLockStatistics_Lock>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RAMCloud.ProtoBuf.SpinLockStatistics.Lock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RAMCloud.ProtoBuf.SpinLockStatistics.Lock)
    MergeFrom(*source);
  }
}

void SpinLockStatistics_Lock::MergeFrom(const SpinLockStatistics_Lock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RAMCloud.ProtoBuf.SpinLockStatistics.Lock)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_acquisitions()) {
      set_acquisitions(from.acquisitions());
    }
    if (from.has_contended_acquisitions()) {
      set_contended_acquisitions(from.contended_acquisitions());
    }
    if (from.has_contended_nsec()) {
      set_contended_nsec(from.contended_nsec());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SpinLockStatistics_Lock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RAMCloud.ProtoBuf.SpinLockStatistics.Lock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpinLockStatistics_Lock::CopyFrom(const SpinLockStatistics_Lock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RAMCloud.ProtoBuf.SpinLockStatistics.Lock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpinLockStatistics_Lock::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void SpinLockStatistics_Lock::Swap(SpinLockStatistics_Lock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpinLockStatistics_Lock::InternalSwap(SpinLockStatistics_Lock* other) {
  name_.Swap(&other->name_);
  std::swap(acquisitions_, other->acquisitions_);
  std::swap(contended_acquisitions_, other->contended_acquisitions_);
  std::swap(contended_nsec_, other->contended_nsec_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpinLockStatistics_Lock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpinLockStatistics_Lock_descriptor_;
  metadata.reflection = SpinLockStatistics_Lock_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpinLockStatistics::kLocksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpinLockStatistics::SpinLockStatistics()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RAMCloud.ProtoBuf.SpinLockStatistics)
}

void SpinLockStatistics::InitAsDefaultInstance() {
}

SpinLockStatistics::SpinLockStatistics(const SpinLockStatistics& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RAMCloud.ProtoBuf.SpinLockStatistics)
}

void SpinLockStatistics::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpinLockStatistics::~SpinLockStatistics() {
  // @@protoc_insertion_point(destructor:RAMCloud.ProtoBuf.SpinLockStatistics)
  SharedDtor();
}

void SpinLockStatistics::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SpinLockStatistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpinLockStatistics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpinLockStatistics_descriptor_;
}

const SpinLockStatistics& SpinLockStatistics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SpinLockStatistics_2eproto();
  return *default_instance_;
}

SpinLockStatistics* SpinLockStatistics::default_instance_ = NULL;

SpinLockStatistics* SpinLockStatistics::New(::google::protobuf::Arena* arena) const {
  SpinLockStatistics* n = new SpinLockStatistics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpinLockStatistics::Clear() {
// @@protoc_insertion_point(message_clear_start:RAMCloud.ProtoBuf.SpinLockStatistics)
  locks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SpinLockStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RAMCloud.ProtoBuf.SpinLockStatistics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RAMCloud.ProtoBuf.SpinLockStatistics.Lock locks = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_locks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_locks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_locks;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RAMCloud.ProtoBuf.SpinLockStatistics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RAMCloud.ProtoBuf.SpinLockStatistics)
  return false;
#undef DO_
}

void SpinLockStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RAMCloud.ProtoBuf.SpinLockStatistics)
  // repeated .RAMCloud.ProtoBuf.SpinLockStatistics.Lock locks = 1;
  for (unsigned int i = 0, n = this->locks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->locks(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RAMCloud.ProtoBuf.SpinLockStatistics)
}

::google::protobuf::uint8* SpinLockStatistics::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RAMCloud.ProtoBuf.SpinLockStatistics)
  // repeated .RAMCloud.ProtoBuf.SpinLockStatistics.Lock locks = 1;
  for (unsigned int i = 0, n = this->locks_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->locks(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RAMCloud.ProtoBuf.SpinLockStatistics)
  return target;
}

int SpinLockStatistics::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:RAMCloud.ProtoBuf.SpinLockStatistics)
  int total_size = 0;

  // repeated .RAMCloud.ProtoBuf.SpinLockStatistics.Lock locks = 1;
  total_size += 1 * this->locks_size();
  for (int i = 0; i < this->locks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->locks(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpinLockStatistics::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RAMCloud.ProtoBuf.SpinLockStatistics)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SpinLockStatistics* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SpinLockStatistics>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RAMCloud.ProtoBuf.SpinLockStatistics)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RAMCloud.ProtoBuf.SpinLockStatistics)
    MergeFrom(*source);
  }
}

void SpinLockStatistics::MergeFrom(const SpinLockStatistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RAMCloud.ProtoBuf.SpinLockStatistics)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  locks_.MergeFrom(from.locks_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SpinLockStatistics::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RAMCloud.ProtoBuf.SpinLockStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpinLockStatistics::CopyFrom(const SpinLockStatistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RAMCloud.ProtoBuf.SpinLockStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpinLockStatistics::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->locks())) return false;
  return true;
}

void SpinLockStatistics::Swap(SpinLockStatistics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpinLockStatistics::InternalSwap(SpinLockStatistics* other) {
  locks_.UnsafeArenaSwap(&other->locks_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpinLockStatistics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpinLockStatistics_descriptor_;
  metadata.reflection = SpinLockStatistics_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SpinLockStatistics_Lock

// required string name = 1;
bool SpinLockStatistics_Lock::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SpinLockStatistics_Lock::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void SpinLockStatistics_Lock::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void SpinLockStatistics_Lock::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& SpinLockStatistics_Lock::name() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.SpinLockStatistics.Lock.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SpinLockStatistics_Lock::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.SpinLockStatistics.Lock.name)
}
 void SpinLockStatistics_Lock::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RAMCloud.ProtoBuf.SpinLockStatistics.Lock.name)
}
 void SpinLockStatistics_Lock::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RAMCloud.ProtoBuf.SpinLockStatistics.Lock.name)
}
 ::std::string* SpinLockStatistics_Lock::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.SpinLockStatistics.Lock.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SpinLockStatistics_Lock::release_name() {
  // @@protoc_insertion_point(field_release:RAMCloud.ProtoBuf.SpinLockStatistics.Lock.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SpinLockStatistics_Lock::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:RAMCloud.ProtoBuf.SpinLockStatistics.Lock.name)
}

// required fixed64 acquisitions = 2;
bool SpinLockStatistics_Lock::has_acquisitions() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SpinLockStatistics_Lock::set_has_acquisitions() {
  _has_bits_[0] |= 0x00000002u;
}
void SpinLockStatistics_Lock::clear_has_acquisitions() {
  _has_bits_[0] &= ~0x00000002u;
}
void SpinLockStatistics_Lock::clear_acquisitions() {
  acquisitions_ = GOOGLE_ULONGLONG(0);
  clear_has_acquisitions();
}
 ::google::protobuf::uint64 SpinLockStatistics_Lock::acquisitions() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.SpinLockStatistics.Lock.acquisitions)
  return acquisitions_;
}
 void SpinLockStatistics_Lock::set_acquisitions(::google::protobuf::uint64 value) {
  set_has_acquisitions();
  acquisitions_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.SpinLockStatistics.Lock.acquisitions)
}

// required fixed64 contended_acquisitions = 3;
bool SpinLockStatistics_Lock::has_contended_acquisitions() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SpinLockStatistics_Lock::set_has_contended_acquisitions() {
  _has_bits_[0] |= 0x00000004u;
}
void SpinLockStatistics_Lock::clear_has_contended_acquisitions() {
  _has_bits_[0] &= ~0x00000004u;
}
void SpinLockStatistics_Lock::clear_contended_acquisitions() {
  contended_acquisitions_ = GOOGLE_ULONGLONG(0);
  clear_has_contended_acquisitions();
}
 ::google::protobuf::uint64 SpinLockStatistics_Lock::contended_acquisitions() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.SpinLockStatistics.Lock.contended_acquisitions)
  return contended_acquisitions_;
}
 void SpinLockStatistics_Lock::set_contended_acquisitions(::google::protobuf::uint64 value) {
  set_has_contended_acquisitions();
  contended_acquisitions_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.SpinLockStatistics.Lock.contended_acquisitions)
}

// required fixed64 contended_nsec = 4;
bool SpinLockStatistics_Lock::has_contended_nsec() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SpinLockStatistics_Lock::set_has_contended_nsec() {
  _has_bits_[0] |= 0x00000008u;
}
void SpinLockStatistics_Lock::clear_has_contended_nsec() {
  _has_bits_[0] &= ~0x00000008u;
}
void SpinLockStatistics_Lock::clear_contended_nsec() {
  contended_nsec_ = GOOGLE_ULONGLONG(0);
  clear_has_contended_nsec();
}
 ::google::protobuf::uint64 SpinLockStatistics_Lock::contended_nsec() const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.SpinLockStatistics.Lock.contended_nsec)
  return contended_nsec_;
}
 void SpinLockStatistics_Lock::set_contended_nsec(::google::protobuf::uint64 value) {
  set_has_contended_nsec();
  contended_nsec_ = value;
  // @@protoc_insertion_point(field_set:RAMCloud.ProtoBuf.SpinLockStatistics.Lock.contended_nsec)
}

// -------------------------------------------------------------------

// SpinLockStatistics

// repeated .RAMCloud.ProtoBuf.SpinLockStatistics.Lock locks = 1;
int SpinLockStatistics::locks_size() const {
  return locks_.size();
}
void SpinLockStatistics::clear_locks() {
  locks_.Clear();
}
const ::RAMCloud::ProtoBuf::SpinLockStatistics_Lock& SpinLockStatistics::locks(int index) const {
  // @@protoc_insertion_point(field_get:RAMCloud.ProtoBuf.SpinLockStatistics.locks)
  return locks_.Get(index);
}
::RAMCloud::ProtoBuf::SpinLockStatistics_Lock* SpinLockStatistics::mutable_locks(int index) {
  // @@protoc_insertion_point(field_mutable:RAMCloud.ProtoBuf.SpinLockStatistics.locks)
  return locks_.Mutable(index);
}
::RAMCloud::ProtoBuf::SpinLockStatistics_Lock* SpinLockStatistics::add_locks() {
  // @@protoc_insertion_point(field_add:RAMCloud.ProtoBuf.SpinLockStatistics.locks)
  return locks_.Add();
}
::google::protobuf::RepeatedPtrField< ::RAMCloud::ProtoBuf::SpinLockStatistics_Lock >*
SpinLockStatistics::mutable_locks() {
  // @@protoc_insertion_point(field_mutable_list:RAMCloud.ProtoBuf.SpinLockStatistics.locks)
  return &locks_;
}
const ::google::protobuf::RepeatedPtrField< ::RAMCloud::ProtoBuf::SpinLockStatistics_Lock >&
SpinLockStatistics::locks() const {
  // @@protoc_insertion_point(field_list:RAMCloud.ProtoBuf.SpinLockStatistics.locks)
  return locks_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoBuf
}  // namespace RAMCloud

// @@protoc_insertion_point(global_scope)
// RAMCloud pragma [GCCWARN=0]
